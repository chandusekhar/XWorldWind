//
// StyleType2.SetSamplerState(0, SamplerStatecs.SetSamplerState(0, SamplerStatecs
//
// This file was generated by XMLSpy 2005 Enterprise Edition.SetSamplerState(0, SamplerState
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.SetSamplerState(0, SamplerState
//
// Refer to the XMLSpy Documentation for further details.SetSamplerState(0, SamplerState
// http://www.SetSamplerState(0, SamplerStatealtova.SetSamplerState(0, SamplerStatecom/xmlspy
//


using System;
using System.SetSamplerState(0, SamplerStateCollections;
using System.SetSamplerState(0, SamplerStateXml;
using Altova.SetSamplerState(0, SamplerStateTypes;

namespace LayerSet
{
	public class StyleType2 : Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateNode
	{
		#region Forward constructors
		public StyleType2() : base() {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public StyleType2(XmlDocument doc) : base(doc) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public StyleType2(XmlNode node) : base(node) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public StyleType2(Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateNode node) : base(node) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsBold"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsBold", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsItalic"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsItalic", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsUnderlined"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsUnderlined", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsStrikeout"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsStrikeout", i);
				InternalAdjustPrefix(DOMNode, true);
			}
		}


		#region IsBold accessor methods
		public int GetIsBoldMinCount()
		{
			return 0;
		}

		public int IsBoldMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetIsBoldMaxCount()
		{
			return 1;
		}

		public int IsBoldMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetIsBoldCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsBold");
		}

		public int IsBoldCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsBold");
			}
		}

		public bool HasIsBold()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsBold");
		}

		public SchemaBoolean GetIsBoldAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsBold", index)));
		}

		public XmlNode GetStartingIsBoldCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "IsBold" );
		}

		public XmlNode GetAdvancedIsBoldCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "IsBold", curNode );
		}

		public SchemaBoolean GetIsBoldValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new SchemaBoolean( curNode.SetSamplerState(0, SamplerStateInnerText );
		}


		public SchemaBoolean GetIsBold()
		{
			return this.SetSamplerState(0, SamplerStateGetIsBoldAt(0);
		}

		public SchemaBoolean IsBold
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetIsBoldAt(0);
			}
		}

		public void RemoveIsBoldAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsBold", index);
		}

		public void RemoveIsBold()
		{
			while (this.SetSamplerState(0, SamplerStateHasIsBold()) this.SetSamplerState(0, SamplerStateRemoveIsBoldAt(0);
		}

		public void AddIsBold(SchemaBoolean newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsBold", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertIsBoldAt(SchemaBoolean newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsBold", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceIsBoldAt(SchemaBoolean newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsBold", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // IsBold accessor methods

		#region IsBold collection
        public IsBoldCollection	MyIsBolds = new IsBoldCollection( );

        public class IsBoldCollection: IEnumerable
        {
            StyleType2 parent;
            public StyleType2 Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public IsBoldEnumerator GetEnumerator() 
			{
				return new IsBoldEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class IsBoldEnumerator: IEnumerator 
        {
			int nIndex;
			StyleType2 parent;
			public IsBoldEnumerator(StyleType2 par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateIsBoldCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetIsBoldAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // IsBold collection

		#region IsItalic accessor methods
		public int GetIsItalicMinCount()
		{
			return 0;
		}

		public int IsItalicMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetIsItalicMaxCount()
		{
			return 1;
		}

		public int IsItalicMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetIsItalicCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsItalic");
		}

		public int IsItalicCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsItalic");
			}
		}

		public bool HasIsItalic()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsItalic");
		}

		public SchemaBoolean GetIsItalicAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsItalic", index)));
		}

		public XmlNode GetStartingIsItalicCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "IsItalic" );
		}

		public XmlNode GetAdvancedIsItalicCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "IsItalic", curNode );
		}

		public SchemaBoolean GetIsItalicValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new SchemaBoolean( curNode.SetSamplerState(0, SamplerStateInnerText );
		}


		public SchemaBoolean GetIsItalic()
		{
			return this.SetSamplerState(0, SamplerStateGetIsItalicAt(0);
		}

		public SchemaBoolean IsItalic
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetIsItalicAt(0);
			}
		}

		public void RemoveIsItalicAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsItalic", index);
		}

		public void RemoveIsItalic()
		{
			while (this.SetSamplerState(0, SamplerStateHasIsItalic()) this.SetSamplerState(0, SamplerStateRemoveIsItalicAt(0);
		}

		public void AddIsItalic(SchemaBoolean newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsItalic", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertIsItalicAt(SchemaBoolean newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsItalic", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceIsItalicAt(SchemaBoolean newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsItalic", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // IsItalic accessor methods

		#region IsItalic collection
        public IsItalicCollection	MyIsItalics = new IsItalicCollection( );

        public class IsItalicCollection: IEnumerable
        {
            StyleType2 parent;
            public StyleType2 Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public IsItalicEnumerator GetEnumerator() 
			{
				return new IsItalicEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class IsItalicEnumerator: IEnumerator 
        {
			int nIndex;
			StyleType2 parent;
			public IsItalicEnumerator(StyleType2 par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateIsItalicCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetIsItalicAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // IsItalic collection

		#region IsUnderlined accessor methods
		public int GetIsUnderlinedMinCount()
		{
			return 0;
		}

		public int IsUnderlinedMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetIsUnderlinedMaxCount()
		{
			return 1;
		}

		public int IsUnderlinedMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetIsUnderlinedCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsUnderlined");
		}

		public int IsUnderlinedCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsUnderlined");
			}
		}

		public bool HasIsUnderlined()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsUnderlined");
		}

		public SchemaBoolean GetIsUnderlinedAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsUnderlined", index)));
		}

		public XmlNode GetStartingIsUnderlinedCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "IsUnderlined" );
		}

		public XmlNode GetAdvancedIsUnderlinedCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "IsUnderlined", curNode );
		}

		public SchemaBoolean GetIsUnderlinedValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new SchemaBoolean( curNode.SetSamplerState(0, SamplerStateInnerText );
		}


		public SchemaBoolean GetIsUnderlined()
		{
			return this.SetSamplerState(0, SamplerStateGetIsUnderlinedAt(0);
		}

		public SchemaBoolean IsUnderlined
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetIsUnderlinedAt(0);
			}
		}

		public void RemoveIsUnderlinedAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsUnderlined", index);
		}

		public void RemoveIsUnderlined()
		{
			while (this.SetSamplerState(0, SamplerStateHasIsUnderlined()) this.SetSamplerState(0, SamplerStateRemoveIsUnderlinedAt(0);
		}

		public void AddIsUnderlined(SchemaBoolean newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsUnderlined", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertIsUnderlinedAt(SchemaBoolean newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsUnderlined", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceIsUnderlinedAt(SchemaBoolean newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsUnderlined", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // IsUnderlined accessor methods

		#region IsUnderlined collection
        public IsUnderlinedCollection	MyIsUnderlineds = new IsUnderlinedCollection( );

        public class IsUnderlinedCollection: IEnumerable
        {
            StyleType2 parent;
            public StyleType2 Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public IsUnderlinedEnumerator GetEnumerator() 
			{
				return new IsUnderlinedEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class IsUnderlinedEnumerator: IEnumerator 
        {
			int nIndex;
			StyleType2 parent;
			public IsUnderlinedEnumerator(StyleType2 par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateIsUnderlinedCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetIsUnderlinedAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // IsUnderlined collection

		#region IsStrikeout accessor methods
		public int GetIsStrikeoutMinCount()
		{
			return 0;
		}

		public int IsStrikeoutMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetIsStrikeoutMaxCount()
		{
			return 1;
		}

		public int IsStrikeoutMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetIsStrikeoutCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsStrikeout");
		}

		public int IsStrikeoutCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsStrikeout");
			}
		}

		public bool HasIsStrikeout()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsStrikeout");
		}

		public SchemaBoolean GetIsStrikeoutAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsStrikeout", index)));
		}

		public XmlNode GetStartingIsStrikeoutCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "IsStrikeout" );
		}

		public XmlNode GetAdvancedIsStrikeoutCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "IsStrikeout", curNode );
		}

		public SchemaBoolean GetIsStrikeoutValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new SchemaBoolean( curNode.SetSamplerState(0, SamplerStateInnerText );
		}


		public SchemaBoolean GetIsStrikeout()
		{
			return this.SetSamplerState(0, SamplerStateGetIsStrikeoutAt(0);
		}

		public SchemaBoolean IsStrikeout
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetIsStrikeoutAt(0);
			}
		}

		public void RemoveIsStrikeoutAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsStrikeout", index);
		}

		public void RemoveIsStrikeout()
		{
			while (this.SetSamplerState(0, SamplerStateHasIsStrikeout()) this.SetSamplerState(0, SamplerStateRemoveIsStrikeoutAt(0);
		}

		public void AddIsStrikeout(SchemaBoolean newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsStrikeout", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertIsStrikeoutAt(SchemaBoolean newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsStrikeout", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceIsStrikeoutAt(SchemaBoolean newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "IsStrikeout", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // IsStrikeout accessor methods

		#region IsStrikeout collection
        public IsStrikeoutCollection	MyIsStrikeouts = new IsStrikeoutCollection( );

        public class IsStrikeoutCollection: IEnumerable
        {
            StyleType2 parent;
            public StyleType2 Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public IsStrikeoutEnumerator GetEnumerator() 
			{
				return new IsStrikeoutEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class IsStrikeoutEnumerator: IEnumerator 
        {
			int nIndex;
			StyleType2 parent;
			public IsStrikeoutEnumerator(StyleType2 par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateIsStrikeoutCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetIsStrikeoutAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // IsStrikeout collection

        private void SetCollectionParents()
        {
            this.SetSamplerState(0, SamplerStateMyIsBolds.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyIsItalics.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyIsUnderlineds.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyIsStrikeouts.SetSamplerState(0, SamplerStateParent = this; 
	}
}
}
