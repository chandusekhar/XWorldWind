//
// Type_Icon.SetSamplerState(0, SamplerStatecs.SetSamplerState(0, SamplerStatecs
//
// This file was generated by XMLSpy 2005 Enterprise Edition.SetSamplerState(0, SamplerState
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.SetSamplerState(0, SamplerState
//
// Refer to the XMLSpy Documentation for further details.SetSamplerState(0, SamplerState
// http://www.SetSamplerState(0, SamplerStatealtova.SetSamplerState(0, SamplerStatecom/xmlspy
//


using System;
using System.SetSamplerState(0, SamplerStateCollections;
using System.SetSamplerState(0, SamplerStateXml;
using Altova.SetSamplerState(0, SamplerStateTypes;

namespace LayerSet
{
	public class Type_Icon : Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateNode
	{
		#region Forward constructors
		public Type_Icon() : base() {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public Type_Icon(XmlDocument doc) : base(doc) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public Type_Icon(XmlNode node) : base(node) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public Type_Icon(Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateNode node) : base(node) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Name"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Name", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Latitude"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Latitude", i);
				InternalAdjustPrefix(DOMNode, true);
				new Type_LatitudeCoordinate2(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Longitude"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Longitude", i);
				InternalAdjustPrefix(DOMNode, true);
				new Type_LongitudeCoordinate2(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "MinimumDisplayAltitude"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "MinimumDisplayAltitude", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "MaximumDisplayAltitude"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "MaximumDisplayAltitude", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureFilePath"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureFilePath", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureWidthPixels"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureWidthPixels", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureHeightPixels"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureHeightPixels", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "IconWidthPixels"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "IconWidthPixels", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "IconHeightPixels"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "IconHeightPixels", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Caption"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Caption", i);
				InternalAdjustPrefix(DOMNode, true);
				new Type_Caption(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "ClickableUrl"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "ClickableUrl", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "MouseoverTextColor"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "MouseoverTextColor", i);
				InternalAdjustPrefix(DOMNode, true);
				new Type_RGBColor2(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation", i);
				InternalAdjustPrefix(DOMNode, true);
				new Type_ExtendedInformation(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Description"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Description", i);
				InternalAdjustPrefix(DOMNode, true);
			}
		}


		#region ShowAtStartup accessor methods
		public int GetShowAtStartupMinCount()
		{
			return 1;
		}

		public int ShowAtStartupMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetShowAtStartupMaxCount()
		{
			return 1;
		}

		public int ShowAtStartupMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetShowAtStartupCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup");
		}

		public int ShowAtStartupCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup");
			}
		}

		public bool HasShowAtStartup()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup");
		}

		public SchemaBoolean GetShowAtStartupAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup", index)));
		}

		public XmlNode GetStartingShowAtStartupCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup" );
		}

		public XmlNode GetAdvancedShowAtStartupCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup", curNode );
		}

		public SchemaBoolean GetShowAtStartupValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new SchemaBoolean( curNode.SetSamplerState(0, SamplerStateValue );
		}


		public SchemaBoolean GetShowAtStartup()
		{
			return this.SetSamplerState(0, SamplerStateGetShowAtStartupAt(0);
		}

		public SchemaBoolean ShowAtStartup
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetShowAtStartupAt(0);
			}
		}

		public void RemoveShowAtStartupAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup", index);
		}

		public void RemoveShowAtStartup()
		{
			while (this.SetSamplerState(0, SamplerStateHasShowAtStartup()) this.SetSamplerState(0, SamplerStateRemoveShowAtStartupAt(0);
		}

		public void AddShowAtStartup(SchemaBoolean newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertShowAtStartupAt(SchemaBoolean newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceShowAtStartupAt(SchemaBoolean newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // ShowAtStartup accessor methods

		#region ShowAtStartup collection
        public ShowAtStartupCollection	MyShowAtStartups = new ShowAtStartupCollection( );

        public class ShowAtStartupCollection: IEnumerable
        {
            Type_Icon parent;
            public Type_Icon Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public ShowAtStartupEnumerator GetEnumerator() 
			{
				return new ShowAtStartupEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class ShowAtStartupEnumerator: IEnumerator 
        {
			int nIndex;
			Type_Icon parent;
			public ShowAtStartupEnumerator(Type_Icon par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateShowAtStartupCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetShowAtStartupAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // ShowAtStartup collection

		#region Name accessor methods
		public int GetNameMinCount()
		{
			return 1;
		}

		public int NameMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNameMaxCount()
		{
			return 1;
		}

		public int NameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNameCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Name");
		}

		public int NameCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Name");
			}
		}

		public bool HasName()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "Name");
		}

		public SchemaString GetNameAt(int index)
		{
			return new SchemaString(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Name", index)));
		}

		public XmlNode GetStartingNameCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "Name" );
		}

		public XmlNode GetAdvancedNameCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "Name", curNode );
		}

		public SchemaString GetNameValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new SchemaString( curNode.SetSamplerState(0, SamplerStateInnerText );
		}


		public SchemaString GetName()
		{
			return this.SetSamplerState(0, SamplerStateGetNameAt(0);
		}

		public SchemaString Name
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetNameAt(0);
			}
		}

		public void RemoveNameAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Name", index);
		}

		public void RemoveName()
		{
			while (this.SetSamplerState(0, SamplerStateHasName()) this.SetSamplerState(0, SamplerStateRemoveNameAt(0);
		}

		public void AddName(SchemaString newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "Name", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertNameAt(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Name", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceNameAt(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Name", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // Name accessor methods

		#region Name collection
        public NameCollection	MyNames = new NameCollection( );

        public class NameCollection: IEnumerable
        {
            Type_Icon parent;
            public Type_Icon Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public NameEnumerator GetEnumerator() 
			{
				return new NameEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class NameEnumerator: IEnumerator 
        {
			int nIndex;
			Type_Icon parent;
			public NameEnumerator(Type_Icon par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateNameCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetNameAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // Name collection

		#region Latitude accessor methods
		public int GetLatitudeMinCount()
		{
			return 1;
		}

		public int LatitudeMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetLatitudeMaxCount()
		{
			return 1;
		}

		public int LatitudeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetLatitudeCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Latitude");
		}

		public int LatitudeCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Latitude");
			}
		}

		public bool HasLatitude()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "Latitude");
		}

		public Type_LatitudeCoordinate2 GetLatitudeAt(int index)
		{
			return new Type_LatitudeCoordinate2(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Latitude", index));
		}

		public XmlNode GetStartingLatitudeCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "Latitude" );
		}

		public XmlNode GetAdvancedLatitudeCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "Latitude", curNode );
		}

		public Type_LatitudeCoordinate2 GetLatitudeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new Type_LatitudeCoordinate2( curNode );
		}


		public Type_LatitudeCoordinate2 GetLatitude()
		{
			return this.SetSamplerState(0, SamplerStateGetLatitudeAt(0);
		}

		public Type_LatitudeCoordinate2 Latitude
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetLatitudeAt(0);
			}
		}

		public void RemoveLatitudeAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Latitude", index);
		}

		public void RemoveLatitude()
		{
			while (this.SetSamplerState(0, SamplerStateHasLatitude()) this.SetSamplerState(0, SamplerStateRemoveLatitudeAt(0);
		}

		public void AddLatitude(Type_LatitudeCoordinate2 newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "Latitude", newValue);
		}

		public void InsertLatitudeAt(Type_LatitudeCoordinate2 newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "Latitude", index, newValue);
		}

		public void ReplaceLatitudeAt(Type_LatitudeCoordinate2 newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "Latitude", index, newValue);
		}
		#endregion // Latitude accessor methods

		#region Latitude collection
        public LatitudeCollection	MyLatitudes = new LatitudeCollection( );

        public class LatitudeCollection: IEnumerable
        {
            Type_Icon parent;
            public Type_Icon Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public LatitudeEnumerator GetEnumerator() 
			{
				return new LatitudeEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class LatitudeEnumerator: IEnumerator 
        {
			int nIndex;
			Type_Icon parent;
			public LatitudeEnumerator(Type_Icon par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateLatitudeCount );
			}
			public Type_LatitudeCoordinate2  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetLatitudeAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // Latitude collection

		#region Longitude accessor methods
		public int GetLongitudeMinCount()
		{
			return 1;
		}

		public int LongitudeMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetLongitudeMaxCount()
		{
			return 1;
		}

		public int LongitudeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetLongitudeCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Longitude");
		}

		public int LongitudeCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Longitude");
			}
		}

		public bool HasLongitude()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "Longitude");
		}

		public Type_LongitudeCoordinate2 GetLongitudeAt(int index)
		{
			return new Type_LongitudeCoordinate2(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Longitude", index));
		}

		public XmlNode GetStartingLongitudeCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "Longitude" );
		}

		public XmlNode GetAdvancedLongitudeCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "Longitude", curNode );
		}

		public Type_LongitudeCoordinate2 GetLongitudeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new Type_LongitudeCoordinate2( curNode );
		}


		public Type_LongitudeCoordinate2 GetLongitude()
		{
			return this.SetSamplerState(0, SamplerStateGetLongitudeAt(0);
		}

		public Type_LongitudeCoordinate2 Longitude
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetLongitudeAt(0);
			}
		}

		public void RemoveLongitudeAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Longitude", index);
		}

		public void RemoveLongitude()
		{
			while (this.SetSamplerState(0, SamplerStateHasLongitude()) this.SetSamplerState(0, SamplerStateRemoveLongitudeAt(0);
		}

		public void AddLongitude(Type_LongitudeCoordinate2 newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "Longitude", newValue);
		}

		public void InsertLongitudeAt(Type_LongitudeCoordinate2 newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "Longitude", index, newValue);
		}

		public void ReplaceLongitudeAt(Type_LongitudeCoordinate2 newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "Longitude", index, newValue);
		}
		#endregion // Longitude accessor methods

		#region Longitude collection
        public LongitudeCollection	MyLongitudes = new LongitudeCollection( );

        public class LongitudeCollection: IEnumerable
        {
            Type_Icon parent;
            public Type_Icon Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public LongitudeEnumerator GetEnumerator() 
			{
				return new LongitudeEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class LongitudeEnumerator: IEnumerator 
        {
			int nIndex;
			Type_Icon parent;
			public LongitudeEnumerator(Type_Icon par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateLongitudeCount );
			}
			public Type_LongitudeCoordinate2  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetLongitudeAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // Longitude collection

		#region DistanceAboveSurface accessor methods
		public int GetDistanceAboveSurfaceMinCount()
		{
			return 1;
		}

		public int DistanceAboveSurfaceMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetDistanceAboveSurfaceMaxCount()
		{
			return 1;
		}

		public int DistanceAboveSurfaceMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetDistanceAboveSurfaceCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface");
		}

		public int DistanceAboveSurfaceCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface");
			}
		}

		public bool HasDistanceAboveSurface()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface");
		}

		public SchemaDecimal GetDistanceAboveSurfaceAt(int index)
		{
			return new SchemaDecimal(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface", index)));
		}

		public XmlNode GetStartingDistanceAboveSurfaceCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface" );
		}

		public XmlNode GetAdvancedDistanceAboveSurfaceCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface", curNode );
		}

		public SchemaDecimal GetDistanceAboveSurfaceValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new SchemaDecimal( curNode.SetSamplerState(0, SamplerStateInnerText );
		}


		public SchemaDecimal GetDistanceAboveSurface()
		{
			return this.SetSamplerState(0, SamplerStateGetDistanceAboveSurfaceAt(0);
		}

		public SchemaDecimal DistanceAboveSurface
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetDistanceAboveSurfaceAt(0);
			}
		}

		public void RemoveDistanceAboveSurfaceAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface", index);
		}

		public void RemoveDistanceAboveSurface()
		{
			while (this.SetSamplerState(0, SamplerStateHasDistanceAboveSurface()) this.SetSamplerState(0, SamplerStateRemoveDistanceAboveSurfaceAt(0);
		}

		public void AddDistanceAboveSurface(SchemaDecimal newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertDistanceAboveSurfaceAt(SchemaDecimal newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceDistanceAboveSurfaceAt(SchemaDecimal newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // DistanceAboveSurface accessor methods

		#region DistanceAboveSurface collection
        public DistanceAboveSurfaceCollection	MyDistanceAboveSurfaces = new DistanceAboveSurfaceCollection( );

        public class DistanceAboveSurfaceCollection: IEnumerable
        {
            Type_Icon parent;
            public Type_Icon Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public DistanceAboveSurfaceEnumerator GetEnumerator() 
			{
				return new DistanceAboveSurfaceEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class DistanceAboveSurfaceEnumerator: IEnumerator 
        {
			int nIndex;
			Type_Icon parent;
			public DistanceAboveSurfaceEnumerator(Type_Icon par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateDistanceAboveSurfaceCount );
			}
			public SchemaDecimal  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetDistanceAboveSurfaceAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // DistanceAboveSurface collection

		#region MinimumDisplayAltitude accessor methods
		public int GetMinimumDisplayAltitudeMinCount()
		{
			return 0;
		}

		public int MinimumDisplayAltitudeMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetMinimumDisplayAltitudeMaxCount()
		{
			return 1;
		}

		public int MinimumDisplayAltitudeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetMinimumDisplayAltitudeCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "MinimumDisplayAltitude");
		}

		public int MinimumDisplayAltitudeCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "MinimumDisplayAltitude");
			}
		}

		public bool HasMinimumDisplayAltitude()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "MinimumDisplayAltitude");
		}

		public SchemaDecimal GetMinimumDisplayAltitudeAt(int index)
		{
			return new SchemaDecimal(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "MinimumDisplayAltitude", index)));
		}

		public XmlNode GetStartingMinimumDisplayAltitudeCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "MinimumDisplayAltitude" );
		}

		public XmlNode GetAdvancedMinimumDisplayAltitudeCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "MinimumDisplayAltitude", curNode );
		}

		public SchemaDecimal GetMinimumDisplayAltitudeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new SchemaDecimal( curNode.SetSamplerState(0, SamplerStateInnerText );
		}


		public SchemaDecimal GetMinimumDisplayAltitude()
		{
			return this.SetSamplerState(0, SamplerStateGetMinimumDisplayAltitudeAt(0);
		}

		public SchemaDecimal MinimumDisplayAltitude
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetMinimumDisplayAltitudeAt(0);
			}
		}

		public void RemoveMinimumDisplayAltitudeAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "MinimumDisplayAltitude", index);
		}

		public void RemoveMinimumDisplayAltitude()
		{
			while (this.SetSamplerState(0, SamplerStateHasMinimumDisplayAltitude()) this.SetSamplerState(0, SamplerStateRemoveMinimumDisplayAltitudeAt(0);
		}

		public void AddMinimumDisplayAltitude(SchemaDecimal newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "MinimumDisplayAltitude", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertMinimumDisplayAltitudeAt(SchemaDecimal newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "MinimumDisplayAltitude", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceMinimumDisplayAltitudeAt(SchemaDecimal newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "MinimumDisplayAltitude", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // MinimumDisplayAltitude accessor methods

		#region MinimumDisplayAltitude collection
        public MinimumDisplayAltitudeCollection	MyMinimumDisplayAltitudes = new MinimumDisplayAltitudeCollection( );

        public class MinimumDisplayAltitudeCollection: IEnumerable
        {
            Type_Icon parent;
            public Type_Icon Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public MinimumDisplayAltitudeEnumerator GetEnumerator() 
			{
				return new MinimumDisplayAltitudeEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class MinimumDisplayAltitudeEnumerator: IEnumerator 
        {
			int nIndex;
			Type_Icon parent;
			public MinimumDisplayAltitudeEnumerator(Type_Icon par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateMinimumDisplayAltitudeCount );
			}
			public SchemaDecimal  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetMinimumDisplayAltitudeAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // MinimumDisplayAltitude collection

		#region MaximumDisplayAltitude accessor methods
		public int GetMaximumDisplayAltitudeMinCount()
		{
			return 0;
		}

		public int MaximumDisplayAltitudeMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetMaximumDisplayAltitudeMaxCount()
		{
			return 1;
		}

		public int MaximumDisplayAltitudeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetMaximumDisplayAltitudeCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "MaximumDisplayAltitude");
		}

		public int MaximumDisplayAltitudeCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "MaximumDisplayAltitude");
			}
		}

		public bool HasMaximumDisplayAltitude()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "MaximumDisplayAltitude");
		}

		public SchemaDecimal GetMaximumDisplayAltitudeAt(int index)
		{
			return new SchemaDecimal(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "MaximumDisplayAltitude", index)));
		}

		public XmlNode GetStartingMaximumDisplayAltitudeCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "MaximumDisplayAltitude" );
		}

		public XmlNode GetAdvancedMaximumDisplayAltitudeCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "MaximumDisplayAltitude", curNode );
		}

		public SchemaDecimal GetMaximumDisplayAltitudeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new SchemaDecimal( curNode.SetSamplerState(0, SamplerStateInnerText );
		}


		public SchemaDecimal GetMaximumDisplayAltitude()
		{
			return this.SetSamplerState(0, SamplerStateGetMaximumDisplayAltitudeAt(0);
		}

		public SchemaDecimal MaximumDisplayAltitude
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetMaximumDisplayAltitudeAt(0);
			}
		}

		public void RemoveMaximumDisplayAltitudeAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "MaximumDisplayAltitude", index);
		}

		public void RemoveMaximumDisplayAltitude()
		{
			while (this.SetSamplerState(0, SamplerStateHasMaximumDisplayAltitude()) this.SetSamplerState(0, SamplerStateRemoveMaximumDisplayAltitudeAt(0);
		}

		public void AddMaximumDisplayAltitude(SchemaDecimal newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "MaximumDisplayAltitude", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertMaximumDisplayAltitudeAt(SchemaDecimal newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "MaximumDisplayAltitude", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceMaximumDisplayAltitudeAt(SchemaDecimal newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "MaximumDisplayAltitude", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // MaximumDisplayAltitude accessor methods

		#region MaximumDisplayAltitude collection
        public MaximumDisplayAltitudeCollection	MyMaximumDisplayAltitudes = new MaximumDisplayAltitudeCollection( );

        public class MaximumDisplayAltitudeCollection: IEnumerable
        {
            Type_Icon parent;
            public Type_Icon Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public MaximumDisplayAltitudeEnumerator GetEnumerator() 
			{
				return new MaximumDisplayAltitudeEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class MaximumDisplayAltitudeEnumerator: IEnumerator 
        {
			int nIndex;
			Type_Icon parent;
			public MaximumDisplayAltitudeEnumerator(Type_Icon par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateMaximumDisplayAltitudeCount );
			}
			public SchemaDecimal  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetMaximumDisplayAltitudeAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // MaximumDisplayAltitude collection

		#region TextureFilePath accessor methods
		public int GetTextureFilePathMinCount()
		{
			return 1;
		}

		public int TextureFilePathMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetTextureFilePathMaxCount()
		{
			return 1;
		}

		public int TextureFilePathMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetTextureFilePathCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureFilePath");
		}

		public int TextureFilePathCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureFilePath");
			}
		}

		public bool HasTextureFilePath()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureFilePath");
		}

		public SchemaString GetTextureFilePathAt(int index)
		{
			return new SchemaString(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureFilePath", index)));
		}

		public XmlNode GetStartingTextureFilePathCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureFilePath" );
		}

		public XmlNode GetAdvancedTextureFilePathCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureFilePath", curNode );
		}

		public SchemaString GetTextureFilePathValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new SchemaString( curNode.SetSamplerState(0, SamplerStateInnerText );
		}


		public SchemaString GetTextureFilePath()
		{
			return this.SetSamplerState(0, SamplerStateGetTextureFilePathAt(0);
		}

		public SchemaString TextureFilePath
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetTextureFilePathAt(0);
			}
		}

		public void RemoveTextureFilePathAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureFilePath", index);
		}

		public void RemoveTextureFilePath()
		{
			while (this.SetSamplerState(0, SamplerStateHasTextureFilePath()) this.SetSamplerState(0, SamplerStateRemoveTextureFilePathAt(0);
		}

		public void AddTextureFilePath(SchemaString newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureFilePath", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertTextureFilePathAt(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureFilePath", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceTextureFilePathAt(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureFilePath", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // TextureFilePath accessor methods

		#region TextureFilePath collection
        public TextureFilePathCollection	MyTextureFilePaths = new TextureFilePathCollection( );

        public class TextureFilePathCollection: IEnumerable
        {
            Type_Icon parent;
            public Type_Icon Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public TextureFilePathEnumerator GetEnumerator() 
			{
				return new TextureFilePathEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class TextureFilePathEnumerator: IEnumerator 
        {
			int nIndex;
			Type_Icon parent;
			public TextureFilePathEnumerator(Type_Icon par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateTextureFilePathCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetTextureFilePathAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // TextureFilePath collection

		#region TextureWidthPixels accessor methods
		public int GetTextureWidthPixelsMinCount()
		{
			return 1;
		}

		public int TextureWidthPixelsMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetTextureWidthPixelsMaxCount()
		{
			return 1;
		}

		public int TextureWidthPixelsMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetTextureWidthPixelsCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureWidthPixels");
		}

		public int TextureWidthPixelsCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureWidthPixels");
			}
		}

		public bool HasTextureWidthPixels()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureWidthPixels");
		}

		public SchemaInt GetTextureWidthPixelsAt(int index)
		{
			return new SchemaInt(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureWidthPixels", index)));
		}

		public XmlNode GetStartingTextureWidthPixelsCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureWidthPixels" );
		}

		public XmlNode GetAdvancedTextureWidthPixelsCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureWidthPixels", curNode );
		}

		public SchemaInt GetTextureWidthPixelsValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new SchemaInt( curNode.SetSamplerState(0, SamplerStateInnerText );
		}


		public SchemaInt GetTextureWidthPixels()
		{
			return this.SetSamplerState(0, SamplerStateGetTextureWidthPixelsAt(0);
		}

		public SchemaInt TextureWidthPixels
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetTextureWidthPixelsAt(0);
			}
		}

		public void RemoveTextureWidthPixelsAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureWidthPixels", index);
		}

		public void RemoveTextureWidthPixels()
		{
			while (this.SetSamplerState(0, SamplerStateHasTextureWidthPixels()) this.SetSamplerState(0, SamplerStateRemoveTextureWidthPixelsAt(0);
		}

		public void AddTextureWidthPixels(SchemaInt newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureWidthPixels", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertTextureWidthPixelsAt(SchemaInt newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureWidthPixels", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceTextureWidthPixelsAt(SchemaInt newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureWidthPixels", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // TextureWidthPixels accessor methods

		#region TextureWidthPixels collection
        public TextureWidthPixelsCollection	MyTextureWidthPixelss = new TextureWidthPixelsCollection( );

        public class TextureWidthPixelsCollection: IEnumerable
        {
            Type_Icon parent;
            public Type_Icon Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public TextureWidthPixelsEnumerator GetEnumerator() 
			{
				return new TextureWidthPixelsEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class TextureWidthPixelsEnumerator: IEnumerator 
        {
			int nIndex;
			Type_Icon parent;
			public TextureWidthPixelsEnumerator(Type_Icon par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateTextureWidthPixelsCount );
			}
			public SchemaInt  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetTextureWidthPixelsAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // TextureWidthPixels collection

		#region TextureHeightPixels accessor methods
		public int GetTextureHeightPixelsMinCount()
		{
			return 1;
		}

		public int TextureHeightPixelsMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetTextureHeightPixelsMaxCount()
		{
			return 1;
		}

		public int TextureHeightPixelsMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetTextureHeightPixelsCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureHeightPixels");
		}

		public int TextureHeightPixelsCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureHeightPixels");
			}
		}

		public bool HasTextureHeightPixels()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureHeightPixels");
		}

		public SchemaInt GetTextureHeightPixelsAt(int index)
		{
			return new SchemaInt(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureHeightPixels", index)));
		}

		public XmlNode GetStartingTextureHeightPixelsCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureHeightPixels" );
		}

		public XmlNode GetAdvancedTextureHeightPixelsCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureHeightPixels", curNode );
		}

		public SchemaInt GetTextureHeightPixelsValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new SchemaInt( curNode.SetSamplerState(0, SamplerStateInnerText );
		}


		public SchemaInt GetTextureHeightPixels()
		{
			return this.SetSamplerState(0, SamplerStateGetTextureHeightPixelsAt(0);
		}

		public SchemaInt TextureHeightPixels
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetTextureHeightPixelsAt(0);
			}
		}

		public void RemoveTextureHeightPixelsAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureHeightPixels", index);
		}

		public void RemoveTextureHeightPixels()
		{
			while (this.SetSamplerState(0, SamplerStateHasTextureHeightPixels()) this.SetSamplerState(0, SamplerStateRemoveTextureHeightPixelsAt(0);
		}

		public void AddTextureHeightPixels(SchemaInt newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureHeightPixels", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertTextureHeightPixelsAt(SchemaInt newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureHeightPixels", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceTextureHeightPixelsAt(SchemaInt newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TextureHeightPixels", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // TextureHeightPixels accessor methods

		#region TextureHeightPixels collection
        public TextureHeightPixelsCollection	MyTextureHeightPixelss = new TextureHeightPixelsCollection( );

        public class TextureHeightPixelsCollection: IEnumerable
        {
            Type_Icon parent;
            public Type_Icon Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public TextureHeightPixelsEnumerator GetEnumerator() 
			{
				return new TextureHeightPixelsEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class TextureHeightPixelsEnumerator: IEnumerator 
        {
			int nIndex;
			Type_Icon parent;
			public TextureHeightPixelsEnumerator(Type_Icon par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateTextureHeightPixelsCount );
			}
			public SchemaInt  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetTextureHeightPixelsAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // TextureHeightPixels collection

		#region IconWidthPixels accessor methods
		public int GetIconWidthPixelsMinCount()
		{
			return 1;
		}

		public int IconWidthPixelsMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetIconWidthPixelsMaxCount()
		{
			return 1;
		}

		public int IconWidthPixelsMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetIconWidthPixelsCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "IconWidthPixels");
		}

		public int IconWidthPixelsCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "IconWidthPixels");
			}
		}

		public bool HasIconWidthPixels()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "IconWidthPixels");
		}

		public SchemaInt GetIconWidthPixelsAt(int index)
		{
			return new SchemaInt(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "IconWidthPixels", index)));
		}

		public XmlNode GetStartingIconWidthPixelsCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "IconWidthPixels" );
		}

		public XmlNode GetAdvancedIconWidthPixelsCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "IconWidthPixels", curNode );
		}

		public SchemaInt GetIconWidthPixelsValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new SchemaInt( curNode.SetSamplerState(0, SamplerStateInnerText );
		}


		public SchemaInt GetIconWidthPixels()
		{
			return this.SetSamplerState(0, SamplerStateGetIconWidthPixelsAt(0);
		}

		public SchemaInt IconWidthPixels
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetIconWidthPixelsAt(0);
			}
		}

		public void RemoveIconWidthPixelsAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "IconWidthPixels", index);
		}

		public void RemoveIconWidthPixels()
		{
			while (this.SetSamplerState(0, SamplerStateHasIconWidthPixels()) this.SetSamplerState(0, SamplerStateRemoveIconWidthPixelsAt(0);
		}

		public void AddIconWidthPixels(SchemaInt newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "IconWidthPixels", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertIconWidthPixelsAt(SchemaInt newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "IconWidthPixels", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceIconWidthPixelsAt(SchemaInt newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "IconWidthPixels", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // IconWidthPixels accessor methods

		#region IconWidthPixels collection
        public IconWidthPixelsCollection	MyIconWidthPixelss = new IconWidthPixelsCollection( );

        public class IconWidthPixelsCollection: IEnumerable
        {
            Type_Icon parent;
            public Type_Icon Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public IconWidthPixelsEnumerator GetEnumerator() 
			{
				return new IconWidthPixelsEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class IconWidthPixelsEnumerator: IEnumerator 
        {
			int nIndex;
			Type_Icon parent;
			public IconWidthPixelsEnumerator(Type_Icon par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateIconWidthPixelsCount );
			}
			public SchemaInt  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetIconWidthPixelsAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // IconWidthPixels collection

		#region IconHeightPixels accessor methods
		public int GetIconHeightPixelsMinCount()
		{
			return 1;
		}

		public int IconHeightPixelsMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetIconHeightPixelsMaxCount()
		{
			return 1;
		}

		public int IconHeightPixelsMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetIconHeightPixelsCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "IconHeightPixels");
		}

		public int IconHeightPixelsCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "IconHeightPixels");
			}
		}

		public bool HasIconHeightPixels()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "IconHeightPixels");
		}

		public SchemaInt GetIconHeightPixelsAt(int index)
		{
			return new SchemaInt(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "IconHeightPixels", index)));
		}

		public XmlNode GetStartingIconHeightPixelsCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "IconHeightPixels" );
		}

		public XmlNode GetAdvancedIconHeightPixelsCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "IconHeightPixels", curNode );
		}

		public SchemaInt GetIconHeightPixelsValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new SchemaInt( curNode.SetSamplerState(0, SamplerStateInnerText );
		}


		public SchemaInt GetIconHeightPixels()
		{
			return this.SetSamplerState(0, SamplerStateGetIconHeightPixelsAt(0);
		}

		public SchemaInt IconHeightPixels
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetIconHeightPixelsAt(0);
			}
		}

		public void RemoveIconHeightPixelsAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "IconHeightPixels", index);
		}

		public void RemoveIconHeightPixels()
		{
			while (this.SetSamplerState(0, SamplerStateHasIconHeightPixels()) this.SetSamplerState(0, SamplerStateRemoveIconHeightPixelsAt(0);
		}

		public void AddIconHeightPixels(SchemaInt newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "IconHeightPixels", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertIconHeightPixelsAt(SchemaInt newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "IconHeightPixels", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceIconHeightPixelsAt(SchemaInt newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "IconHeightPixels", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // IconHeightPixels accessor methods

		#region IconHeightPixels collection
        public IconHeightPixelsCollection	MyIconHeightPixelss = new IconHeightPixelsCollection( );

        public class IconHeightPixelsCollection: IEnumerable
        {
            Type_Icon parent;
            public Type_Icon Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public IconHeightPixelsEnumerator GetEnumerator() 
			{
				return new IconHeightPixelsEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class IconHeightPixelsEnumerator: IEnumerator 
        {
			int nIndex;
			Type_Icon parent;
			public IconHeightPixelsEnumerator(Type_Icon par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateIconHeightPixelsCount );
			}
			public SchemaInt  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetIconHeightPixelsAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // IconHeightPixels collection

		#region Caption accessor methods
		public int GetCaptionMinCount()
		{
			return 0;
		}

		public int CaptionMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetCaptionMaxCount()
		{
			return 1;
		}

		public int CaptionMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetCaptionCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Caption");
		}

		public int CaptionCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Caption");
			}
		}

		public bool HasCaption()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "Caption");
		}

		public Type_Caption GetCaptionAt(int index)
		{
			return new Type_Caption(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Caption", index));
		}

		public XmlNode GetStartingCaptionCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "Caption" );
		}

		public XmlNode GetAdvancedCaptionCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "Caption", curNode );
		}

		public Type_Caption GetCaptionValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new Type_Caption( curNode );
		}


		public Type_Caption GetCaption()
		{
			return this.SetSamplerState(0, SamplerStateGetCaptionAt(0);
		}

		public Type_Caption Caption
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetCaptionAt(0);
			}
		}

		public void RemoveCaptionAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Caption", index);
		}

		public void RemoveCaption()
		{
			while (this.SetSamplerState(0, SamplerStateHasCaption()) this.SetSamplerState(0, SamplerStateRemoveCaptionAt(0);
		}

		public void AddCaption(Type_Caption newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "Caption", newValue);
		}

		public void InsertCaptionAt(Type_Caption newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "Caption", index, newValue);
		}

		public void ReplaceCaptionAt(Type_Caption newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "Caption", index, newValue);
		}
		#endregion // Caption accessor methods

		#region Caption collection
        public CaptionCollection	MyCaptions = new CaptionCollection( );

        public class CaptionCollection: IEnumerable
        {
            Type_Icon parent;
            public Type_Icon Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public CaptionEnumerator GetEnumerator() 
			{
				return new CaptionEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class CaptionEnumerator: IEnumerator 
        {
			int nIndex;
			Type_Icon parent;
			public CaptionEnumerator(Type_Icon par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateCaptionCount );
			}
			public Type_Caption  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetCaptionAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // Caption collection

		#region ClickableUrl accessor methods
		public int GetClickableUrlMinCount()
		{
			return 0;
		}

		public int ClickableUrlMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetClickableUrlMaxCount()
		{
			return 1;
		}

		public int ClickableUrlMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetClickableUrlCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "ClickableUrl");
		}

		public int ClickableUrlCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "ClickableUrl");
			}
		}

		public bool HasClickableUrl()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "ClickableUrl");
		}

		public SchemaString GetClickableUrlAt(int index)
		{
			return new SchemaString(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "ClickableUrl", index)));
		}

		public XmlNode GetStartingClickableUrlCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "ClickableUrl" );
		}

		public XmlNode GetAdvancedClickableUrlCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "ClickableUrl", curNode );
		}

		public SchemaString GetClickableUrlValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new SchemaString( curNode.SetSamplerState(0, SamplerStateInnerText );
		}


		public SchemaString GetClickableUrl()
		{
			return this.SetSamplerState(0, SamplerStateGetClickableUrlAt(0);
		}

		public SchemaString ClickableUrl
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetClickableUrlAt(0);
			}
		}

		public void RemoveClickableUrlAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "ClickableUrl", index);
		}

		public void RemoveClickableUrl()
		{
			while (this.SetSamplerState(0, SamplerStateHasClickableUrl()) this.SetSamplerState(0, SamplerStateRemoveClickableUrlAt(0);
		}

		public void AddClickableUrl(SchemaString newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "ClickableUrl", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertClickableUrlAt(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "ClickableUrl", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceClickableUrlAt(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "ClickableUrl", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // ClickableUrl accessor methods

		#region ClickableUrl collection
        public ClickableUrlCollection	MyClickableUrls = new ClickableUrlCollection( );

        public class ClickableUrlCollection: IEnumerable
        {
            Type_Icon parent;
            public Type_Icon Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public ClickableUrlEnumerator GetEnumerator() 
			{
				return new ClickableUrlEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class ClickableUrlEnumerator: IEnumerator 
        {
			int nIndex;
			Type_Icon parent;
			public ClickableUrlEnumerator(Type_Icon par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateClickableUrlCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetClickableUrlAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // ClickableUrl collection

		#region MouseoverTextColor accessor methods
		public int GetMouseoverTextColorMinCount()
		{
			return 0;
		}

		public int MouseoverTextColorMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetMouseoverTextColorMaxCount()
		{
			return 1;
		}

		public int MouseoverTextColorMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetMouseoverTextColorCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "MouseoverTextColor");
		}

		public int MouseoverTextColorCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "MouseoverTextColor");
			}
		}

		public bool HasMouseoverTextColor()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "MouseoverTextColor");
		}

		public Type_RGBColor2 GetMouseoverTextColorAt(int index)
		{
			return new Type_RGBColor2(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "MouseoverTextColor", index));
		}

		public XmlNode GetStartingMouseoverTextColorCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "MouseoverTextColor" );
		}

		public XmlNode GetAdvancedMouseoverTextColorCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "MouseoverTextColor", curNode );
		}

		public Type_RGBColor2 GetMouseoverTextColorValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new Type_RGBColor2( curNode );
		}


		public Type_RGBColor2 GetMouseoverTextColor()
		{
			return this.SetSamplerState(0, SamplerStateGetMouseoverTextColorAt(0);
		}

		public Type_RGBColor2 MouseoverTextColor
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetMouseoverTextColorAt(0);
			}
		}

		public void RemoveMouseoverTextColorAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "MouseoverTextColor", index);
		}

		public void RemoveMouseoverTextColor()
		{
			while (this.SetSamplerState(0, SamplerStateHasMouseoverTextColor()) this.SetSamplerState(0, SamplerStateRemoveMouseoverTextColorAt(0);
		}

		public void AddMouseoverTextColor(Type_RGBColor2 newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "MouseoverTextColor", newValue);
		}

		public void InsertMouseoverTextColorAt(Type_RGBColor2 newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "MouseoverTextColor", index, newValue);
		}

		public void ReplaceMouseoverTextColorAt(Type_RGBColor2 newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "MouseoverTextColor", index, newValue);
		}
		#endregion // MouseoverTextColor accessor methods

		#region MouseoverTextColor collection
        public MouseoverTextColorCollection	MyMouseoverTextColors = new MouseoverTextColorCollection( );

        public class MouseoverTextColorCollection: IEnumerable
        {
            Type_Icon parent;
            public Type_Icon Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public MouseoverTextColorEnumerator GetEnumerator() 
			{
				return new MouseoverTextColorEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class MouseoverTextColorEnumerator: IEnumerator 
        {
			int nIndex;
			Type_Icon parent;
			public MouseoverTextColorEnumerator(Type_Icon par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateMouseoverTextColorCount );
			}
			public Type_RGBColor2  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetMouseoverTextColorAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // MouseoverTextColor collection

		#region ExtendedInformation accessor methods
		public int GetExtendedInformationMinCount()
		{
			return 0;
		}

		public int ExtendedInformationMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetExtendedInformationMaxCount()
		{
			return 1;
		}

		public int ExtendedInformationMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetExtendedInformationCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation");
		}

		public int ExtendedInformationCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation");
			}
		}

		public bool HasExtendedInformation()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation");
		}

		public Type_ExtendedInformation GetExtendedInformationAt(int index)
		{
			return new Type_ExtendedInformation(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation", index));
		}

		public XmlNode GetStartingExtendedInformationCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation" );
		}

		public XmlNode GetAdvancedExtendedInformationCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation", curNode );
		}

		public Type_ExtendedInformation GetExtendedInformationValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new Type_ExtendedInformation( curNode );
		}


		public Type_ExtendedInformation GetExtendedInformation()
		{
			return this.SetSamplerState(0, SamplerStateGetExtendedInformationAt(0);
		}

		public Type_ExtendedInformation ExtendedInformation
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetExtendedInformationAt(0);
			}
		}

		public void RemoveExtendedInformationAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation", index);
		}

		public void RemoveExtendedInformation()
		{
			while (this.SetSamplerState(0, SamplerStateHasExtendedInformation()) this.SetSamplerState(0, SamplerStateRemoveExtendedInformationAt(0);
		}

		public void AddExtendedInformation(Type_ExtendedInformation newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "ExtendedInformation", newValue);
		}

		public void InsertExtendedInformationAt(Type_ExtendedInformation newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "ExtendedInformation", index, newValue);
		}

		public void ReplaceExtendedInformationAt(Type_ExtendedInformation newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "ExtendedInformation", index, newValue);
		}
		#endregion // ExtendedInformation accessor methods

		#region ExtendedInformation collection
        public ExtendedInformationCollection	MyExtendedInformations = new ExtendedInformationCollection( );

        public class ExtendedInformationCollection: IEnumerable
        {
            Type_Icon parent;
            public Type_Icon Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public ExtendedInformationEnumerator GetEnumerator() 
			{
				return new ExtendedInformationEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class ExtendedInformationEnumerator: IEnumerator 
        {
			int nIndex;
			Type_Icon parent;
			public ExtendedInformationEnumerator(Type_Icon par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateExtendedInformationCount );
			}
			public Type_ExtendedInformation  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetExtendedInformationAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // ExtendedInformation collection

		#region Description accessor methods
		public int GetDescriptionMinCount()
		{
			return 0;
		}

		public int DescriptionMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetDescriptionMaxCount()
		{
			return 1;
		}

		public int DescriptionMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetDescriptionCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Description");
		}

		public int DescriptionCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Description");
			}
		}

		public bool HasDescription()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "Description");
		}

		public SchemaString GetDescriptionAt(int index)
		{
			return new SchemaString(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Description", index)));
		}

		public XmlNode GetStartingDescriptionCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "Description" );
		}

		public XmlNode GetAdvancedDescriptionCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "Description", curNode );
		}

		public SchemaString GetDescriptionValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new SchemaString( curNode.SetSamplerState(0, SamplerStateInnerText );
		}


		public SchemaString GetDescription()
		{
			return this.SetSamplerState(0, SamplerStateGetDescriptionAt(0);
		}

		public SchemaString Description
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetDescriptionAt(0);
			}
		}

		public void RemoveDescriptionAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Description", index);
		}

		public void RemoveDescription()
		{
			while (this.SetSamplerState(0, SamplerStateHasDescription()) this.SetSamplerState(0, SamplerStateRemoveDescriptionAt(0);
		}

		public void AddDescription(SchemaString newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "Description", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertDescriptionAt(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Description", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceDescriptionAt(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Description", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // Description accessor methods

		#region Description collection
        public DescriptionCollection	MyDescriptions = new DescriptionCollection( );

        public class DescriptionCollection: IEnumerable
        {
            Type_Icon parent;
            public Type_Icon Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public DescriptionEnumerator GetEnumerator() 
			{
				return new DescriptionEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class DescriptionEnumerator: IEnumerator 
        {
			int nIndex;
			Type_Icon parent;
			public DescriptionEnumerator(Type_Icon par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateDescriptionCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetDescriptionAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // Description collection

        private void SetCollectionParents()
        {
            this.SetSamplerState(0, SamplerStateMyShowAtStartups.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyNames.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyLatitudes.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyLongitudes.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyDistanceAboveSurfaces.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyMinimumDisplayAltitudes.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyMaximumDisplayAltitudes.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyTextureFilePaths.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyTextureWidthPixelss.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyTextureHeightPixelss.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyIconWidthPixelss.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyIconHeightPixelss.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyCaptions.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyClickableUrls.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyMouseoverTextColors.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyExtendedInformations.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyDescriptions.SetSamplerState(0, SamplerStateParent = this; 
	}
}
}
