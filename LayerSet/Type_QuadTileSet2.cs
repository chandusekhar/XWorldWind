//
// Type_QuadTileSet2.SetSamplerState(0, SamplerStatecs.SetSamplerState(0, SamplerStatecs
//
// This file was generated by XMLSpy 2005 Enterprise Edition.SetSamplerState(0, SamplerState
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.SetSamplerState(0, SamplerState
//
// Refer to the XMLSpy Documentation for further details.SetSamplerState(0, SamplerState
// http://www.SetSamplerState(0, SamplerStatealtova.SetSamplerState(0, SamplerStatecom/xmlspy
//


using System;
using System.SetSamplerState(0, SamplerStateCollections;
using System.SetSamplerState(0, SamplerStateXml;
using Altova.SetSamplerState(0, SamplerStateTypes;

namespace LayerSet
{
	public class Type_QuadTileSet2 : Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateNode
	{
		#region Forward constructors
		public Type_QuadTileSet2() : base() {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public Type_QuadTileSet2(XmlDocument doc) : base(doc) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public Type_QuadTileSet2(XmlNode node) : base(node) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public Type_QuadTileSet2(Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateNode node) : base(node) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Name"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Name", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "BoundingBox"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "BoundingBox", i);
				InternalAdjustPrefix(DOMNode, true);
				new Type_LatLonBoundingBox2(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "TerrainMapped"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TerrainMapped", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "ImageAccessor"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "ImageAccessor", i);
				InternalAdjustPrefix(DOMNode, true);
				new Type_ImageAccessor(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "TileDrawDistanceFactor"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TileDrawDistanceFactor", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "TileSpreadFactor"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TileSpreadFactor", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation", i);
				InternalAdjustPrefix(DOMNode, true);
				new Type_ExtendedInformation(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "TransparentColor"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TransparentColor", i);
				InternalAdjustPrefix(DOMNode, true);
				new Type_RGBColor2(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}
		}


		#region ShowAtStartup accessor methods
		public int GetShowAtStartupMinCount()
		{
			return 1;
		}

		public int ShowAtStartupMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetShowAtStartupMaxCount()
		{
			return 1;
		}

		public int ShowAtStartupMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetShowAtStartupCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup");
		}

		public int ShowAtStartupCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup");
			}
		}

		public bool HasShowAtStartup()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup");
		}

		public SchemaBoolean GetShowAtStartupAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup", index)));
		}

		public XmlNode GetStartingShowAtStartupCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup" );
		}

		public XmlNode GetAdvancedShowAtStartupCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup", curNode );
		}

		public SchemaBoolean GetShowAtStartupValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new SchemaBoolean( curNode.SetSamplerState(0, SamplerStateValue );
		}


		public SchemaBoolean GetShowAtStartup()
		{
			return this.SetSamplerState(0, SamplerStateGetShowAtStartupAt(0);
		}

		public SchemaBoolean ShowAtStartup
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetShowAtStartupAt(0);
			}
		}

		public void RemoveShowAtStartupAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup", index);
		}

		public void RemoveShowAtStartup()
		{
			while (this.SetSamplerState(0, SamplerStateHasShowAtStartup()) this.SetSamplerState(0, SamplerStateRemoveShowAtStartupAt(0);
		}

		public void AddShowAtStartup(SchemaBoolean newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertShowAtStartupAt(SchemaBoolean newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceShowAtStartupAt(SchemaBoolean newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // ShowAtStartup accessor methods

		#region ShowAtStartup collection
        public ShowAtStartupCollection	MyShowAtStartups = new ShowAtStartupCollection( );

        public class ShowAtStartupCollection: IEnumerable
        {
            Type_QuadTileSet2 parent;
            public Type_QuadTileSet2 Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public ShowAtStartupEnumerator GetEnumerator() 
			{
				return new ShowAtStartupEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class ShowAtStartupEnumerator: IEnumerator 
        {
			int nIndex;
			Type_QuadTileSet2 parent;
			public ShowAtStartupEnumerator(Type_QuadTileSet2 par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateShowAtStartupCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetShowAtStartupAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // ShowAtStartup collection

		#region Name accessor methods
		public int GetNameMinCount()
		{
			return 1;
		}

		public int NameMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNameMaxCount()
		{
			return 1;
		}

		public int NameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNameCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Name");
		}

		public int NameCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Name");
			}
		}

		public bool HasName()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "Name");
		}

		public SchemaString GetNameAt(int index)
		{
			return new SchemaString(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Name", index)));
		}

		public XmlNode GetStartingNameCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "Name" );
		}

		public XmlNode GetAdvancedNameCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "Name", curNode );
		}

		public SchemaString GetNameValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new SchemaString( curNode.SetSamplerState(0, SamplerStateInnerText );
		}


		public SchemaString GetName()
		{
			return this.SetSamplerState(0, SamplerStateGetNameAt(0);
		}

		public SchemaString Name
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetNameAt(0);
			}
		}

		public void RemoveNameAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Name", index);
		}

		public void RemoveName()
		{
			while (this.SetSamplerState(0, SamplerStateHasName()) this.SetSamplerState(0, SamplerStateRemoveNameAt(0);
		}

		public void AddName(SchemaString newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "Name", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertNameAt(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Name", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceNameAt(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Name", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // Name accessor methods

		#region Name collection
        public NameCollection	MyNames = new NameCollection( );

        public class NameCollection: IEnumerable
        {
            Type_QuadTileSet2 parent;
            public Type_QuadTileSet2 Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public NameEnumerator GetEnumerator() 
			{
				return new NameEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class NameEnumerator: IEnumerator 
        {
			int nIndex;
			Type_QuadTileSet2 parent;
			public NameEnumerator(Type_QuadTileSet2 par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateNameCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetNameAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // Name collection

		#region DistanceAboveSurface accessor methods
		public int GetDistanceAboveSurfaceMinCount()
		{
			return 1;
		}

		public int DistanceAboveSurfaceMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetDistanceAboveSurfaceMaxCount()
		{
			return 1;
		}

		public int DistanceAboveSurfaceMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetDistanceAboveSurfaceCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface");
		}

		public int DistanceAboveSurfaceCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface");
			}
		}

		public bool HasDistanceAboveSurface()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface");
		}

		public SchemaDecimal GetDistanceAboveSurfaceAt(int index)
		{
			return new SchemaDecimal(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface", index)));
		}

		public XmlNode GetStartingDistanceAboveSurfaceCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface" );
		}

		public XmlNode GetAdvancedDistanceAboveSurfaceCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface", curNode );
		}

		public SchemaDecimal GetDistanceAboveSurfaceValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new SchemaDecimal( curNode.SetSamplerState(0, SamplerStateInnerText );
		}


		public SchemaDecimal GetDistanceAboveSurface()
		{
			return this.SetSamplerState(0, SamplerStateGetDistanceAboveSurfaceAt(0);
		}

		public SchemaDecimal DistanceAboveSurface
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetDistanceAboveSurfaceAt(0);
			}
		}

		public void RemoveDistanceAboveSurfaceAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface", index);
		}

		public void RemoveDistanceAboveSurface()
		{
			while (this.SetSamplerState(0, SamplerStateHasDistanceAboveSurface()) this.SetSamplerState(0, SamplerStateRemoveDistanceAboveSurfaceAt(0);
		}

		public void AddDistanceAboveSurface(SchemaDecimal newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertDistanceAboveSurfaceAt(SchemaDecimal newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceDistanceAboveSurfaceAt(SchemaDecimal newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // DistanceAboveSurface accessor methods

		#region DistanceAboveSurface collection
        public DistanceAboveSurfaceCollection	MyDistanceAboveSurfaces = new DistanceAboveSurfaceCollection( );

        public class DistanceAboveSurfaceCollection: IEnumerable
        {
            Type_QuadTileSet2 parent;
            public Type_QuadTileSet2 Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public DistanceAboveSurfaceEnumerator GetEnumerator() 
			{
				return new DistanceAboveSurfaceEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class DistanceAboveSurfaceEnumerator: IEnumerator 
        {
			int nIndex;
			Type_QuadTileSet2 parent;
			public DistanceAboveSurfaceEnumerator(Type_QuadTileSet2 par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateDistanceAboveSurfaceCount );
			}
			public SchemaDecimal  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetDistanceAboveSurfaceAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // DistanceAboveSurface collection

		#region BoundingBox accessor methods
		public int GetBoundingBoxMinCount()
		{
			return 1;
		}

		public int BoundingBoxMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetBoundingBoxMaxCount()
		{
			return 1;
		}

		public int BoundingBoxMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetBoundingBoxCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "BoundingBox");
		}

		public int BoundingBoxCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "BoundingBox");
			}
		}

		public bool HasBoundingBox()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "BoundingBox");
		}

		public Type_LatLonBoundingBox2 GetBoundingBoxAt(int index)
		{
			return new Type_LatLonBoundingBox2(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "BoundingBox", index));
		}

		public XmlNode GetStartingBoundingBoxCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "BoundingBox" );
		}

		public XmlNode GetAdvancedBoundingBoxCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "BoundingBox", curNode );
		}

		public Type_LatLonBoundingBox2 GetBoundingBoxValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new Type_LatLonBoundingBox2( curNode );
		}


		public Type_LatLonBoundingBox2 GetBoundingBox()
		{
			return this.SetSamplerState(0, SamplerStateGetBoundingBoxAt(0);
		}

		public Type_LatLonBoundingBox2 BoundingBox
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetBoundingBoxAt(0);
			}
		}

		public void RemoveBoundingBoxAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "BoundingBox", index);
		}

		public void RemoveBoundingBox()
		{
			while (this.SetSamplerState(0, SamplerStateHasBoundingBox()) this.SetSamplerState(0, SamplerStateRemoveBoundingBoxAt(0);
		}

		public void AddBoundingBox(Type_LatLonBoundingBox2 newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "BoundingBox", newValue);
		}

		public void InsertBoundingBoxAt(Type_LatLonBoundingBox2 newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "BoundingBox", index, newValue);
		}

		public void ReplaceBoundingBoxAt(Type_LatLonBoundingBox2 newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "BoundingBox", index, newValue);
		}
		#endregion // BoundingBox accessor methods

		#region BoundingBox collection
        public BoundingBoxCollection	MyBoundingBoxs = new BoundingBoxCollection( );

        public class BoundingBoxCollection: IEnumerable
        {
            Type_QuadTileSet2 parent;
            public Type_QuadTileSet2 Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public BoundingBoxEnumerator GetEnumerator() 
			{
				return new BoundingBoxEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class BoundingBoxEnumerator: IEnumerator 
        {
			int nIndex;
			Type_QuadTileSet2 parent;
			public BoundingBoxEnumerator(Type_QuadTileSet2 par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateBoundingBoxCount );
			}
			public Type_LatLonBoundingBox2  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetBoundingBoxAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // BoundingBox collection

		#region TerrainMapped accessor methods
		public int GetTerrainMappedMinCount()
		{
			return 1;
		}

		public int TerrainMappedMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetTerrainMappedMaxCount()
		{
			return 1;
		}

		public int TerrainMappedMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetTerrainMappedCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "TerrainMapped");
		}

		public int TerrainMappedCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "TerrainMapped");
			}
		}

		public bool HasTerrainMapped()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "TerrainMapped");
		}

		public SchemaBoolean GetTerrainMappedAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TerrainMapped", index)));
		}

		public XmlNode GetStartingTerrainMappedCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "TerrainMapped" );
		}

		public XmlNode GetAdvancedTerrainMappedCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "TerrainMapped", curNode );
		}

		public SchemaBoolean GetTerrainMappedValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new SchemaBoolean( curNode.SetSamplerState(0, SamplerStateInnerText );
		}


		public SchemaBoolean GetTerrainMapped()
		{
			return this.SetSamplerState(0, SamplerStateGetTerrainMappedAt(0);
		}

		public SchemaBoolean TerrainMapped
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetTerrainMappedAt(0);
			}
		}

		public void RemoveTerrainMappedAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TerrainMapped", index);
		}

		public void RemoveTerrainMapped()
		{
			while (this.SetSamplerState(0, SamplerStateHasTerrainMapped()) this.SetSamplerState(0, SamplerStateRemoveTerrainMappedAt(0);
		}

		public void AddTerrainMapped(SchemaBoolean newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "TerrainMapped", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertTerrainMappedAt(SchemaBoolean newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TerrainMapped", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceTerrainMappedAt(SchemaBoolean newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TerrainMapped", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // TerrainMapped accessor methods

		#region TerrainMapped collection
        public TerrainMappedCollection	MyTerrainMappeds = new TerrainMappedCollection( );

        public class TerrainMappedCollection: IEnumerable
        {
            Type_QuadTileSet2 parent;
            public Type_QuadTileSet2 Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public TerrainMappedEnumerator GetEnumerator() 
			{
				return new TerrainMappedEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class TerrainMappedEnumerator: IEnumerator 
        {
			int nIndex;
			Type_QuadTileSet2 parent;
			public TerrainMappedEnumerator(Type_QuadTileSet2 par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateTerrainMappedCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetTerrainMappedAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // TerrainMapped collection

		#region ImageAccessor accessor methods
		public int GetImageAccessorMinCount()
		{
			return 1;
		}

		public int ImageAccessorMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetImageAccessorMaxCount()
		{
			return 1;
		}

		public int ImageAccessorMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetImageAccessorCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "ImageAccessor");
		}

		public int ImageAccessorCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "ImageAccessor");
			}
		}

		public bool HasImageAccessor()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "ImageAccessor");
		}

		public Type_ImageAccessor GetImageAccessorAt(int index)
		{
			return new Type_ImageAccessor(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "ImageAccessor", index));
		}

		public XmlNode GetStartingImageAccessorCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "ImageAccessor" );
		}

		public XmlNode GetAdvancedImageAccessorCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "ImageAccessor", curNode );
		}

		public Type_ImageAccessor GetImageAccessorValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new Type_ImageAccessor( curNode );
		}


		public Type_ImageAccessor GetImageAccessor()
		{
			return this.SetSamplerState(0, SamplerStateGetImageAccessorAt(0);
		}

		public Type_ImageAccessor ImageAccessor
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetImageAccessorAt(0);
			}
		}

		public void RemoveImageAccessorAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "ImageAccessor", index);
		}

		public void RemoveImageAccessor()
		{
			while (this.SetSamplerState(0, SamplerStateHasImageAccessor()) this.SetSamplerState(0, SamplerStateRemoveImageAccessorAt(0);
		}

		public void AddImageAccessor(Type_ImageAccessor newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "ImageAccessor", newValue);
		}

		public void InsertImageAccessorAt(Type_ImageAccessor newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "ImageAccessor", index, newValue);
		}

		public void ReplaceImageAccessorAt(Type_ImageAccessor newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "ImageAccessor", index, newValue);
		}
		#endregion // ImageAccessor accessor methods

		#region ImageAccessor collection
        public ImageAccessorCollection	MyImageAccessors = new ImageAccessorCollection( );

        public class ImageAccessorCollection: IEnumerable
        {
            Type_QuadTileSet2 parent;
            public Type_QuadTileSet2 Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public ImageAccessorEnumerator GetEnumerator() 
			{
				return new ImageAccessorEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class ImageAccessorEnumerator: IEnumerator 
        {
			int nIndex;
			Type_QuadTileSet2 parent;
			public ImageAccessorEnumerator(Type_QuadTileSet2 par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateImageAccessorCount );
			}
			public Type_ImageAccessor  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetImageAccessorAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // ImageAccessor collection

		#region TileDrawDistanceFactor accessor methods
		public int GetTileDrawDistanceFactorMinCount()
		{
			return 0;
		}

		public int TileDrawDistanceFactorMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetTileDrawDistanceFactorMaxCount()
		{
			return 1;
		}

		public int TileDrawDistanceFactorMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetTileDrawDistanceFactorCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "TileDrawDistanceFactor");
		}

		public int TileDrawDistanceFactorCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "TileDrawDistanceFactor");
			}
		}

		public bool HasTileDrawDistanceFactor()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "TileDrawDistanceFactor");
		}

		public SchemaDecimal GetTileDrawDistanceFactorAt(int index)
		{
			return new SchemaDecimal(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TileDrawDistanceFactor", index)));
		}

		public XmlNode GetStartingTileDrawDistanceFactorCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "TileDrawDistanceFactor" );
		}

		public XmlNode GetAdvancedTileDrawDistanceFactorCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "TileDrawDistanceFactor", curNode );
		}

		public SchemaDecimal GetTileDrawDistanceFactorValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new SchemaDecimal( curNode.SetSamplerState(0, SamplerStateInnerText );
		}


		public SchemaDecimal GetTileDrawDistanceFactor()
		{
			return this.SetSamplerState(0, SamplerStateGetTileDrawDistanceFactorAt(0);
		}

		public SchemaDecimal TileDrawDistanceFactor
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetTileDrawDistanceFactorAt(0);
			}
		}

		public void RemoveTileDrawDistanceFactorAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TileDrawDistanceFactor", index);
		}

		public void RemoveTileDrawDistanceFactor()
		{
			while (this.SetSamplerState(0, SamplerStateHasTileDrawDistanceFactor()) this.SetSamplerState(0, SamplerStateRemoveTileDrawDistanceFactorAt(0);
		}

		public void AddTileDrawDistanceFactor(SchemaDecimal newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "TileDrawDistanceFactor", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertTileDrawDistanceFactorAt(SchemaDecimal newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TileDrawDistanceFactor", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceTileDrawDistanceFactorAt(SchemaDecimal newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TileDrawDistanceFactor", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // TileDrawDistanceFactor accessor methods

		#region TileDrawDistanceFactor collection
        public TileDrawDistanceFactorCollection	MyTileDrawDistanceFactors = new TileDrawDistanceFactorCollection( );

        public class TileDrawDistanceFactorCollection: IEnumerable
        {
            Type_QuadTileSet2 parent;
            public Type_QuadTileSet2 Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public TileDrawDistanceFactorEnumerator GetEnumerator() 
			{
				return new TileDrawDistanceFactorEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class TileDrawDistanceFactorEnumerator: IEnumerator 
        {
			int nIndex;
			Type_QuadTileSet2 parent;
			public TileDrawDistanceFactorEnumerator(Type_QuadTileSet2 par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateTileDrawDistanceFactorCount );
			}
			public SchemaDecimal  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetTileDrawDistanceFactorAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // TileDrawDistanceFactor collection

		#region TileSpreadFactor accessor methods
		public int GetTileSpreadFactorMinCount()
		{
			return 0;
		}

		public int TileSpreadFactorMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetTileSpreadFactorMaxCount()
		{
			return 1;
		}

		public int TileSpreadFactorMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetTileSpreadFactorCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "TileSpreadFactor");
		}

		public int TileSpreadFactorCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "TileSpreadFactor");
			}
		}

		public bool HasTileSpreadFactor()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "TileSpreadFactor");
		}

		public SchemaDecimal GetTileSpreadFactorAt(int index)
		{
			return new SchemaDecimal(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TileSpreadFactor", index)));
		}

		public XmlNode GetStartingTileSpreadFactorCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "TileSpreadFactor" );
		}

		public XmlNode GetAdvancedTileSpreadFactorCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "TileSpreadFactor", curNode );
		}

		public SchemaDecimal GetTileSpreadFactorValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new SchemaDecimal( curNode.SetSamplerState(0, SamplerStateInnerText );
		}


		public SchemaDecimal GetTileSpreadFactor()
		{
			return this.SetSamplerState(0, SamplerStateGetTileSpreadFactorAt(0);
		}

		public SchemaDecimal TileSpreadFactor
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetTileSpreadFactorAt(0);
			}
		}

		public void RemoveTileSpreadFactorAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TileSpreadFactor", index);
		}

		public void RemoveTileSpreadFactor()
		{
			while (this.SetSamplerState(0, SamplerStateHasTileSpreadFactor()) this.SetSamplerState(0, SamplerStateRemoveTileSpreadFactorAt(0);
		}

		public void AddTileSpreadFactor(SchemaDecimal newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "TileSpreadFactor", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertTileSpreadFactorAt(SchemaDecimal newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TileSpreadFactor", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceTileSpreadFactorAt(SchemaDecimal newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TileSpreadFactor", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // TileSpreadFactor accessor methods

		#region TileSpreadFactor collection
        public TileSpreadFactorCollection	MyTileSpreadFactors = new TileSpreadFactorCollection( );

        public class TileSpreadFactorCollection: IEnumerable
        {
            Type_QuadTileSet2 parent;
            public Type_QuadTileSet2 Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public TileSpreadFactorEnumerator GetEnumerator() 
			{
				return new TileSpreadFactorEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class TileSpreadFactorEnumerator: IEnumerator 
        {
			int nIndex;
			Type_QuadTileSet2 parent;
			public TileSpreadFactorEnumerator(Type_QuadTileSet2 par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateTileSpreadFactorCount );
			}
			public SchemaDecimal  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetTileSpreadFactorAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // TileSpreadFactor collection

		#region ExtendedInformation accessor methods
		public int GetExtendedInformationMinCount()
		{
			return 0;
		}

		public int ExtendedInformationMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetExtendedInformationMaxCount()
		{
			return 1;
		}

		public int ExtendedInformationMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetExtendedInformationCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation");
		}

		public int ExtendedInformationCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation");
			}
		}

		public bool HasExtendedInformation()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation");
		}

		public Type_ExtendedInformation GetExtendedInformationAt(int index)
		{
			return new Type_ExtendedInformation(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation", index));
		}

		public XmlNode GetStartingExtendedInformationCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation" );
		}

		public XmlNode GetAdvancedExtendedInformationCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation", curNode );
		}

		public Type_ExtendedInformation GetExtendedInformationValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new Type_ExtendedInformation( curNode );
		}


		public Type_ExtendedInformation GetExtendedInformation()
		{
			return this.SetSamplerState(0, SamplerStateGetExtendedInformationAt(0);
		}

		public Type_ExtendedInformation ExtendedInformation
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetExtendedInformationAt(0);
			}
		}

		public void RemoveExtendedInformationAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation", index);
		}

		public void RemoveExtendedInformation()
		{
			while (this.SetSamplerState(0, SamplerStateHasExtendedInformation()) this.SetSamplerState(0, SamplerStateRemoveExtendedInformationAt(0);
		}

		public void AddExtendedInformation(Type_ExtendedInformation newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "ExtendedInformation", newValue);
		}

		public void InsertExtendedInformationAt(Type_ExtendedInformation newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "ExtendedInformation", index, newValue);
		}

		public void ReplaceExtendedInformationAt(Type_ExtendedInformation newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "ExtendedInformation", index, newValue);
		}
		#endregion // ExtendedInformation accessor methods

		#region ExtendedInformation collection
        public ExtendedInformationCollection	MyExtendedInformations = new ExtendedInformationCollection( );

        public class ExtendedInformationCollection: IEnumerable
        {
            Type_QuadTileSet2 parent;
            public Type_QuadTileSet2 Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public ExtendedInformationEnumerator GetEnumerator() 
			{
				return new ExtendedInformationEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class ExtendedInformationEnumerator: IEnumerator 
        {
			int nIndex;
			Type_QuadTileSet2 parent;
			public ExtendedInformationEnumerator(Type_QuadTileSet2 par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateExtendedInformationCount );
			}
			public Type_ExtendedInformation  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetExtendedInformationAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // ExtendedInformation collection

		#region TransparentColor accessor methods
		public int GetTransparentColorMinCount()
		{
			return 0;
		}

		public int TransparentColorMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetTransparentColorMaxCount()
		{
			return 1;
		}

		public int TransparentColorMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetTransparentColorCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "TransparentColor");
		}

		public int TransparentColorCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "TransparentColor");
			}
		}

		public bool HasTransparentColor()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "TransparentColor");
		}

		public Type_RGBColor2 GetTransparentColorAt(int index)
		{
			return new Type_RGBColor2(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TransparentColor", index));
		}

		public XmlNode GetStartingTransparentColorCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "TransparentColor" );
		}

		public XmlNode GetAdvancedTransparentColorCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "TransparentColor", curNode );
		}

		public Type_RGBColor2 GetTransparentColorValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new Type_RGBColor2( curNode );
		}


		public Type_RGBColor2 GetTransparentColor()
		{
			return this.SetSamplerState(0, SamplerStateGetTransparentColorAt(0);
		}

		public Type_RGBColor2 TransparentColor
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetTransparentColorAt(0);
			}
		}

		public void RemoveTransparentColorAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TransparentColor", index);
		}

		public void RemoveTransparentColor()
		{
			while (this.SetSamplerState(0, SamplerStateHasTransparentColor()) this.SetSamplerState(0, SamplerStateRemoveTransparentColorAt(0);
		}

		public void AddTransparentColor(Type_RGBColor2 newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "TransparentColor", newValue);
		}

		public void InsertTransparentColorAt(Type_RGBColor2 newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "TransparentColor", index, newValue);
		}

		public void ReplaceTransparentColorAt(Type_RGBColor2 newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "TransparentColor", index, newValue);
		}
		#endregion // TransparentColor accessor methods

		#region TransparentColor collection
        public TransparentColorCollection	MyTransparentColors = new TransparentColorCollection( );

        public class TransparentColorCollection: IEnumerable
        {
            Type_QuadTileSet2 parent;
            public Type_QuadTileSet2 Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public TransparentColorEnumerator GetEnumerator() 
			{
				return new TransparentColorEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class TransparentColorEnumerator: IEnumerator 
        {
			int nIndex;
			Type_QuadTileSet2 parent;
			public TransparentColorEnumerator(Type_QuadTileSet2 par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateTransparentColorCount );
			}
			public Type_RGBColor2  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetTransparentColorAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // TransparentColor collection

        private void SetCollectionParents()
        {
            this.SetSamplerState(0, SamplerStateMyShowAtStartups.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyNames.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyDistanceAboveSurfaces.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyBoundingBoxs.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyTerrainMappeds.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyImageAccessors.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyTileDrawDistanceFactors.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyTileSpreadFactors.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyExtendedInformations.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyTransparentColors.SetSamplerState(0, SamplerStateParent = this; 
	}
}
}
