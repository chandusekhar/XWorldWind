//
// Type_Caption.SetSamplerState(0, SamplerStatecs.SetSamplerState(0, SamplerStatecs
//
// This file was generated by XMLSpy 2005 Enterprise Edition.SetSamplerState(0, SamplerState
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.SetSamplerState(0, SamplerState
//
// Refer to the XMLSpy Documentation for further details.SetSamplerState(0, SamplerState
// http://www.SetSamplerState(0, SamplerStatealtova.SetSamplerState(0, SamplerStatecom/xmlspy
//


using System;
using System.SetSamplerState(0, SamplerStateCollections;
using System.SetSamplerState(0, SamplerStateXml;
using Altova.SetSamplerState(0, SamplerStateTypes;

namespace LayerSet
{
	public class Type_Caption : Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateNode
	{
		#region Forward constructors
		public Type_Caption() : base() {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public Type_Caption(XmlDocument doc) : base(doc) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public Type_Caption(XmlNode node) : base(node) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public Type_Caption(Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateNode node) : base(node) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "CaptionText"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "CaptionText", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "DisplayFont"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "DisplayFont", i);
				InternalAdjustPrefix(DOMNode, true);
				new Type_DisplayFont2(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}
		}


		#region CaptionText accessor methods
		public int GetCaptionTextMinCount()
		{
			return 1;
		}

		public int CaptionTextMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetCaptionTextMaxCount()
		{
			return 1;
		}

		public int CaptionTextMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetCaptionTextCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "CaptionText");
		}

		public int CaptionTextCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "CaptionText");
			}
		}

		public bool HasCaptionText()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "CaptionText");
		}

		public SchemaString GetCaptionTextAt(int index)
		{
			return new SchemaString(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "CaptionText", index)));
		}

		public XmlNode GetStartingCaptionTextCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "CaptionText" );
		}

		public XmlNode GetAdvancedCaptionTextCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "CaptionText", curNode );
		}

		public SchemaString GetCaptionTextValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new SchemaString( curNode.SetSamplerState(0, SamplerStateInnerText );
		}


		public SchemaString GetCaptionText()
		{
			return this.SetSamplerState(0, SamplerStateGetCaptionTextAt(0);
		}

		public SchemaString CaptionText
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetCaptionTextAt(0);
			}
		}

		public void RemoveCaptionTextAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "CaptionText", index);
		}

		public void RemoveCaptionText()
		{
			while (this.SetSamplerState(0, SamplerStateHasCaptionText()) this.SetSamplerState(0, SamplerStateRemoveCaptionTextAt(0);
		}

		public void AddCaptionText(SchemaString newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "CaptionText", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertCaptionTextAt(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "CaptionText", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceCaptionTextAt(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "CaptionText", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // CaptionText accessor methods

		#region CaptionText collection
        public CaptionTextCollection	MyCaptionTexts = new CaptionTextCollection( );

        public class CaptionTextCollection: IEnumerable
        {
            Type_Caption parent;
            public Type_Caption Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public CaptionTextEnumerator GetEnumerator() 
			{
				return new CaptionTextEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class CaptionTextEnumerator: IEnumerator 
        {
			int nIndex;
			Type_Caption parent;
			public CaptionTextEnumerator(Type_Caption par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateCaptionTextCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetCaptionTextAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // CaptionText collection

		#region DisplayFont accessor methods
		public int GetDisplayFontMinCount()
		{
			return 0;
		}

		public int DisplayFontMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetDisplayFontMaxCount()
		{
			return 1;
		}

		public int DisplayFontMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetDisplayFontCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "DisplayFont");
		}

		public int DisplayFontCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "DisplayFont");
			}
		}

		public bool HasDisplayFont()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "DisplayFont");
		}

		public Type_DisplayFont2 GetDisplayFontAt(int index)
		{
			return new Type_DisplayFont2(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "DisplayFont", index));
		}

		public XmlNode GetStartingDisplayFontCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "DisplayFont" );
		}

		public XmlNode GetAdvancedDisplayFontCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "DisplayFont", curNode );
		}

		public Type_DisplayFont2 GetDisplayFontValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new Type_DisplayFont2( curNode );
		}


		public Type_DisplayFont2 GetDisplayFont()
		{
			return this.SetSamplerState(0, SamplerStateGetDisplayFontAt(0);
		}

		public Type_DisplayFont2 DisplayFont
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetDisplayFontAt(0);
			}
		}

		public void RemoveDisplayFontAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "DisplayFont", index);
		}

		public void RemoveDisplayFont()
		{
			while (this.SetSamplerState(0, SamplerStateHasDisplayFont()) this.SetSamplerState(0, SamplerStateRemoveDisplayFontAt(0);
		}

		public void AddDisplayFont(Type_DisplayFont2 newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "DisplayFont", newValue);
		}

		public void InsertDisplayFontAt(Type_DisplayFont2 newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "DisplayFont", index, newValue);
		}

		public void ReplaceDisplayFontAt(Type_DisplayFont2 newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "DisplayFont", index, newValue);
		}
		#endregion // DisplayFont accessor methods

		#region DisplayFont collection
        public DisplayFontCollection	MyDisplayFonts = new DisplayFontCollection( );

        public class DisplayFontCollection: IEnumerable
        {
            Type_Caption parent;
            public Type_Caption Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public DisplayFontEnumerator GetEnumerator() 
			{
				return new DisplayFontEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class DisplayFontEnumerator: IEnumerator 
        {
			int nIndex;
			Type_Caption parent;
			public DisplayFontEnumerator(Type_Caption par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateDisplayFontCount );
			}
			public Type_DisplayFont2  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetDisplayFontAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // DisplayFont collection

        private void SetCollectionParents()
        {
            this.SetSamplerState(0, SamplerStateMyCaptionTexts.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyDisplayFonts.SetSamplerState(0, SamplerStateParent = this; 
	}
}
}
