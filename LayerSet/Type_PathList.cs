//
// Type_PathList.SetSamplerState(0, SamplerStatecs.SetSamplerState(0, SamplerStatecs
//
// This file was generated by XMLSpy 2005 Enterprise Edition.SetSamplerState(0, SamplerState
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.SetSamplerState(0, SamplerState
//
// Refer to the XMLSpy Documentation for further details.SetSamplerState(0, SamplerState
// http://www.SetSamplerState(0, SamplerStatealtova.SetSamplerState(0, SamplerStatecom/xmlspy
//


using System;
using System.SetSamplerState(0, SamplerStateCollections;
using System.SetSamplerState(0, SamplerStateXml;
using Altova.SetSamplerState(0, SamplerStateTypes;

namespace LayerSet
{
	public class Type_PathList : Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateNode
	{
		#region Forward constructors
		public Type_PathList() : base() {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public Type_PathList(XmlDocument doc) : base(doc) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public Type_PathList(XmlNode node) : base(node) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public Type_PathList(Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateNode node) : base(node) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Name"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Name", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "MinDisplayAltitude"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "MinDisplayAltitude", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "MaxDisplayAltitude"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "MaxDisplayAltitude", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "PathsDirectory"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "PathsDirectory", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "RGBColor"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "RGBColor", i);
				InternalAdjustPrefix(DOMNode, true);
				new Type_RGBColor2(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "WinColorName"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "WinColorName", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation", i);
				InternalAdjustPrefix(DOMNode, true);
				new Type_ExtendedInformation(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}
		}


		#region ShowAtStartup accessor methods
		public int GetShowAtStartupMinCount()
		{
			return 1;
		}

		public int ShowAtStartupMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetShowAtStartupMaxCount()
		{
			return 1;
		}

		public int ShowAtStartupMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetShowAtStartupCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup");
		}

		public int ShowAtStartupCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup");
			}
		}

		public bool HasShowAtStartup()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup");
		}

		public SchemaBoolean GetShowAtStartupAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup", index)));
		}

		public XmlNode GetStartingShowAtStartupCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup" );
		}

		public XmlNode GetAdvancedShowAtStartupCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup", curNode );
		}

		public SchemaBoolean GetShowAtStartupValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new SchemaBoolean( curNode.SetSamplerState(0, SamplerStateValue );
		}


		public SchemaBoolean GetShowAtStartup()
		{
			return this.SetSamplerState(0, SamplerStateGetShowAtStartupAt(0);
		}

		public SchemaBoolean ShowAtStartup
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetShowAtStartupAt(0);
			}
		}

		public void RemoveShowAtStartupAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup", index);
		}

		public void RemoveShowAtStartup()
		{
			while (this.SetSamplerState(0, SamplerStateHasShowAtStartup()) this.SetSamplerState(0, SamplerStateRemoveShowAtStartupAt(0);
		}

		public void AddShowAtStartup(SchemaBoolean newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertShowAtStartupAt(SchemaBoolean newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceShowAtStartupAt(SchemaBoolean newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // ShowAtStartup accessor methods

		#region ShowAtStartup collection
        public ShowAtStartupCollection	MyShowAtStartups = new ShowAtStartupCollection( );

        public class ShowAtStartupCollection: IEnumerable
        {
            Type_PathList parent;
            public Type_PathList Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public ShowAtStartupEnumerator GetEnumerator() 
			{
				return new ShowAtStartupEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class ShowAtStartupEnumerator: IEnumerator 
        {
			int nIndex;
			Type_PathList parent;
			public ShowAtStartupEnumerator(Type_PathList par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateShowAtStartupCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetShowAtStartupAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // ShowAtStartup collection

		#region Name accessor methods
		public int GetNameMinCount()
		{
			return 1;
		}

		public int NameMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNameMaxCount()
		{
			return 1;
		}

		public int NameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNameCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Name");
		}

		public int NameCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Name");
			}
		}

		public bool HasName()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "Name");
		}

		public SchemaString GetNameAt(int index)
		{
			return new SchemaString(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Name", index)));
		}

		public XmlNode GetStartingNameCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "Name" );
		}

		public XmlNode GetAdvancedNameCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "Name", curNode );
		}

		public SchemaString GetNameValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new SchemaString( curNode.SetSamplerState(0, SamplerStateInnerText );
		}


		public SchemaString GetName()
		{
			return this.SetSamplerState(0, SamplerStateGetNameAt(0);
		}

		public SchemaString Name
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetNameAt(0);
			}
		}

		public void RemoveNameAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Name", index);
		}

		public void RemoveName()
		{
			while (this.SetSamplerState(0, SamplerStateHasName()) this.SetSamplerState(0, SamplerStateRemoveNameAt(0);
		}

		public void AddName(SchemaString newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "Name", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertNameAt(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Name", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceNameAt(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Name", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // Name accessor methods

		#region Name collection
        public NameCollection	MyNames = new NameCollection( );

        public class NameCollection: IEnumerable
        {
            Type_PathList parent;
            public Type_PathList Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public NameEnumerator GetEnumerator() 
			{
				return new NameEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class NameEnumerator: IEnumerator 
        {
			int nIndex;
			Type_PathList parent;
			public NameEnumerator(Type_PathList par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateNameCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetNameAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // Name collection

		#region DistanceAboveSurface accessor methods
		public int GetDistanceAboveSurfaceMinCount()
		{
			return 1;
		}

		public int DistanceAboveSurfaceMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetDistanceAboveSurfaceMaxCount()
		{
			return 1;
		}

		public int DistanceAboveSurfaceMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetDistanceAboveSurfaceCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface");
		}

		public int DistanceAboveSurfaceCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface");
			}
		}

		public bool HasDistanceAboveSurface()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface");
		}

		public SchemaDecimal GetDistanceAboveSurfaceAt(int index)
		{
			return new SchemaDecimal(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface", index)));
		}

		public XmlNode GetStartingDistanceAboveSurfaceCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface" );
		}

		public XmlNode GetAdvancedDistanceAboveSurfaceCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface", curNode );
		}

		public SchemaDecimal GetDistanceAboveSurfaceValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new SchemaDecimal( curNode.SetSamplerState(0, SamplerStateInnerText );
		}


		public SchemaDecimal GetDistanceAboveSurface()
		{
			return this.SetSamplerState(0, SamplerStateGetDistanceAboveSurfaceAt(0);
		}

		public SchemaDecimal DistanceAboveSurface
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetDistanceAboveSurfaceAt(0);
			}
		}

		public void RemoveDistanceAboveSurfaceAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface", index);
		}

		public void RemoveDistanceAboveSurface()
		{
			while (this.SetSamplerState(0, SamplerStateHasDistanceAboveSurface()) this.SetSamplerState(0, SamplerStateRemoveDistanceAboveSurfaceAt(0);
		}

		public void AddDistanceAboveSurface(SchemaDecimal newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertDistanceAboveSurfaceAt(SchemaDecimal newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceDistanceAboveSurfaceAt(SchemaDecimal newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "DistanceAboveSurface", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // DistanceAboveSurface accessor methods

		#region DistanceAboveSurface collection
        public DistanceAboveSurfaceCollection	MyDistanceAboveSurfaces = new DistanceAboveSurfaceCollection( );

        public class DistanceAboveSurfaceCollection: IEnumerable
        {
            Type_PathList parent;
            public Type_PathList Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public DistanceAboveSurfaceEnumerator GetEnumerator() 
			{
				return new DistanceAboveSurfaceEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class DistanceAboveSurfaceEnumerator: IEnumerator 
        {
			int nIndex;
			Type_PathList parent;
			public DistanceAboveSurfaceEnumerator(Type_PathList par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateDistanceAboveSurfaceCount );
			}
			public SchemaDecimal  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetDistanceAboveSurfaceAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // DistanceAboveSurface collection

		#region MinDisplayAltitude accessor methods
		public int GetMinDisplayAltitudeMinCount()
		{
			return 1;
		}

		public int MinDisplayAltitudeMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetMinDisplayAltitudeMaxCount()
		{
			return 1;
		}

		public int MinDisplayAltitudeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetMinDisplayAltitudeCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "MinDisplayAltitude");
		}

		public int MinDisplayAltitudeCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "MinDisplayAltitude");
			}
		}

		public bool HasMinDisplayAltitude()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "MinDisplayAltitude");
		}

		public MinDisplayAltitudeType GetMinDisplayAltitudeAt(int index)
		{
			return new MinDisplayAltitudeType(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "MinDisplayAltitude", index)));
		}

		public XmlNode GetStartingMinDisplayAltitudeCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "MinDisplayAltitude" );
		}

		public XmlNode GetAdvancedMinDisplayAltitudeCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "MinDisplayAltitude", curNode );
		}

		public MinDisplayAltitudeType GetMinDisplayAltitudeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new MinDisplayAltitudeType( curNode.SetSamplerState(0, SamplerStateInnerText );
		}


		public MinDisplayAltitudeType GetMinDisplayAltitude()
		{
			return this.SetSamplerState(0, SamplerStateGetMinDisplayAltitudeAt(0);
		}

		public MinDisplayAltitudeType MinDisplayAltitude
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetMinDisplayAltitudeAt(0);
			}
		}

		public void RemoveMinDisplayAltitudeAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "MinDisplayAltitude", index);
		}

		public void RemoveMinDisplayAltitude()
		{
			while (this.SetSamplerState(0, SamplerStateHasMinDisplayAltitude()) this.SetSamplerState(0, SamplerStateRemoveMinDisplayAltitudeAt(0);
		}

		public void AddMinDisplayAltitude(MinDisplayAltitudeType newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "MinDisplayAltitude", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertMinDisplayAltitudeAt(MinDisplayAltitudeType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "MinDisplayAltitude", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceMinDisplayAltitudeAt(MinDisplayAltitudeType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "MinDisplayAltitude", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // MinDisplayAltitude accessor methods

		#region MinDisplayAltitude collection
        public MinDisplayAltitudeCollection	MyMinDisplayAltitudes = new MinDisplayAltitudeCollection( );

        public class MinDisplayAltitudeCollection: IEnumerable
        {
            Type_PathList parent;
            public Type_PathList Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public MinDisplayAltitudeEnumerator GetEnumerator() 
			{
				return new MinDisplayAltitudeEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class MinDisplayAltitudeEnumerator: IEnumerator 
        {
			int nIndex;
			Type_PathList parent;
			public MinDisplayAltitudeEnumerator(Type_PathList par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateMinDisplayAltitudeCount );
			}
			public MinDisplayAltitudeType  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetMinDisplayAltitudeAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // MinDisplayAltitude collection

		#region MaxDisplayAltitude accessor methods
		public int GetMaxDisplayAltitudeMinCount()
		{
			return 1;
		}

		public int MaxDisplayAltitudeMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetMaxDisplayAltitudeMaxCount()
		{
			return 1;
		}

		public int MaxDisplayAltitudeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetMaxDisplayAltitudeCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "MaxDisplayAltitude");
		}

		public int MaxDisplayAltitudeCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "MaxDisplayAltitude");
			}
		}

		public bool HasMaxDisplayAltitude()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "MaxDisplayAltitude");
		}

		public MaxDisplayAltitudeType GetMaxDisplayAltitudeAt(int index)
		{
			return new MaxDisplayAltitudeType(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "MaxDisplayAltitude", index)));
		}

		public XmlNode GetStartingMaxDisplayAltitudeCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "MaxDisplayAltitude" );
		}

		public XmlNode GetAdvancedMaxDisplayAltitudeCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "MaxDisplayAltitude", curNode );
		}

		public MaxDisplayAltitudeType GetMaxDisplayAltitudeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new MaxDisplayAltitudeType( curNode.SetSamplerState(0, SamplerStateInnerText );
		}


		public MaxDisplayAltitudeType GetMaxDisplayAltitude()
		{
			return this.SetSamplerState(0, SamplerStateGetMaxDisplayAltitudeAt(0);
		}

		public MaxDisplayAltitudeType MaxDisplayAltitude
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetMaxDisplayAltitudeAt(0);
			}
		}

		public void RemoveMaxDisplayAltitudeAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "MaxDisplayAltitude", index);
		}

		public void RemoveMaxDisplayAltitude()
		{
			while (this.SetSamplerState(0, SamplerStateHasMaxDisplayAltitude()) this.SetSamplerState(0, SamplerStateRemoveMaxDisplayAltitudeAt(0);
		}

		public void AddMaxDisplayAltitude(MaxDisplayAltitudeType newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "MaxDisplayAltitude", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertMaxDisplayAltitudeAt(MaxDisplayAltitudeType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "MaxDisplayAltitude", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceMaxDisplayAltitudeAt(MaxDisplayAltitudeType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "MaxDisplayAltitude", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // MaxDisplayAltitude accessor methods

		#region MaxDisplayAltitude collection
        public MaxDisplayAltitudeCollection	MyMaxDisplayAltitudes = new MaxDisplayAltitudeCollection( );

        public class MaxDisplayAltitudeCollection: IEnumerable
        {
            Type_PathList parent;
            public Type_PathList Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public MaxDisplayAltitudeEnumerator GetEnumerator() 
			{
				return new MaxDisplayAltitudeEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class MaxDisplayAltitudeEnumerator: IEnumerator 
        {
			int nIndex;
			Type_PathList parent;
			public MaxDisplayAltitudeEnumerator(Type_PathList par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateMaxDisplayAltitudeCount );
			}
			public MaxDisplayAltitudeType  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetMaxDisplayAltitudeAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // MaxDisplayAltitude collection

		#region PathsDirectory accessor methods
		public int GetPathsDirectoryMinCount()
		{
			return 1;
		}

		public int PathsDirectoryMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetPathsDirectoryMaxCount()
		{
			return 1;
		}

		public int PathsDirectoryMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetPathsDirectoryCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "PathsDirectory");
		}

		public int PathsDirectoryCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "PathsDirectory");
			}
		}

		public bool HasPathsDirectory()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "PathsDirectory");
		}

		public SchemaString GetPathsDirectoryAt(int index)
		{
			return new SchemaString(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "PathsDirectory", index)));
		}

		public XmlNode GetStartingPathsDirectoryCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "PathsDirectory" );
		}

		public XmlNode GetAdvancedPathsDirectoryCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "PathsDirectory", curNode );
		}

		public SchemaString GetPathsDirectoryValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new SchemaString( curNode.SetSamplerState(0, SamplerStateInnerText );
		}


		public SchemaString GetPathsDirectory()
		{
			return this.SetSamplerState(0, SamplerStateGetPathsDirectoryAt(0);
		}

		public SchemaString PathsDirectory
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetPathsDirectoryAt(0);
			}
		}

		public void RemovePathsDirectoryAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "PathsDirectory", index);
		}

		public void RemovePathsDirectory()
		{
			while (this.SetSamplerState(0, SamplerStateHasPathsDirectory()) this.SetSamplerState(0, SamplerStateRemovePathsDirectoryAt(0);
		}

		public void AddPathsDirectory(SchemaString newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "PathsDirectory", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertPathsDirectoryAt(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "PathsDirectory", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplacePathsDirectoryAt(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "PathsDirectory", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // PathsDirectory accessor methods

		#region PathsDirectory collection
        public PathsDirectoryCollection	MyPathsDirectorys = new PathsDirectoryCollection( );

        public class PathsDirectoryCollection: IEnumerable
        {
            Type_PathList parent;
            public Type_PathList Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public PathsDirectoryEnumerator GetEnumerator() 
			{
				return new PathsDirectoryEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class PathsDirectoryEnumerator: IEnumerator 
        {
			int nIndex;
			Type_PathList parent;
			public PathsDirectoryEnumerator(Type_PathList par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStatePathsDirectoryCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetPathsDirectoryAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // PathsDirectory collection

		#region RGBColor accessor methods
		public int GetRGBColorMinCount()
		{
			return 0;
		}

		public int RGBColorMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetRGBColorMaxCount()
		{
			return 1;
		}

		public int RGBColorMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetRGBColorCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "RGBColor");
		}

		public int RGBColorCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "RGBColor");
			}
		}

		public bool HasRGBColor()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "RGBColor");
		}

		public Type_RGBColor2 GetRGBColorAt(int index)
		{
			return new Type_RGBColor2(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "RGBColor", index));
		}

		public XmlNode GetStartingRGBColorCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "RGBColor" );
		}

		public XmlNode GetAdvancedRGBColorCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "RGBColor", curNode );
		}

		public Type_RGBColor2 GetRGBColorValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new Type_RGBColor2( curNode );
		}


		public Type_RGBColor2 GetRGBColor()
		{
			return this.SetSamplerState(0, SamplerStateGetRGBColorAt(0);
		}

		public Type_RGBColor2 RGBColor
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetRGBColorAt(0);
			}
		}

		public void RemoveRGBColorAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "RGBColor", index);
		}

		public void RemoveRGBColor()
		{
			while (this.SetSamplerState(0, SamplerStateHasRGBColor()) this.SetSamplerState(0, SamplerStateRemoveRGBColorAt(0);
		}

		public void AddRGBColor(Type_RGBColor2 newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "RGBColor", newValue);
		}

		public void InsertRGBColorAt(Type_RGBColor2 newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "RGBColor", index, newValue);
		}

		public void ReplaceRGBColorAt(Type_RGBColor2 newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "RGBColor", index, newValue);
		}
		#endregion // RGBColor accessor methods

		#region RGBColor collection
        public RGBColorCollection	MyRGBColors = new RGBColorCollection( );

        public class RGBColorCollection: IEnumerable
        {
            Type_PathList parent;
            public Type_PathList Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public RGBColorEnumerator GetEnumerator() 
			{
				return new RGBColorEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class RGBColorEnumerator: IEnumerator 
        {
			int nIndex;
			Type_PathList parent;
			public RGBColorEnumerator(Type_PathList par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateRGBColorCount );
			}
			public Type_RGBColor2  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetRGBColorAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // RGBColor collection

		#region WinColorName accessor methods
		public int GetWinColorNameMinCount()
		{
			return 0;
		}

		public int WinColorNameMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetWinColorNameMaxCount()
		{
			return 1;
		}

		public int WinColorNameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetWinColorNameCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "WinColorName");
		}

		public int WinColorNameCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "WinColorName");
			}
		}

		public bool HasWinColorName()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "WinColorName");
		}

		public SchemaString GetWinColorNameAt(int index)
		{
			return new SchemaString(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "WinColorName", index)));
		}

		public XmlNode GetStartingWinColorNameCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "WinColorName" );
		}

		public XmlNode GetAdvancedWinColorNameCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "WinColorName", curNode );
		}

		public SchemaString GetWinColorNameValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new SchemaString( curNode.SetSamplerState(0, SamplerStateInnerText );
		}


		public SchemaString GetWinColorName()
		{
			return this.SetSamplerState(0, SamplerStateGetWinColorNameAt(0);
		}

		public SchemaString WinColorName
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetWinColorNameAt(0);
			}
		}

		public void RemoveWinColorNameAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "WinColorName", index);
		}

		public void RemoveWinColorName()
		{
			while (this.SetSamplerState(0, SamplerStateHasWinColorName()) this.SetSamplerState(0, SamplerStateRemoveWinColorNameAt(0);
		}

		public void AddWinColorName(SchemaString newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "WinColorName", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertWinColorNameAt(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "WinColorName", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceWinColorNameAt(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "WinColorName", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // WinColorName accessor methods

		#region WinColorName collection
        public WinColorNameCollection	MyWinColorNames = new WinColorNameCollection( );

        public class WinColorNameCollection: IEnumerable
        {
            Type_PathList parent;
            public Type_PathList Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public WinColorNameEnumerator GetEnumerator() 
			{
				return new WinColorNameEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class WinColorNameEnumerator: IEnumerator 
        {
			int nIndex;
			Type_PathList parent;
			public WinColorNameEnumerator(Type_PathList par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateWinColorNameCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetWinColorNameAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // WinColorName collection

		#region ExtendedInformation accessor methods
		public int GetExtendedInformationMinCount()
		{
			return 0;
		}

		public int ExtendedInformationMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetExtendedInformationMaxCount()
		{
			return 1;
		}

		public int ExtendedInformationMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetExtendedInformationCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation");
		}

		public int ExtendedInformationCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation");
			}
		}

		public bool HasExtendedInformation()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation");
		}

		public Type_ExtendedInformation GetExtendedInformationAt(int index)
		{
			return new Type_ExtendedInformation(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation", index));
		}

		public XmlNode GetStartingExtendedInformationCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation" );
		}

		public XmlNode GetAdvancedExtendedInformationCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation", curNode );
		}

		public Type_ExtendedInformation GetExtendedInformationValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new Type_ExtendedInformation( curNode );
		}


		public Type_ExtendedInformation GetExtendedInformation()
		{
			return this.SetSamplerState(0, SamplerStateGetExtendedInformationAt(0);
		}

		public Type_ExtendedInformation ExtendedInformation
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetExtendedInformationAt(0);
			}
		}

		public void RemoveExtendedInformationAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation", index);
		}

		public void RemoveExtendedInformation()
		{
			while (this.SetSamplerState(0, SamplerStateHasExtendedInformation()) this.SetSamplerState(0, SamplerStateRemoveExtendedInformationAt(0);
		}

		public void AddExtendedInformation(Type_ExtendedInformation newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "ExtendedInformation", newValue);
		}

		public void InsertExtendedInformationAt(Type_ExtendedInformation newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "ExtendedInformation", index, newValue);
		}

		public void ReplaceExtendedInformationAt(Type_ExtendedInformation newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "ExtendedInformation", index, newValue);
		}
		#endregion // ExtendedInformation accessor methods

		#region ExtendedInformation collection
        public ExtendedInformationCollection	MyExtendedInformations = new ExtendedInformationCollection( );

        public class ExtendedInformationCollection: IEnumerable
        {
            Type_PathList parent;
            public Type_PathList Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public ExtendedInformationEnumerator GetEnumerator() 
			{
				return new ExtendedInformationEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class ExtendedInformationEnumerator: IEnumerator 
        {
			int nIndex;
			Type_PathList parent;
			public ExtendedInformationEnumerator(Type_PathList par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateExtendedInformationCount );
			}
			public Type_ExtendedInformation  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetExtendedInformationAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // ExtendedInformation collection

        private void SetCollectionParents()
        {
            this.SetSamplerState(0, SamplerStateMyShowAtStartups.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyNames.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyDistanceAboveSurfaces.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyMinDisplayAltitudes.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyMaxDisplayAltitudes.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyPathsDirectorys.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyRGBColors.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyWinColorNames.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyExtendedInformations.SetSamplerState(0, SamplerStateParent = this; 
	}
}
}
