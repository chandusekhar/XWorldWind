//
// Type_RGBColor.SetSamplerState(0, SamplerStatecs.SetSamplerState(0, SamplerStatecs
//
// This file was generated by XMLSpy 2005 Enterprise Edition.SetSamplerState(0, SamplerState
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.SetSamplerState(0, SamplerState
//
// Refer to the XMLSpy Documentation for further details.SetSamplerState(0, SamplerState
// http://www.SetSamplerState(0, SamplerStatealtova.SetSamplerState(0, SamplerStatecom/xmlspy
//


using System;
using System.SetSamplerState(0, SamplerStateCollections;
using System.SetSamplerState(0, SamplerStateXml;
using Altova.SetSamplerState(0, SamplerStateTypes;

namespace LayerSet
{
	public class Type_RGBColor : Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateNode
	{
		#region Forward constructors
		public Type_RGBColor() : base() {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public Type_RGBColor(XmlDocument doc) : base(doc) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public Type_RGBColor(XmlNode node) : base(node) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public Type_RGBColor(Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateNode node) : base(node) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Red"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Red", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Green"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Green", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Blue"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Blue", i);
				InternalAdjustPrefix(DOMNode, true);
			}
		}


		#region Red accessor methods
		public int GetRedMinCount()
		{
			return 1;
		}

		public int RedMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetRedMaxCount()
		{
			return 1;
		}

		public int RedMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetRedCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Red");
		}

		public int RedCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Red");
			}
		}

		public bool HasRed()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "Red");
		}

		public RedType GetRedAt(int index)
		{
			return new RedType(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Red", index)));
		}

		public XmlNode GetStartingRedCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "Red" );
		}

		public XmlNode GetAdvancedRedCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "Red", curNode );
		}

		public RedType GetRedValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new RedType( curNode.SetSamplerState(0, SamplerStateInnerText );
		}


		public RedType GetRed()
		{
			return this.SetSamplerState(0, SamplerStateGetRedAt(0);
		}

		public RedType Red
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetRedAt(0);
			}
		}

		public void RemoveRedAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Red", index);
		}

		public void RemoveRed()
		{
			while (this.SetSamplerState(0, SamplerStateHasRed()) this.SetSamplerState(0, SamplerStateRemoveRedAt(0);
		}

		public void AddRed(RedType newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "Red", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertRedAt(RedType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Red", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceRedAt(RedType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Red", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // Red accessor methods

		#region Red collection
        public RedCollection	MyReds = new RedCollection( );

        public class RedCollection: IEnumerable
        {
            Type_RGBColor parent;
            public Type_RGBColor Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public RedEnumerator GetEnumerator() 
			{
				return new RedEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class RedEnumerator: IEnumerator 
        {
			int nIndex;
			Type_RGBColor parent;
			public RedEnumerator(Type_RGBColor par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateRedCount );
			}
			public RedType  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetRedAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // Red collection

		#region Green accessor methods
		public int GetGreenMinCount()
		{
			return 1;
		}

		public int GreenMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetGreenMaxCount()
		{
			return 1;
		}

		public int GreenMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetGreenCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Green");
		}

		public int GreenCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Green");
			}
		}

		public bool HasGreen()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "Green");
		}

		public GreenType GetGreenAt(int index)
		{
			return new GreenType(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Green", index)));
		}

		public XmlNode GetStartingGreenCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "Green" );
		}

		public XmlNode GetAdvancedGreenCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "Green", curNode );
		}

		public GreenType GetGreenValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new GreenType( curNode.SetSamplerState(0, SamplerStateInnerText );
		}


		public GreenType GetGreen()
		{
			return this.SetSamplerState(0, SamplerStateGetGreenAt(0);
		}

		public GreenType Green
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetGreenAt(0);
			}
		}

		public void RemoveGreenAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Green", index);
		}

		public void RemoveGreen()
		{
			while (this.SetSamplerState(0, SamplerStateHasGreen()) this.SetSamplerState(0, SamplerStateRemoveGreenAt(0);
		}

		public void AddGreen(GreenType newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "Green", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertGreenAt(GreenType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Green", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceGreenAt(GreenType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Green", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // Green accessor methods

		#region Green collection
        public GreenCollection	MyGreens = new GreenCollection( );

        public class GreenCollection: IEnumerable
        {
            Type_RGBColor parent;
            public Type_RGBColor Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public GreenEnumerator GetEnumerator() 
			{
				return new GreenEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class GreenEnumerator: IEnumerator 
        {
			int nIndex;
			Type_RGBColor parent;
			public GreenEnumerator(Type_RGBColor par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGreenCount );
			}
			public GreenType  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetGreenAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // Green collection

		#region Blue accessor methods
		public int GetBlueMinCount()
		{
			return 1;
		}

		public int BlueMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetBlueMaxCount()
		{
			return 1;
		}

		public int BlueMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetBlueCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Blue");
		}

		public int BlueCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Blue");
			}
		}

		public bool HasBlue()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "Blue");
		}

		public BlueType GetBlueAt(int index)
		{
			return new BlueType(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Blue", index)));
		}

		public XmlNode GetStartingBlueCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "Blue" );
		}

		public XmlNode GetAdvancedBlueCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "Blue", curNode );
		}

		public BlueType GetBlueValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new BlueType( curNode.SetSamplerState(0, SamplerStateInnerText );
		}


		public BlueType GetBlue()
		{
			return this.SetSamplerState(0, SamplerStateGetBlueAt(0);
		}

		public BlueType Blue
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetBlueAt(0);
			}
		}

		public void RemoveBlueAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Blue", index);
		}

		public void RemoveBlue()
		{
			while (this.SetSamplerState(0, SamplerStateHasBlue()) this.SetSamplerState(0, SamplerStateRemoveBlueAt(0);
		}

		public void AddBlue(BlueType newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "Blue", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertBlueAt(BlueType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Blue", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceBlueAt(BlueType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Blue", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // Blue accessor methods

		#region Blue collection
        public BlueCollection	MyBlues = new BlueCollection( );

        public class BlueCollection: IEnumerable
        {
            Type_RGBColor parent;
            public Type_RGBColor Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public BlueEnumerator GetEnumerator() 
			{
				return new BlueEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class BlueEnumerator: IEnumerator 
        {
			int nIndex;
			Type_RGBColor parent;
			public BlueEnumerator(Type_RGBColor par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateBlueCount );
			}
			public BlueType  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetBlueAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // Blue collection

        private void SetCollectionParents()
        {
            this.SetSamplerState(0, SamplerStateMyReds.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyGreens.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyBlues.SetSamplerState(0, SamplerStateParent = this; 
	}
}
}
