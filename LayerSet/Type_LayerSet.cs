//
// Type_LayerSet.SetSamplerState(0, SamplerStatecs.SetSamplerState(0, SamplerStatecs
//
// This file was generated by XMLSpy 2005 Enterprise Edition.SetSamplerState(0, SamplerState
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.SetSamplerState(0, SamplerState
//
// Refer to the XMLSpy Documentation for further details.SetSamplerState(0, SamplerState
// http://www.SetSamplerState(0, SamplerStatealtova.SetSamplerState(0, SamplerStatecom/xmlspy
//


using System;
using System.SetSamplerState(0, SamplerStateCollections;
using System.SetSamplerState(0, SamplerStateXml;
using Altova.SetSamplerState(0, SamplerStateTypes;

namespace LayerSet
{
	public class Type_LayerSet : Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateNode
	{
		#region Forward constructors
		public Type_LayerSet() : base() {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public Type_LayerSet(XmlDocument doc) : base(doc) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public Type_LayerSet(XmlNode node) : base(node) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public Type_LayerSet(Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateNode node) : base(node) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "Name"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "Name", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowOnlyOneLayer"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowOnlyOneLayer", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "ImageLayer"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "ImageLayer", i);
				InternalAdjustPrefix(DOMNode, true);
				new Type_ImageLayer(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "QuadTileSet"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "QuadTileSet", i);
				InternalAdjustPrefix(DOMNode, true);
				new Type_QuadTileSet2(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "ShapeFileLayer"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "ShapeFileLayer", i);
				InternalAdjustPrefix(DOMNode, true);
				new Type_ShapeFileLayer2(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "MeshLayer"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "MeshLayer", i);
				InternalAdjustPrefix(DOMNode, true);
				new Type_MeshLayer2(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "PathList"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "PathList", i);
				InternalAdjustPrefix(DOMNode, true);
				new Type_PathList2(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Icon"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Icon", i);
				InternalAdjustPrefix(DOMNode, true);
				new Type_Icon(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "TiledPlacenameSet"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TiledPlacenameSet", i);
				InternalAdjustPrefix(DOMNode, true);
				new Type_TiledPlacenameSet2(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "ChildLayerSet"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "ChildLayerSet", i);
				InternalAdjustPrefix(DOMNode, true);
				new Type_LayerSet(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation", i);
				InternalAdjustPrefix(DOMNode, true);
				new Type_ExtendedInformation(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}
		}


		#region Name accessor methods
		public int GetNameMinCount()
		{
			return 1;
		}

		public int NameMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNameMaxCount()
		{
			return 1;
		}

		public int NameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNameCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "Name");
		}

		public int NameCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "Name");
			}
		}

		public bool HasName()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "Name");
		}

		public NameType2 GetNameAt(int index)
		{
			return new NameType2(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "Name", index)));
		}

		public XmlNode GetStartingNameCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateAttribute, "", "Name" );
		}

		public XmlNode GetAdvancedNameCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateAttribute, "", "Name", curNode );
		}

		public NameType2 GetNameValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new NameType2( curNode.SetSamplerState(0, SamplerStateValue );
		}


		public NameType2 GetName()
		{
			return this.SetSamplerState(0, SamplerStateGetNameAt(0);
		}

		public NameType2 Name
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetNameAt(0);
			}
		}

		public void RemoveNameAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "Name", index);
		}

		public void RemoveName()
		{
			while (this.SetSamplerState(0, SamplerStateHasName()) this.SetSamplerState(0, SamplerStateRemoveNameAt(0);
		}

		public void AddName(NameType2 newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "Name", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertNameAt(NameType2 newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "Name", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceNameAt(NameType2 newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "Name", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // Name accessor methods

		#region Name collection
        public NameCollection	MyNames = new NameCollection( );

        public class NameCollection: IEnumerable
        {
            Type_LayerSet parent;
            public Type_LayerSet Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public NameEnumerator GetEnumerator() 
			{
				return new NameEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class NameEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LayerSet parent;
			public NameEnumerator(Type_LayerSet par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateNameCount );
			}
			public NameType2  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetNameAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // Name collection

		#region ShowOnlyOneLayer accessor methods
		public int GetShowOnlyOneLayerMinCount()
		{
			return 1;
		}

		public int ShowOnlyOneLayerMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetShowOnlyOneLayerMaxCount()
		{
			return 1;
		}

		public int ShowOnlyOneLayerMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetShowOnlyOneLayerCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowOnlyOneLayer");
		}

		public int ShowOnlyOneLayerCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowOnlyOneLayer");
			}
		}

		public bool HasShowOnlyOneLayer()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowOnlyOneLayer");
		}

		public SchemaBoolean GetShowOnlyOneLayerAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowOnlyOneLayer", index)));
		}

		public XmlNode GetStartingShowOnlyOneLayerCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowOnlyOneLayer" );
		}

		public XmlNode GetAdvancedShowOnlyOneLayerCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowOnlyOneLayer", curNode );
		}

		public SchemaBoolean GetShowOnlyOneLayerValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new SchemaBoolean( curNode.SetSamplerState(0, SamplerStateValue );
		}


		public SchemaBoolean GetShowOnlyOneLayer()
		{
			return this.SetSamplerState(0, SamplerStateGetShowOnlyOneLayerAt(0);
		}

		public SchemaBoolean ShowOnlyOneLayer
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetShowOnlyOneLayerAt(0);
			}
		}

		public void RemoveShowOnlyOneLayerAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowOnlyOneLayer", index);
		}

		public void RemoveShowOnlyOneLayer()
		{
			while (this.SetSamplerState(0, SamplerStateHasShowOnlyOneLayer()) this.SetSamplerState(0, SamplerStateRemoveShowOnlyOneLayerAt(0);
		}

		public void AddShowOnlyOneLayer(SchemaBoolean newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowOnlyOneLayer", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertShowOnlyOneLayerAt(SchemaBoolean newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowOnlyOneLayer", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceShowOnlyOneLayerAt(SchemaBoolean newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowOnlyOneLayer", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // ShowOnlyOneLayer accessor methods

		#region ShowOnlyOneLayer collection
        public ShowOnlyOneLayerCollection	MyShowOnlyOneLayers = new ShowOnlyOneLayerCollection( );

        public class ShowOnlyOneLayerCollection: IEnumerable
        {
            Type_LayerSet parent;
            public Type_LayerSet Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public ShowOnlyOneLayerEnumerator GetEnumerator() 
			{
				return new ShowOnlyOneLayerEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class ShowOnlyOneLayerEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LayerSet parent;
			public ShowOnlyOneLayerEnumerator(Type_LayerSet par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateShowOnlyOneLayerCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetShowOnlyOneLayerAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // ShowOnlyOneLayer collection

		#region ShowAtStartup accessor methods
		public int GetShowAtStartupMinCount()
		{
			return 1;
		}

		public int ShowAtStartupMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetShowAtStartupMaxCount()
		{
			return 1;
		}

		public int ShowAtStartupMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetShowAtStartupCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup");
		}

		public int ShowAtStartupCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup");
			}
		}

		public bool HasShowAtStartup()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup");
		}

		public SchemaBoolean GetShowAtStartupAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup", index)));
		}

		public XmlNode GetStartingShowAtStartupCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup" );
		}

		public XmlNode GetAdvancedShowAtStartupCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup", curNode );
		}

		public SchemaBoolean GetShowAtStartupValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new SchemaBoolean( curNode.SetSamplerState(0, SamplerStateValue );
		}


		public SchemaBoolean GetShowAtStartup()
		{
			return this.SetSamplerState(0, SamplerStateGetShowAtStartupAt(0);
		}

		public SchemaBoolean ShowAtStartup
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetShowAtStartupAt(0);
			}
		}

		public void RemoveShowAtStartupAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup", index);
		}

		public void RemoveShowAtStartup()
		{
			while (this.SetSamplerState(0, SamplerStateHasShowAtStartup()) this.SetSamplerState(0, SamplerStateRemoveShowAtStartupAt(0);
		}

		public void AddShowAtStartup(SchemaBoolean newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertShowAtStartupAt(SchemaBoolean newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceShowAtStartupAt(SchemaBoolean newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "ShowAtStartup", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // ShowAtStartup accessor methods

		#region ShowAtStartup collection
        public ShowAtStartupCollection	MyShowAtStartups = new ShowAtStartupCollection( );

        public class ShowAtStartupCollection: IEnumerable
        {
            Type_LayerSet parent;
            public Type_LayerSet Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public ShowAtStartupEnumerator GetEnumerator() 
			{
				return new ShowAtStartupEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class ShowAtStartupEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LayerSet parent;
			public ShowAtStartupEnumerator(Type_LayerSet par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateShowAtStartupCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetShowAtStartupAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // ShowAtStartup collection

		#region ImageLayer accessor methods
		public int GetImageLayerMinCount()
		{
			return 0;
		}

		public int ImageLayerMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetImageLayerMaxCount()
		{
			return Int32.SetSamplerState(0, SamplerStateMaxValue;
		}

		public int ImageLayerMaxCount
		{
			get
			{
				return Int32.SetSamplerState(0, SamplerStateMaxValue;
			}
		}

		public int GetImageLayerCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "ImageLayer");
		}

		public int ImageLayerCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "ImageLayer");
			}
		}

		public bool HasImageLayer()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "ImageLayer");
		}

		public Type_ImageLayer GetImageLayerAt(int index)
		{
			return new Type_ImageLayer(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "ImageLayer", index));
		}

		public XmlNode GetStartingImageLayerCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "ImageLayer" );
		}

		public XmlNode GetAdvancedImageLayerCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "ImageLayer", curNode );
		}

		public Type_ImageLayer GetImageLayerValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new Type_ImageLayer( curNode );
		}


		public Type_ImageLayer GetImageLayer()
		{
			return this.SetSamplerState(0, SamplerStateGetImageLayerAt(0);
		}

		public Type_ImageLayer ImageLayer
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetImageLayerAt(0);
			}
		}

		public void RemoveImageLayerAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "ImageLayer", index);
		}

		public void RemoveImageLayer()
		{
			while (this.SetSamplerState(0, SamplerStateHasImageLayer()) this.SetSamplerState(0, SamplerStateRemoveImageLayerAt(0);
		}

		public void AddImageLayer(Type_ImageLayer newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "ImageLayer", newValue);
		}

		public void InsertImageLayerAt(Type_ImageLayer newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "ImageLayer", index, newValue);
		}

		public void ReplaceImageLayerAt(Type_ImageLayer newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "ImageLayer", index, newValue);
		}
		#endregion // ImageLayer accessor methods

		#region ImageLayer collection
        public ImageLayerCollection	MyImageLayers = new ImageLayerCollection( );

        public class ImageLayerCollection: IEnumerable
        {
            Type_LayerSet parent;
            public Type_LayerSet Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public ImageLayerEnumerator GetEnumerator() 
			{
				return new ImageLayerEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class ImageLayerEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LayerSet parent;
			public ImageLayerEnumerator(Type_LayerSet par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateImageLayerCount );
			}
			public Type_ImageLayer  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetImageLayerAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // ImageLayer collection

		#region QuadTileSet accessor methods
		public int GetQuadTileSetMinCount()
		{
			return 0;
		}

		public int QuadTileSetMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetQuadTileSetMaxCount()
		{
			return Int32.SetSamplerState(0, SamplerStateMaxValue;
		}

		public int QuadTileSetMaxCount
		{
			get
			{
				return Int32.SetSamplerState(0, SamplerStateMaxValue;
			}
		}

		public int GetQuadTileSetCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "QuadTileSet");
		}

		public int QuadTileSetCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "QuadTileSet");
			}
		}

		public bool HasQuadTileSet()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "QuadTileSet");
		}

		public Type_QuadTileSet2 GetQuadTileSetAt(int index)
		{
			return new Type_QuadTileSet2(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "QuadTileSet", index));
		}

		public XmlNode GetStartingQuadTileSetCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "QuadTileSet" );
		}

		public XmlNode GetAdvancedQuadTileSetCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "QuadTileSet", curNode );
		}

		public Type_QuadTileSet2 GetQuadTileSetValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new Type_QuadTileSet2( curNode );
		}


		public Type_QuadTileSet2 GetQuadTileSet()
		{
			return this.SetSamplerState(0, SamplerStateGetQuadTileSetAt(0);
		}

		public Type_QuadTileSet2 QuadTileSet
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetQuadTileSetAt(0);
			}
		}

		public void RemoveQuadTileSetAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "QuadTileSet", index);
		}

		public void RemoveQuadTileSet()
		{
			while (this.SetSamplerState(0, SamplerStateHasQuadTileSet()) this.SetSamplerState(0, SamplerStateRemoveQuadTileSetAt(0);
		}

		public void AddQuadTileSet(Type_QuadTileSet2 newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "QuadTileSet", newValue);
		}

		public void InsertQuadTileSetAt(Type_QuadTileSet2 newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "QuadTileSet", index, newValue);
		}

		public void ReplaceQuadTileSetAt(Type_QuadTileSet2 newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "QuadTileSet", index, newValue);
		}
		#endregion // QuadTileSet accessor methods

		#region QuadTileSet collection
        public QuadTileSetCollection	MyQuadTileSets = new QuadTileSetCollection( );

        public class QuadTileSetCollection: IEnumerable
        {
            Type_LayerSet parent;
            public Type_LayerSet Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public QuadTileSetEnumerator GetEnumerator() 
			{
				return new QuadTileSetEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class QuadTileSetEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LayerSet parent;
			public QuadTileSetEnumerator(Type_LayerSet par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateQuadTileSetCount );
			}
			public Type_QuadTileSet2  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetQuadTileSetAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // QuadTileSet collection

		#region ShapeFileLayer accessor methods
		public int GetShapeFileLayerMinCount()
		{
			return 0;
		}

		public int ShapeFileLayerMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetShapeFileLayerMaxCount()
		{
			return Int32.SetSamplerState(0, SamplerStateMaxValue;
		}

		public int ShapeFileLayerMaxCount
		{
			get
			{
				return Int32.SetSamplerState(0, SamplerStateMaxValue;
			}
		}

		public int GetShapeFileLayerCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "ShapeFileLayer");
		}

		public int ShapeFileLayerCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "ShapeFileLayer");
			}
		}

		public bool HasShapeFileLayer()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "ShapeFileLayer");
		}

		public Type_ShapeFileLayer2 GetShapeFileLayerAt(int index)
		{
			return new Type_ShapeFileLayer2(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "ShapeFileLayer", index));
		}

		public XmlNode GetStartingShapeFileLayerCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "ShapeFileLayer" );
		}

		public XmlNode GetAdvancedShapeFileLayerCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "ShapeFileLayer", curNode );
		}

		public Type_ShapeFileLayer2 GetShapeFileLayerValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new Type_ShapeFileLayer2( curNode );
		}


		public Type_ShapeFileLayer2 GetShapeFileLayer()
		{
			return this.SetSamplerState(0, SamplerStateGetShapeFileLayerAt(0);
		}

		public Type_ShapeFileLayer2 ShapeFileLayer
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetShapeFileLayerAt(0);
			}
		}

		public void RemoveShapeFileLayerAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "ShapeFileLayer", index);
		}

		public void RemoveShapeFileLayer()
		{
			while (this.SetSamplerState(0, SamplerStateHasShapeFileLayer()) this.SetSamplerState(0, SamplerStateRemoveShapeFileLayerAt(0);
		}

		public void AddShapeFileLayer(Type_ShapeFileLayer2 newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "ShapeFileLayer", newValue);
		}

		public void InsertShapeFileLayerAt(Type_ShapeFileLayer2 newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "ShapeFileLayer", index, newValue);
		}

		public void ReplaceShapeFileLayerAt(Type_ShapeFileLayer2 newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "ShapeFileLayer", index, newValue);
		}
		#endregion // ShapeFileLayer accessor methods

		#region ShapeFileLayer collection
        public ShapeFileLayerCollection	MyShapeFileLayers = new ShapeFileLayerCollection( );

        public class ShapeFileLayerCollection: IEnumerable
        {
            Type_LayerSet parent;
            public Type_LayerSet Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public ShapeFileLayerEnumerator GetEnumerator() 
			{
				return new ShapeFileLayerEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class ShapeFileLayerEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LayerSet parent;
			public ShapeFileLayerEnumerator(Type_LayerSet par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateShapeFileLayerCount );
			}
			public Type_ShapeFileLayer2  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetShapeFileLayerAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // ShapeFileLayer collection

		#region MeshLayer accessor methods
		public int GetMeshLayerMinCount()
		{
			return 0;
		}

		public int MeshLayerMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetMeshLayerMaxCount()
		{
			return Int32.SetSamplerState(0, SamplerStateMaxValue;
		}

		public int MeshLayerMaxCount
		{
			get
			{
				return Int32.SetSamplerState(0, SamplerStateMaxValue;
			}
		}

		public int GetMeshLayerCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "MeshLayer");
		}

		public int MeshLayerCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "MeshLayer");
			}
		}

		public bool HasMeshLayer()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "MeshLayer");
		}

		public Type_MeshLayer2 GetMeshLayerAt(int index)
		{
			return new Type_MeshLayer2(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "MeshLayer", index));
		}

		public XmlNode GetStartingMeshLayerCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "MeshLayer" );
		}

		public XmlNode GetAdvancedMeshLayerCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "MeshLayer", curNode );
		}

		public Type_MeshLayer2 GetMeshLayerValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new Type_MeshLayer2( curNode );
		}


		public Type_MeshLayer2 GetMeshLayer()
		{
			return this.SetSamplerState(0, SamplerStateGetMeshLayerAt(0);
		}

		public Type_MeshLayer2 MeshLayer
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetMeshLayerAt(0);
			}
		}

		public void RemoveMeshLayerAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "MeshLayer", index);
		}

		public void RemoveMeshLayer()
		{
			while (this.SetSamplerState(0, SamplerStateHasMeshLayer()) this.SetSamplerState(0, SamplerStateRemoveMeshLayerAt(0);
		}

		public void AddMeshLayer(Type_MeshLayer2 newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "MeshLayer", newValue);
		}

		public void InsertMeshLayerAt(Type_MeshLayer2 newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "MeshLayer", index, newValue);
		}

		public void ReplaceMeshLayerAt(Type_MeshLayer2 newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "MeshLayer", index, newValue);
		}
		#endregion // MeshLayer accessor methods

		#region MeshLayer collection
        public MeshLayerCollection	MyMeshLayers = new MeshLayerCollection( );

        public class MeshLayerCollection: IEnumerable
        {
            Type_LayerSet parent;
            public Type_LayerSet Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public MeshLayerEnumerator GetEnumerator() 
			{
				return new MeshLayerEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class MeshLayerEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LayerSet parent;
			public MeshLayerEnumerator(Type_LayerSet par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateMeshLayerCount );
			}
			public Type_MeshLayer2  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetMeshLayerAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // MeshLayer collection

		#region PathList accessor methods
		public int GetPathListMinCount()
		{
			return 0;
		}

		public int PathListMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetPathListMaxCount()
		{
			return Int32.SetSamplerState(0, SamplerStateMaxValue;
		}

		public int PathListMaxCount
		{
			get
			{
				return Int32.SetSamplerState(0, SamplerStateMaxValue;
			}
		}

		public int GetPathListCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "PathList");
		}

		public int PathListCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "PathList");
			}
		}

		public bool HasPathList()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "PathList");
		}

		public Type_PathList2 GetPathListAt(int index)
		{
			return new Type_PathList2(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "PathList", index));
		}

		public XmlNode GetStartingPathListCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "PathList" );
		}

		public XmlNode GetAdvancedPathListCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "PathList", curNode );
		}

		public Type_PathList2 GetPathListValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new Type_PathList2( curNode );
		}


		public Type_PathList2 GetPathList()
		{
			return this.SetSamplerState(0, SamplerStateGetPathListAt(0);
		}

		public Type_PathList2 PathList
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetPathListAt(0);
			}
		}

		public void RemovePathListAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "PathList", index);
		}

		public void RemovePathList()
		{
			while (this.SetSamplerState(0, SamplerStateHasPathList()) this.SetSamplerState(0, SamplerStateRemovePathListAt(0);
		}

		public void AddPathList(Type_PathList2 newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "PathList", newValue);
		}

		public void InsertPathListAt(Type_PathList2 newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "PathList", index, newValue);
		}

		public void ReplacePathListAt(Type_PathList2 newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "PathList", index, newValue);
		}
		#endregion // PathList accessor methods

		#region PathList collection
        public PathListCollection	MyPathLists = new PathListCollection( );

        public class PathListCollection: IEnumerable
        {
            Type_LayerSet parent;
            public Type_LayerSet Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public PathListEnumerator GetEnumerator() 
			{
				return new PathListEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class PathListEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LayerSet parent;
			public PathListEnumerator(Type_LayerSet par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStatePathListCount );
			}
			public Type_PathList2  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetPathListAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // PathList collection

		#region Icon accessor methods
		public int GetIconMinCount()
		{
			return 0;
		}

		public int IconMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetIconMaxCount()
		{
			return Int32.SetSamplerState(0, SamplerStateMaxValue;
		}

		public int IconMaxCount
		{
			get
			{
				return Int32.SetSamplerState(0, SamplerStateMaxValue;
			}
		}

		public int GetIconCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Icon");
		}

		public int IconCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Icon");
			}
		}

		public bool HasIcon()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "Icon");
		}

		public Type_Icon GetIconAt(int index)
		{
			return new Type_Icon(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Icon", index));
		}

		public XmlNode GetStartingIconCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "Icon" );
		}

		public XmlNode GetAdvancedIconCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "Icon", curNode );
		}

		public Type_Icon GetIconValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new Type_Icon( curNode );
		}


		public Type_Icon GetIcon()
		{
			return this.SetSamplerState(0, SamplerStateGetIconAt(0);
		}

		public Type_Icon Icon
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetIconAt(0);
			}
		}

		public void RemoveIconAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Icon", index);
		}

		public void RemoveIcon()
		{
			while (this.SetSamplerState(0, SamplerStateHasIcon()) this.SetSamplerState(0, SamplerStateRemoveIconAt(0);
		}

		public void AddIcon(Type_Icon newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "Icon", newValue);
		}

		public void InsertIconAt(Type_Icon newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "Icon", index, newValue);
		}

		public void ReplaceIconAt(Type_Icon newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "Icon", index, newValue);
		}
		#endregion // Icon accessor methods

		#region Icon collection
        public IconCollection	MyIcons = new IconCollection( );

        public class IconCollection: IEnumerable
        {
            Type_LayerSet parent;
            public Type_LayerSet Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public IconEnumerator GetEnumerator() 
			{
				return new IconEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class IconEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LayerSet parent;
			public IconEnumerator(Type_LayerSet par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateIconCount );
			}
			public Type_Icon  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetIconAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // Icon collection

		#region TiledPlacenameSet accessor methods
		public int GetTiledPlacenameSetMinCount()
		{
			return 0;
		}

		public int TiledPlacenameSetMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetTiledPlacenameSetMaxCount()
		{
			return Int32.SetSamplerState(0, SamplerStateMaxValue;
		}

		public int TiledPlacenameSetMaxCount
		{
			get
			{
				return Int32.SetSamplerState(0, SamplerStateMaxValue;
			}
		}

		public int GetTiledPlacenameSetCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "TiledPlacenameSet");
		}

		public int TiledPlacenameSetCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "TiledPlacenameSet");
			}
		}

		public bool HasTiledPlacenameSet()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "TiledPlacenameSet");
		}

		public Type_TiledPlacenameSet2 GetTiledPlacenameSetAt(int index)
		{
			return new Type_TiledPlacenameSet2(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TiledPlacenameSet", index));
		}

		public XmlNode GetStartingTiledPlacenameSetCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "TiledPlacenameSet" );
		}

		public XmlNode GetAdvancedTiledPlacenameSetCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "TiledPlacenameSet", curNode );
		}

		public Type_TiledPlacenameSet2 GetTiledPlacenameSetValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new Type_TiledPlacenameSet2( curNode );
		}


		public Type_TiledPlacenameSet2 GetTiledPlacenameSet()
		{
			return this.SetSamplerState(0, SamplerStateGetTiledPlacenameSetAt(0);
		}

		public Type_TiledPlacenameSet2 TiledPlacenameSet
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetTiledPlacenameSetAt(0);
			}
		}

		public void RemoveTiledPlacenameSetAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "TiledPlacenameSet", index);
		}

		public void RemoveTiledPlacenameSet()
		{
			while (this.SetSamplerState(0, SamplerStateHasTiledPlacenameSet()) this.SetSamplerState(0, SamplerStateRemoveTiledPlacenameSetAt(0);
		}

		public void AddTiledPlacenameSet(Type_TiledPlacenameSet2 newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "TiledPlacenameSet", newValue);
		}

		public void InsertTiledPlacenameSetAt(Type_TiledPlacenameSet2 newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "TiledPlacenameSet", index, newValue);
		}

		public void ReplaceTiledPlacenameSetAt(Type_TiledPlacenameSet2 newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "TiledPlacenameSet", index, newValue);
		}
		#endregion // TiledPlacenameSet accessor methods

		#region TiledPlacenameSet collection
        public TiledPlacenameSetCollection	MyTiledPlacenameSets = new TiledPlacenameSetCollection( );

        public class TiledPlacenameSetCollection: IEnumerable
        {
            Type_LayerSet parent;
            public Type_LayerSet Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public TiledPlacenameSetEnumerator GetEnumerator() 
			{
				return new TiledPlacenameSetEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class TiledPlacenameSetEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LayerSet parent;
			public TiledPlacenameSetEnumerator(Type_LayerSet par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateTiledPlacenameSetCount );
			}
			public Type_TiledPlacenameSet2  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetTiledPlacenameSetAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // TiledPlacenameSet collection

		#region ChildLayerSet accessor methods
		public int GetChildLayerSetMinCount()
		{
			return 0;
		}

		public int ChildLayerSetMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetChildLayerSetMaxCount()
		{
			return Int32.SetSamplerState(0, SamplerStateMaxValue;
		}

		public int ChildLayerSetMaxCount
		{
			get
			{
				return Int32.SetSamplerState(0, SamplerStateMaxValue;
			}
		}

		public int GetChildLayerSetCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "ChildLayerSet");
		}

		public int ChildLayerSetCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "ChildLayerSet");
			}
		}

		public bool HasChildLayerSet()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "ChildLayerSet");
		}

		public Type_LayerSet GetChildLayerSetAt(int index)
		{
			return new Type_LayerSet(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "ChildLayerSet", index));
		}

		public XmlNode GetStartingChildLayerSetCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "ChildLayerSet" );
		}

		public XmlNode GetAdvancedChildLayerSetCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "ChildLayerSet", curNode );
		}

		public Type_LayerSet GetChildLayerSetValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new Type_LayerSet( curNode );
		}


		public Type_LayerSet GetChildLayerSet()
		{
			return this.SetSamplerState(0, SamplerStateGetChildLayerSetAt(0);
		}

		public Type_LayerSet ChildLayerSet
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetChildLayerSetAt(0);
			}
		}

		public void RemoveChildLayerSetAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "ChildLayerSet", index);
		}

		public void RemoveChildLayerSet()
		{
			while (this.SetSamplerState(0, SamplerStateHasChildLayerSet()) this.SetSamplerState(0, SamplerStateRemoveChildLayerSetAt(0);
		}

		public void AddChildLayerSet(Type_LayerSet newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "ChildLayerSet", newValue);
		}

		public void InsertChildLayerSetAt(Type_LayerSet newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "ChildLayerSet", index, newValue);
		}

		public void ReplaceChildLayerSetAt(Type_LayerSet newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "ChildLayerSet", index, newValue);
		}
		#endregion // ChildLayerSet accessor methods

		#region ChildLayerSet collection
        public ChildLayerSetCollection	MyChildLayerSets = new ChildLayerSetCollection( );

        public class ChildLayerSetCollection: IEnumerable
        {
            Type_LayerSet parent;
            public Type_LayerSet Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public ChildLayerSetEnumerator GetEnumerator() 
			{
				return new ChildLayerSetEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class ChildLayerSetEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LayerSet parent;
			public ChildLayerSetEnumerator(Type_LayerSet par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateChildLayerSetCount );
			}
			public Type_LayerSet  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetChildLayerSetAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // ChildLayerSet collection

		#region ExtendedInformation accessor methods
		public int GetExtendedInformationMinCount()
		{
			return 0;
		}

		public int ExtendedInformationMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetExtendedInformationMaxCount()
		{
			return 1;
		}

		public int ExtendedInformationMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetExtendedInformationCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation");
		}

		public int ExtendedInformationCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation");
			}
		}

		public bool HasExtendedInformation()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation");
		}

		public Type_ExtendedInformation GetExtendedInformationAt(int index)
		{
			return new Type_ExtendedInformation(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation", index));
		}

		public XmlNode GetStartingExtendedInformationCursor()
		{
			return this.SetSamplerState(0, SamplerStateGetDomFirstChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation" );
		}

		public XmlNode GetAdvancedExtendedInformationCursor( XmlNode curNode )
		{
			return this.SetSamplerState(0, SamplerStateGetDomNextChild( NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation", curNode );
		}

		public Type_ExtendedInformation GetExtendedInformationValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateXmlException("Out of range");
			else
				return new Type_ExtendedInformation( curNode );
		}


		public Type_ExtendedInformation GetExtendedInformation()
		{
			return this.SetSamplerState(0, SamplerStateGetExtendedInformationAt(0);
		}

		public Type_ExtendedInformation ExtendedInformation
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetExtendedInformationAt(0);
			}
		}

		public void RemoveExtendedInformationAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "ExtendedInformation", index);
		}

		public void RemoveExtendedInformation()
		{
			while (this.SetSamplerState(0, SamplerStateHasExtendedInformation()) this.SetSamplerState(0, SamplerStateRemoveExtendedInformationAt(0);
		}

		public void AddExtendedInformation(Type_ExtendedInformation newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "ExtendedInformation", newValue);
		}

		public void InsertExtendedInformationAt(Type_ExtendedInformation newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "ExtendedInformation", index, newValue);
		}

		public void ReplaceExtendedInformationAt(Type_ExtendedInformation newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "ExtendedInformation", index, newValue);
		}
		#endregion // ExtendedInformation accessor methods

		#region ExtendedInformation collection
        public ExtendedInformationCollection	MyExtendedInformations = new ExtendedInformationCollection( );

        public class ExtendedInformationCollection: IEnumerable
        {
            Type_LayerSet parent;
            public Type_LayerSet Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public ExtendedInformationEnumerator GetEnumerator() 
			{
				return new ExtendedInformationEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class ExtendedInformationEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LayerSet parent;
			public ExtendedInformationEnumerator(Type_LayerSet par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateExtendedInformationCount );
			}
			public Type_ExtendedInformation  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetExtendedInformationAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // ExtendedInformation collection

        private void SetCollectionParents()
        {
            this.SetSamplerState(0, SamplerStateMyNames.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyShowOnlyOneLayers.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyShowAtStartups.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyImageLayers.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyQuadTileSets.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyShapeFileLayers.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyMeshLayers.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyPathLists.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyIcons.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyTiledPlacenameSets.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyChildLayerSets.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyExtendedInformations.SetSamplerState(0, SamplerStateParent = this; 
	}
}
}
