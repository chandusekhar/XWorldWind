//
// RequestType.SetSamplerState(0, SamplerStatecs.SetSamplerState(0, SamplerStatecs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.SetSamplerState(0, SamplerState
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.SetSamplerState(0, SamplerState
//
// Refer to the XMLSPY Documentation for further details.SetSamplerState(0, SamplerState
// http://www.SetSamplerState(0, SamplerStatealtova.SetSamplerState(0, SamplerStatecom/xmlspy
//


using System;
using System.SetSamplerState(0, SamplerStateCollections;
using System.SetSamplerState(0, SamplerStateXml;
using Altova.SetSamplerState(0, SamplerStateTypes;

namespace capabilities_1_1_1
{
	public class RequestType : Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateNode
	{
		#region Forward constructors
		public RequestType() : base() {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public RequestType(XmlDocument doc) : base(doc) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public RequestType(XmlNode node) : base(node) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public RequestType(Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateNode node) : base(node) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetCapabilities"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetCapabilities", i);
				InternalAdjustPrefix(DOMNode, false);
				new GetCapabilitiesType(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetMap"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetMap", i);
				InternalAdjustPrefix(DOMNode, false);
				new GetMapType(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetFeatureInfo"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetFeatureInfo", i);
				InternalAdjustPrefix(DOMNode, false);
				new GetFeatureInfoType(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "DescribeLayer"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "DescribeLayer", i);
				InternalAdjustPrefix(DOMNode, false);
				new DescribeLayerType(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetLegendGraphic"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetLegendGraphic", i);
				InternalAdjustPrefix(DOMNode, false);
				new GetLegendGraphicType(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetStyles"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetStyles", i);
				InternalAdjustPrefix(DOMNode, false);
				new GetStylesType(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "PutStyles"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "PutStyles", i);
				InternalAdjustPrefix(DOMNode, false);
				new PutStylesType(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}
		}


		#region GetCapabilities accessor methods
		public int GetGetCapabilitiesMinCount()
		{
			return 1;
		}

		public int GetCapabilitiesMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetGetCapabilitiesMaxCount()
		{
			return 1;
		}

		public int GetCapabilitiesMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetGetCapabilitiesCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetCapabilities");
		}

		public int GetCapabilitiesCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetCapabilities");
			}
		}

		public bool HasGetCapabilities()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetCapabilities");
		}

		public GetCapabilitiesType GetGetCapabilitiesAt(int index)
		{
			return new GetCapabilitiesType(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetCapabilities", index));
		}

		public GetCapabilitiesType GetGetCapabilities()
		{
			return this.SetSamplerState(0, SamplerStateGetGetCapabilitiesAt(0);
		}

		public GetCapabilitiesType GetCapabilities
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetGetCapabilitiesAt(0);
			}
		}

		public void RemoveGetCapabilitiesAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetCapabilities", index);
		}

		public void RemoveGetCapabilities()
		{
			while (this.SetSamplerState(0, SamplerStateHasGetCapabilities()) this.SetSamplerState(0, SamplerStateRemoveGetCapabilitiesAt(0);
		}

		public void AddGetCapabilities(GetCapabilitiesType newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "GetCapabilities", newValue);
		}

		public void InsertGetCapabilitiesAt(GetCapabilitiesType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "GetCapabilities", index, newValue);
		}

		public void ReplaceGetCapabilitiesAt(GetCapabilitiesType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "GetCapabilities", index, newValue);
		}
		#endregion // GetCapabilities accessor methods

		#region GetCapabilities collection
        public GetCapabilitiesCollection	MyGetCapabilitiess = new GetCapabilitiesCollection( );

        public class GetCapabilitiesCollection: IEnumerable
        {
            RequestType parent;
            public RequestType Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public GetCapabilitiesEnumerator GetEnumerator() 
			{
				return new GetCapabilitiesEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class GetCapabilitiesEnumerator: IEnumerator 
        {
			int nIndex;
			RequestType parent;
			public GetCapabilitiesEnumerator(RequestType par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetCapabilitiesCount );
			}
			public GetCapabilitiesType  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetGetCapabilitiesAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // GetCapabilities collection

		#region GetMap accessor methods
		public int GetGetMapMinCount()
		{
			return 1;
		}

		public int GetMapMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetGetMapMaxCount()
		{
			return 1;
		}

		public int GetMapMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetGetMapCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetMap");
		}

		public int GetMapCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetMap");
			}
		}

		public bool HasGetMap()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetMap");
		}

		public GetMapType GetGetMapAt(int index)
		{
			return new GetMapType(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetMap", index));
		}

		public GetMapType GetGetMap()
		{
			return this.SetSamplerState(0, SamplerStateGetGetMapAt(0);
		}

		public GetMapType GetMap
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetGetMapAt(0);
			}
		}

		public void RemoveGetMapAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetMap", index);
		}

		public void RemoveGetMap()
		{
			while (this.SetSamplerState(0, SamplerStateHasGetMap()) this.SetSamplerState(0, SamplerStateRemoveGetMapAt(0);
		}

		public void AddGetMap(GetMapType newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "GetMap", newValue);
		}

		public void InsertGetMapAt(GetMapType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "GetMap", index, newValue);
		}

		public void ReplaceGetMapAt(GetMapType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "GetMap", index, newValue);
		}
		#endregion // GetMap accessor methods

		#region GetMap collection
        public GetMapCollection	MyGetMaps = new GetMapCollection( );

        public class GetMapCollection: IEnumerable
        {
            RequestType parent;
            public RequestType Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public GetMapEnumerator GetEnumerator() 
			{
				return new GetMapEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class GetMapEnumerator: IEnumerator 
        {
			int nIndex;
			RequestType parent;
			public GetMapEnumerator(RequestType par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetMapCount );
			}
			public GetMapType  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetGetMapAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // GetMap collection

		#region GetFeatureInfo accessor methods
		public int GetGetFeatureInfoMinCount()
		{
			return 0;
		}

		public int GetFeatureInfoMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetGetFeatureInfoMaxCount()
		{
			return 1;
		}

		public int GetFeatureInfoMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetGetFeatureInfoCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetFeatureInfo");
		}

		public int GetFeatureInfoCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetFeatureInfo");
			}
		}

		public bool HasGetFeatureInfo()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetFeatureInfo");
		}

		public GetFeatureInfoType GetGetFeatureInfoAt(int index)
		{
			return new GetFeatureInfoType(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetFeatureInfo", index));
		}

		public GetFeatureInfoType GetGetFeatureInfo()
		{
			return this.SetSamplerState(0, SamplerStateGetGetFeatureInfoAt(0);
		}

		public GetFeatureInfoType GetFeatureInfo
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetGetFeatureInfoAt(0);
			}
		}

		public void RemoveGetFeatureInfoAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetFeatureInfo", index);
		}

		public void RemoveGetFeatureInfo()
		{
			while (this.SetSamplerState(0, SamplerStateHasGetFeatureInfo()) this.SetSamplerState(0, SamplerStateRemoveGetFeatureInfoAt(0);
		}

		public void AddGetFeatureInfo(GetFeatureInfoType newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "GetFeatureInfo", newValue);
		}

		public void InsertGetFeatureInfoAt(GetFeatureInfoType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "GetFeatureInfo", index, newValue);
		}

		public void ReplaceGetFeatureInfoAt(GetFeatureInfoType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "GetFeatureInfo", index, newValue);
		}
		#endregion // GetFeatureInfo accessor methods

		#region GetFeatureInfo collection
        public GetFeatureInfoCollection	MyGetFeatureInfos = new GetFeatureInfoCollection( );

        public class GetFeatureInfoCollection: IEnumerable
        {
            RequestType parent;
            public RequestType Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public GetFeatureInfoEnumerator GetEnumerator() 
			{
				return new GetFeatureInfoEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class GetFeatureInfoEnumerator: IEnumerator 
        {
			int nIndex;
			RequestType parent;
			public GetFeatureInfoEnumerator(RequestType par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetFeatureInfoCount );
			}
			public GetFeatureInfoType  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetGetFeatureInfoAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // GetFeatureInfo collection

		#region DescribeLayer accessor methods
		public int GetDescribeLayerMinCount()
		{
			return 0;
		}

		public int DescribeLayerMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetDescribeLayerMaxCount()
		{
			return 1;
		}

		public int DescribeLayerMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetDescribeLayerCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "DescribeLayer");
		}

		public int DescribeLayerCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "DescribeLayer");
			}
		}

		public bool HasDescribeLayer()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "DescribeLayer");
		}

		public DescribeLayerType GetDescribeLayerAt(int index)
		{
			return new DescribeLayerType(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "DescribeLayer", index));
		}

		public DescribeLayerType GetDescribeLayer()
		{
			return this.SetSamplerState(0, SamplerStateGetDescribeLayerAt(0);
		}

		public DescribeLayerType DescribeLayer
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetDescribeLayerAt(0);
			}
		}

		public void RemoveDescribeLayerAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "DescribeLayer", index);
		}

		public void RemoveDescribeLayer()
		{
			while (this.SetSamplerState(0, SamplerStateHasDescribeLayer()) this.SetSamplerState(0, SamplerStateRemoveDescribeLayerAt(0);
		}

		public void AddDescribeLayer(DescribeLayerType newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "DescribeLayer", newValue);
		}

		public void InsertDescribeLayerAt(DescribeLayerType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "DescribeLayer", index, newValue);
		}

		public void ReplaceDescribeLayerAt(DescribeLayerType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "DescribeLayer", index, newValue);
		}
		#endregion // DescribeLayer accessor methods

		#region DescribeLayer collection
        public DescribeLayerCollection	MyDescribeLayers = new DescribeLayerCollection( );

        public class DescribeLayerCollection: IEnumerable
        {
            RequestType parent;
            public RequestType Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public DescribeLayerEnumerator GetEnumerator() 
			{
				return new DescribeLayerEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class DescribeLayerEnumerator: IEnumerator 
        {
			int nIndex;
			RequestType parent;
			public DescribeLayerEnumerator(RequestType par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateDescribeLayerCount );
			}
			public DescribeLayerType  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetDescribeLayerAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // DescribeLayer collection

		#region GetLegendGraphic accessor methods
		public int GetGetLegendGraphicMinCount()
		{
			return 0;
		}

		public int GetLegendGraphicMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetGetLegendGraphicMaxCount()
		{
			return 1;
		}

		public int GetLegendGraphicMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetGetLegendGraphicCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetLegendGraphic");
		}

		public int GetLegendGraphicCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetLegendGraphic");
			}
		}

		public bool HasGetLegendGraphic()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetLegendGraphic");
		}

		public GetLegendGraphicType GetGetLegendGraphicAt(int index)
		{
			return new GetLegendGraphicType(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetLegendGraphic", index));
		}

		public GetLegendGraphicType GetGetLegendGraphic()
		{
			return this.SetSamplerState(0, SamplerStateGetGetLegendGraphicAt(0);
		}

		public GetLegendGraphicType GetLegendGraphic
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetGetLegendGraphicAt(0);
			}
		}

		public void RemoveGetLegendGraphicAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetLegendGraphic", index);
		}

		public void RemoveGetLegendGraphic()
		{
			while (this.SetSamplerState(0, SamplerStateHasGetLegendGraphic()) this.SetSamplerState(0, SamplerStateRemoveGetLegendGraphicAt(0);
		}

		public void AddGetLegendGraphic(GetLegendGraphicType newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "GetLegendGraphic", newValue);
		}

		public void InsertGetLegendGraphicAt(GetLegendGraphicType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "GetLegendGraphic", index, newValue);
		}

		public void ReplaceGetLegendGraphicAt(GetLegendGraphicType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "GetLegendGraphic", index, newValue);
		}
		#endregion // GetLegendGraphic accessor methods

		#region GetLegendGraphic collection
        public GetLegendGraphicCollection	MyGetLegendGraphics = new GetLegendGraphicCollection( );

        public class GetLegendGraphicCollection: IEnumerable
        {
            RequestType parent;
            public RequestType Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public GetLegendGraphicEnumerator GetEnumerator() 
			{
				return new GetLegendGraphicEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class GetLegendGraphicEnumerator: IEnumerator 
        {
			int nIndex;
			RequestType parent;
			public GetLegendGraphicEnumerator(RequestType par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetLegendGraphicCount );
			}
			public GetLegendGraphicType  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetGetLegendGraphicAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // GetLegendGraphic collection

		#region GetStyles accessor methods
		public int GetGetStylesMinCount()
		{
			return 0;
		}

		public int GetStylesMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetGetStylesMaxCount()
		{
			return 1;
		}

		public int GetStylesMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetGetStylesCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetStyles");
		}

		public int GetStylesCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetStyles");
			}
		}

		public bool HasGetStyles()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetStyles");
		}

		public GetStylesType GetGetStylesAt(int index)
		{
			return new GetStylesType(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetStyles", index));
		}

		public GetStylesType GetGetStyles()
		{
			return this.SetSamplerState(0, SamplerStateGetGetStylesAt(0);
		}

		public GetStylesType GetStyles
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetGetStylesAt(0);
			}
		}

		public void RemoveGetStylesAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "GetStyles", index);
		}

		public void RemoveGetStyles()
		{
			while (this.SetSamplerState(0, SamplerStateHasGetStyles()) this.SetSamplerState(0, SamplerStateRemoveGetStylesAt(0);
		}

		public void AddGetStyles(GetStylesType newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "GetStyles", newValue);
		}

		public void InsertGetStylesAt(GetStylesType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "GetStyles", index, newValue);
		}

		public void ReplaceGetStylesAt(GetStylesType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "GetStyles", index, newValue);
		}
		#endregion // GetStyles accessor methods

		#region GetStyles collection
        public GetStylesCollection	MyGetStyless = new GetStylesCollection( );

        public class GetStylesCollection: IEnumerable
        {
            RequestType parent;
            public RequestType Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public GetStylesEnumerator GetEnumerator() 
			{
				return new GetStylesEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class GetStylesEnumerator: IEnumerator 
        {
			int nIndex;
			RequestType parent;
			public GetStylesEnumerator(RequestType par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetStylesCount );
			}
			public GetStylesType  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetGetStylesAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // GetStyles collection

		#region PutStyles accessor methods
		public int GetPutStylesMinCount()
		{
			return 0;
		}

		public int PutStylesMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetPutStylesMaxCount()
		{
			return 1;
		}

		public int PutStylesMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetPutStylesCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "PutStyles");
		}

		public int PutStylesCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "PutStyles");
			}
		}

		public bool HasPutStyles()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "PutStyles");
		}

		public PutStylesType GetPutStylesAt(int index)
		{
			return new PutStylesType(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "PutStyles", index));
		}

		public PutStylesType GetPutStyles()
		{
			return this.SetSamplerState(0, SamplerStateGetPutStylesAt(0);
		}

		public PutStylesType PutStyles
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetPutStylesAt(0);
			}
		}

		public void RemovePutStylesAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "PutStyles", index);
		}

		public void RemovePutStyles()
		{
			while (this.SetSamplerState(0, SamplerStateHasPutStyles()) this.SetSamplerState(0, SamplerStateRemovePutStylesAt(0);
		}

		public void AddPutStyles(PutStylesType newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "PutStyles", newValue);
		}

		public void InsertPutStylesAt(PutStylesType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "PutStyles", index, newValue);
		}

		public void ReplacePutStylesAt(PutStylesType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "PutStyles", index, newValue);
		}
		#endregion // PutStyles accessor methods

		#region PutStyles collection
        public PutStylesCollection	MyPutStyless = new PutStylesCollection( );

        public class PutStylesCollection: IEnumerable
        {
            RequestType parent;
            public RequestType Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public PutStylesEnumerator GetEnumerator() 
			{
				return new PutStylesEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class PutStylesEnumerator: IEnumerator 
        {
			int nIndex;
			RequestType parent;
			public PutStylesEnumerator(RequestType par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStatePutStylesCount );
			}
			public PutStylesType  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetPutStylesAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // PutStyles collection

        private void SetCollectionParents()
        {
            this.SetSamplerState(0, SamplerStateMyGetCapabilitiess.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyGetMaps.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyGetFeatureInfos.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyDescribeLayers.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyGetLegendGraphics.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyGetStyless.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyPutStyless.SetSamplerState(0, SamplerStateParent = this; 
	}
}
}
