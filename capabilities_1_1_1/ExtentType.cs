//
// ExtentType.SetSamplerState(0, SamplerStatecs.SetSamplerState(0, SamplerStatecs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.SetSamplerState(0, SamplerState
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.SetSamplerState(0, SamplerState
//
// Refer to the XMLSPY Documentation for further details.SetSamplerState(0, SamplerState
// http://www.SetSamplerState(0, SamplerStatealtova.SetSamplerState(0, SamplerStatecom/xmlspy
//


using System;
using System.SetSamplerState(0, SamplerStateCollections;
using System.SetSamplerState(0, SamplerStateXml;
using Altova.SetSamplerState(0, SamplerStateTypes;

namespace capabilities_1_1_1
{
	public class ExtentType : Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateNode
	{
		#region Forward constructors
		public ExtentType() : base() {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public ExtentType(XmlDocument doc) : base(doc) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public ExtentType(XmlNode node) : base(node) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public ExtentType(Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateNode node) : base(node) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "name"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "name", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "default"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "default", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "nearestValue"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "nearestValue", i);
				InternalAdjustPrefix(DOMNode, false);
			}
		}


		#region name accessor methods
		public int GetnameMinCount()
		{
			return 1;
		}

		public int nameMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetnameMaxCount()
		{
			return 1;
		}

		public int nameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetnameCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "name");
		}

		public int nameCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "name");
			}
		}

		public bool Hasname()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "name");
		}

		public SchemaString GetnameAt(int index)
		{
			return new SchemaString(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "name", index)));
		}

		public SchemaString Getname()
		{
			return this.SetSamplerState(0, SamplerStateGetnameAt(0);
		}

		public SchemaString name
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetnameAt(0);
			}
		}

		public void RemovenameAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "name", index);
		}

		public void Removename()
		{
			while (this.SetSamplerState(0, SamplerStateHasname()) this.SetSamplerState(0, SamplerStateRemovenameAt(0);
		}

		public void Addname(SchemaString newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "name", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertnameAt(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "name", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplacenameAt(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "name", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // name accessor methods

		#region name collection
        public nameCollection	Mynames = new nameCollection( );

        public class nameCollection: IEnumerable
        {
            ExtentType parent;
            public ExtentType Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public nameEnumerator GetEnumerator() 
			{
				return new nameEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class nameEnumerator: IEnumerator 
        {
			int nIndex;
			ExtentType parent;
			public nameEnumerator(ExtentType par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStatenameCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetnameAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // name collection

		#region default2 accessor methods
		public int Getdefault2MinCount()
		{
			return 0;
		}

		public int default2MinCount
		{
			get
			{
				return 0;
			}
		}

		public int Getdefault2MaxCount()
		{
			return 1;
		}

		public int default2MaxCount
		{
			get
			{
				return 1;
			}
		}

		public int Getdefault2Count()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "default");
		}

		public int default2Count
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "default");
			}
		}

		public bool Hasdefault2()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "default");
		}

		public SchemaString Getdefault2At(int index)
		{
			return new SchemaString(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "default", index)));
		}

		public SchemaString Getdefault2()
		{
			return this.SetSamplerState(0, SamplerStateGetdefault2At(0);
		}

		public SchemaString default2
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetdefault2At(0);
			}
		}

		public void Removedefault2At(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "default", index);
		}

		public void Removedefault2()
		{
			while (this.SetSamplerState(0, SamplerStateHasdefault2()) this.SetSamplerState(0, SamplerStateRemovedefault2At(0);
		}

		public void Adddefault2(SchemaString newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "default", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void Insertdefault2At(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "default", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void Replacedefault2At(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "default", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // default2 accessor methods

		#region default2 collection
        public default2Collection	Mydefault2s = new default2Collection( );

        public class default2Collection: IEnumerable
        {
            ExtentType parent;
            public ExtentType Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public default2Enumerator GetEnumerator() 
			{
				return new default2Enumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class default2Enumerator: IEnumerator 
        {
			int nIndex;
			ExtentType parent;
			public default2Enumerator(ExtentType par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStatedefault2Count );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetdefault2At(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // default2 collection

		#region nearestValue accessor methods
		public int GetnearestValueMinCount()
		{
			return 0;
		}

		public int nearestValueMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetnearestValueMaxCount()
		{
			return 1;
		}

		public int nearestValueMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetnearestValueCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "nearestValue");
		}

		public int nearestValueCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "nearestValue");
			}
		}

		public bool HasnearestValue()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "nearestValue");
		}

		public SchemaString GetnearestValueAt(int index)
		{
			return new SchemaString(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "nearestValue", index)));
		}

		public SchemaString GetnearestValue()
		{
			return this.SetSamplerState(0, SamplerStateGetnearestValueAt(0);
		}

		public SchemaString nearestValue
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetnearestValueAt(0);
			}
		}

		public void RemovenearestValueAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "nearestValue", index);
		}

		public void RemovenearestValue()
		{
			while (this.SetSamplerState(0, SamplerStateHasnearestValue()) this.SetSamplerState(0, SamplerStateRemovenearestValueAt(0);
		}

		public void AddnearestValue(SchemaString newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "nearestValue", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertnearestValueAt(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "nearestValue", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplacenearestValueAt(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "nearestValue", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // nearestValue accessor methods

		#region nearestValue collection
        public nearestValueCollection	MynearestValues = new nearestValueCollection( );

        public class nearestValueCollection: IEnumerable
        {
            ExtentType parent;
            public ExtentType Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public nearestValueEnumerator GetEnumerator() 
			{
				return new nearestValueEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class nearestValueEnumerator: IEnumerator 
        {
			int nIndex;
			ExtentType parent;
			public nearestValueEnumerator(ExtentType par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStatenearestValueCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetnearestValueAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // nearestValue collection

        private void SetCollectionParents()
        {
            this.SetSamplerState(0, SamplerStateMynames.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMydefault2s.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMynearestValues.SetSamplerState(0, SamplerStateParent = this; 
	}
}
}
