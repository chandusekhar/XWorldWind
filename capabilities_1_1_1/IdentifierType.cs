//
// IdentifierType.SetSamplerState(0, SamplerStatecs.SetSamplerState(0, SamplerStatecs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.SetSamplerState(0, SamplerState
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.SetSamplerState(0, SamplerState
//
// Refer to the XMLSPY Documentation for further details.SetSamplerState(0, SamplerState
// http://www.SetSamplerState(0, SamplerStatealtova.SetSamplerState(0, SamplerStatecom/xmlspy
//


using System;
using System.SetSamplerState(0, SamplerStateCollections;
using System.SetSamplerState(0, SamplerStateXml;
using Altova.SetSamplerState(0, SamplerStateTypes;

namespace capabilities_1_1_1
{
	public class IdentifierType : Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateNode
	{
		#region Forward constructors
		public IdentifierType() : base() {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public IdentifierType(XmlDocument doc) : base(doc) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public IdentifierType(XmlNode node) : base(node) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public IdentifierType(Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateNode node) : base(node) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "authority"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "authority", i);
				InternalAdjustPrefix(DOMNode, false);
			}
		}


		#region authority accessor methods
		public int GetauthorityMinCount()
		{
			return 1;
		}

		public int authorityMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetauthorityMaxCount()
		{
			return 1;
		}

		public int authorityMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetauthorityCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "authority");
		}

		public int authorityCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "authority");
			}
		}

		public bool Hasauthority()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "authority");
		}

		public SchemaString GetauthorityAt(int index)
		{
			return new SchemaString(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "authority", index)));
		}

		public SchemaString Getauthority()
		{
			return this.SetSamplerState(0, SamplerStateGetauthorityAt(0);
		}

		public SchemaString authority
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetauthorityAt(0);
			}
		}

		public void RemoveauthorityAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "authority", index);
		}

		public void Removeauthority()
		{
			while (this.SetSamplerState(0, SamplerStateHasauthority()) this.SetSamplerState(0, SamplerStateRemoveauthorityAt(0);
		}

		public void Addauthority(SchemaString newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "authority", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertauthorityAt(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "authority", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceauthorityAt(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "authority", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // authority accessor methods

		#region authority collection
        public authorityCollection	Myauthoritys = new authorityCollection( );

        public class authorityCollection: IEnumerable
        {
            IdentifierType parent;
            public IdentifierType Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public authorityEnumerator GetEnumerator() 
			{
				return new authorityEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class authorityEnumerator: IEnumerator 
        {
			int nIndex;
			IdentifierType parent;
			public authorityEnumerator(IdentifierType par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateauthorityCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetauthorityAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // authority collection

        private void SetCollectionParents()
        {
            this.SetSamplerState(0, SamplerStateMyauthoritys.SetSamplerState(0, SamplerStateParent = this; 
	}
}
}
