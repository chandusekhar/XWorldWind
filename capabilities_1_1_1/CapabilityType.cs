//
// CapabilityType.SetSamplerState(0, SamplerStatecs.SetSamplerState(0, SamplerStatecs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.SetSamplerState(0, SamplerState
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.SetSamplerState(0, SamplerState
//
// Refer to the XMLSPY Documentation for further details.SetSamplerState(0, SamplerState
// http://www.SetSamplerState(0, SamplerStatealtova.SetSamplerState(0, SamplerStatecom/xmlspy
//


using System;
using System.SetSamplerState(0, SamplerStateCollections;
using System.SetSamplerState(0, SamplerStateXml;
using Altova.SetSamplerState(0, SamplerStateTypes;

namespace capabilities_1_1_1
{
	public class CapabilityType : Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateNode
	{
		#region Forward constructors
		public CapabilityType() : base() {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public CapabilityType(XmlDocument doc) : base(doc) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public CapabilityType(XmlNode node) : base(node) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public CapabilityType(Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateNode node) : base(node) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Request"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Request", i);
				InternalAdjustPrefix(DOMNode, false);
				new RequestType(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Exception"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Exception", i);
				InternalAdjustPrefix(DOMNode, false);
				new ExceptionType(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "VendorSpecificCapabilities"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "VendorSpecificCapabilities", i);
				InternalAdjustPrefix(DOMNode, false);
				new VendorSpecificCapabilitiesType(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "UserDefinedSymbolization"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "UserDefinedSymbolization", i);
				InternalAdjustPrefix(DOMNode, false);
				new UserDefinedSymbolizationType(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Layer"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Layer", i);
				InternalAdjustPrefix(DOMNode, false);
				new LayerType(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}
		}


		#region Request accessor methods
		public int GetRequestMinCount()
		{
			return 1;
		}

		public int RequestMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetRequestMaxCount()
		{
			return 1;
		}

		public int RequestMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetRequestCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Request");
		}

		public int RequestCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Request");
			}
		}

		public bool HasRequest()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "Request");
		}

		public RequestType GetRequestAt(int index)
		{
			return new RequestType(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Request", index));
		}

		public RequestType GetRequest()
		{
			return this.SetSamplerState(0, SamplerStateGetRequestAt(0);
		}

		public RequestType Request
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetRequestAt(0);
			}
		}

		public void RemoveRequestAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Request", index);
		}

		public void RemoveRequest()
		{
			while (this.SetSamplerState(0, SamplerStateHasRequest()) this.SetSamplerState(0, SamplerStateRemoveRequestAt(0);
		}

		public void AddRequest(RequestType newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "Request", newValue);
		}

		public void InsertRequestAt(RequestType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "Request", index, newValue);
		}

		public void ReplaceRequestAt(RequestType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "Request", index, newValue);
		}
		#endregion // Request accessor methods

		#region Request collection
        public RequestCollection	MyRequests = new RequestCollection( );

        public class RequestCollection: IEnumerable
        {
            CapabilityType parent;
            public CapabilityType Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public RequestEnumerator GetEnumerator() 
			{
				return new RequestEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class RequestEnumerator: IEnumerator 
        {
			int nIndex;
			CapabilityType parent;
			public RequestEnumerator(CapabilityType par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateRequestCount );
			}
			public RequestType  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetRequestAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // Request collection

		#region Exception accessor methods
		public int GetExceptionMinCount()
		{
			return 1;
		}

		public int ExceptionMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetExceptionMaxCount()
		{
			return 1;
		}

		public int ExceptionMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetExceptionCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Exception");
		}

		public int ExceptionCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Exception");
			}
		}

		public bool HasException()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "Exception");
		}

		public ExceptionType GetExceptionAt(int index)
		{
			return new ExceptionType(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Exception", index));
		}

		public ExceptionType GetException()
		{
			return this.SetSamplerState(0, SamplerStateGetExceptionAt(0);
		}

		public ExceptionType Exception
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetExceptionAt(0);
			}
		}

		public void RemoveExceptionAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Exception", index);
		}

		public void RemoveException()
		{
			while (this.SetSamplerState(0, SamplerStateHasException()) this.SetSamplerState(0, SamplerStateRemoveExceptionAt(0);
		}

		public void AddException(ExceptionType newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "Exception", newValue);
		}

		public void InsertExceptionAt(ExceptionType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "Exception", index, newValue);
		}

		public void ReplaceExceptionAt(ExceptionType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "Exception", index, newValue);
		}
		#endregion // Exception accessor methods

		#region Exception collection
        public ExceptionCollection	MyExceptions = new ExceptionCollection( );

        public class ExceptionCollection: IEnumerable
        {
            CapabilityType parent;
            public CapabilityType Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public ExceptionEnumerator GetEnumerator() 
			{
				return new ExceptionEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class ExceptionEnumerator: IEnumerator 
        {
			int nIndex;
			CapabilityType parent;
			public ExceptionEnumerator(CapabilityType par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateExceptionCount );
			}
			public ExceptionType  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetExceptionAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // Exception collection

		#region VendorSpecificCapabilities accessor methods
		public int GetVendorSpecificCapabilitiesMinCount()
		{
			return 0;
		}

		public int VendorSpecificCapabilitiesMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetVendorSpecificCapabilitiesMaxCount()
		{
			return 1;
		}

		public int VendorSpecificCapabilitiesMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetVendorSpecificCapabilitiesCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "VendorSpecificCapabilities");
		}

		public int VendorSpecificCapabilitiesCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "VendorSpecificCapabilities");
			}
		}

		public bool HasVendorSpecificCapabilities()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "VendorSpecificCapabilities");
		}

		public VendorSpecificCapabilitiesType GetVendorSpecificCapabilitiesAt(int index)
		{
			return new VendorSpecificCapabilitiesType(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "VendorSpecificCapabilities", index));
		}

		public VendorSpecificCapabilitiesType GetVendorSpecificCapabilities()
		{
			return this.SetSamplerState(0, SamplerStateGetVendorSpecificCapabilitiesAt(0);
		}

		public VendorSpecificCapabilitiesType VendorSpecificCapabilities
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetVendorSpecificCapabilitiesAt(0);
			}
		}

		public void RemoveVendorSpecificCapabilitiesAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "VendorSpecificCapabilities", index);
		}

		public void RemoveVendorSpecificCapabilities()
		{
			while (this.SetSamplerState(0, SamplerStateHasVendorSpecificCapabilities()) this.SetSamplerState(0, SamplerStateRemoveVendorSpecificCapabilitiesAt(0);
		}

		public void AddVendorSpecificCapabilities(VendorSpecificCapabilitiesType newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "VendorSpecificCapabilities", newValue);
		}

		public void InsertVendorSpecificCapabilitiesAt(VendorSpecificCapabilitiesType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "VendorSpecificCapabilities", index, newValue);
		}

		public void ReplaceVendorSpecificCapabilitiesAt(VendorSpecificCapabilitiesType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "VendorSpecificCapabilities", index, newValue);
		}
		#endregion // VendorSpecificCapabilities accessor methods

		#region VendorSpecificCapabilities collection
        public VendorSpecificCapabilitiesCollection	MyVendorSpecificCapabilitiess = new VendorSpecificCapabilitiesCollection( );

        public class VendorSpecificCapabilitiesCollection: IEnumerable
        {
            CapabilityType parent;
            public CapabilityType Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public VendorSpecificCapabilitiesEnumerator GetEnumerator() 
			{
				return new VendorSpecificCapabilitiesEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class VendorSpecificCapabilitiesEnumerator: IEnumerator 
        {
			int nIndex;
			CapabilityType parent;
			public VendorSpecificCapabilitiesEnumerator(CapabilityType par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateVendorSpecificCapabilitiesCount );
			}
			public VendorSpecificCapabilitiesType  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetVendorSpecificCapabilitiesAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // VendorSpecificCapabilities collection

		#region UserDefinedSymbolization accessor methods
		public int GetUserDefinedSymbolizationMinCount()
		{
			return 0;
		}

		public int UserDefinedSymbolizationMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetUserDefinedSymbolizationMaxCount()
		{
			return 1;
		}

		public int UserDefinedSymbolizationMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetUserDefinedSymbolizationCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "UserDefinedSymbolization");
		}

		public int UserDefinedSymbolizationCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "UserDefinedSymbolization");
			}
		}

		public bool HasUserDefinedSymbolization()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "UserDefinedSymbolization");
		}

		public UserDefinedSymbolizationType GetUserDefinedSymbolizationAt(int index)
		{
			return new UserDefinedSymbolizationType(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "UserDefinedSymbolization", index));
		}

		public UserDefinedSymbolizationType GetUserDefinedSymbolization()
		{
			return this.SetSamplerState(0, SamplerStateGetUserDefinedSymbolizationAt(0);
		}

		public UserDefinedSymbolizationType UserDefinedSymbolization
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetUserDefinedSymbolizationAt(0);
			}
		}

		public void RemoveUserDefinedSymbolizationAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "UserDefinedSymbolization", index);
		}

		public void RemoveUserDefinedSymbolization()
		{
			while (this.SetSamplerState(0, SamplerStateHasUserDefinedSymbolization()) this.SetSamplerState(0, SamplerStateRemoveUserDefinedSymbolizationAt(0);
		}

		public void AddUserDefinedSymbolization(UserDefinedSymbolizationType newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "UserDefinedSymbolization", newValue);
		}

		public void InsertUserDefinedSymbolizationAt(UserDefinedSymbolizationType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "UserDefinedSymbolization", index, newValue);
		}

		public void ReplaceUserDefinedSymbolizationAt(UserDefinedSymbolizationType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "UserDefinedSymbolization", index, newValue);
		}
		#endregion // UserDefinedSymbolization accessor methods

		#region UserDefinedSymbolization collection
        public UserDefinedSymbolizationCollection	MyUserDefinedSymbolizations = new UserDefinedSymbolizationCollection( );

        public class UserDefinedSymbolizationCollection: IEnumerable
        {
            CapabilityType parent;
            public CapabilityType Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public UserDefinedSymbolizationEnumerator GetEnumerator() 
			{
				return new UserDefinedSymbolizationEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class UserDefinedSymbolizationEnumerator: IEnumerator 
        {
			int nIndex;
			CapabilityType parent;
			public UserDefinedSymbolizationEnumerator(CapabilityType par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateUserDefinedSymbolizationCount );
			}
			public UserDefinedSymbolizationType  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetUserDefinedSymbolizationAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // UserDefinedSymbolization collection

		#region Layer accessor methods
		public int GetLayerMinCount()
		{
			return 0;
		}

		public int LayerMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetLayerMaxCount()
		{
			return 1;
		}

		public int LayerMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetLayerCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Layer");
		}

		public int LayerCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Layer");
			}
		}

		public bool HasLayer()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "Layer");
		}

		public LayerType GetLayerAt(int index)
		{
			return new LayerType(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Layer", index));
		}

		public LayerType GetLayer()
		{
			return this.SetSamplerState(0, SamplerStateGetLayerAt(0);
		}

		public LayerType Layer
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetLayerAt(0);
			}
		}

		public void RemoveLayerAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Layer", index);
		}

		public void RemoveLayer()
		{
			while (this.SetSamplerState(0, SamplerStateHasLayer()) this.SetSamplerState(0, SamplerStateRemoveLayerAt(0);
		}

		public void AddLayer(LayerType newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "Layer", newValue);
		}

		public void InsertLayerAt(LayerType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "Layer", index, newValue);
		}

		public void ReplaceLayerAt(LayerType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "Layer", index, newValue);
		}
		#endregion // Layer accessor methods

		#region Layer collection
        public LayerCollection	MyLayers = new LayerCollection( );

        public class LayerCollection: IEnumerable
        {
            CapabilityType parent;
            public CapabilityType Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public LayerEnumerator GetEnumerator() 
			{
				return new LayerEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class LayerEnumerator: IEnumerator 
        {
			int nIndex;
			CapabilityType parent;
			public LayerEnumerator(CapabilityType par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateLayerCount );
			}
			public LayerType  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetLayerAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // Layer collection

        private void SetCollectionParents()
        {
            this.SetSamplerState(0, SamplerStateMyRequests.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyExceptions.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyVendorSpecificCapabilitiess.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyUserDefinedSymbolizations.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyLayers.SetSamplerState(0, SamplerStateParent = this; 
	}
}
}
