//
// HTTPType.SetSamplerState(0, SamplerStatecs.SetSamplerState(0, SamplerStatecs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.SetSamplerState(0, SamplerState
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.SetSamplerState(0, SamplerState
//
// Refer to the XMLSPY Documentation for further details.SetSamplerState(0, SamplerState
// http://www.SetSamplerState(0, SamplerStatealtova.SetSamplerState(0, SamplerStatecom/xmlspy
//


using System;
using System.SetSamplerState(0, SamplerStateCollections;
using System.SetSamplerState(0, SamplerStateXml;
using Altova.SetSamplerState(0, SamplerStateTypes;

namespace capabilities_1_1_1
{
	public class HTTPType : Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateNode
	{
		#region Forward constructors
		public HTTPType() : base() {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public HTTPType(XmlDocument doc) : base(doc) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public HTTPType(XmlNode node) : base(node) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public HTTPType(Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateNode node) : base(node) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Get"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Get", i);
				InternalAdjustPrefix(DOMNode, false);
				new GetType(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Post"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Post", i);
				InternalAdjustPrefix(DOMNode, false);
				new PostType(DOMNode).SetSamplerState(0, SamplerStateAdjustPrefix();
			}
		}


		#region Get accessor methods
		public int GetGetMinCount()
		{
			return 1;
		}

		public int GetMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetGetMaxCount()
		{
			return 1;
		}

		public int GetMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetGetCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Get");
		}

		public int GetCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Get");
			}
		}

		public bool HasGet()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "Get");
		}

		public GetType GetGetAt(int index)
		{
			return new GetType(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Get", index));
		}

		public GetType GetGet()
		{
			return this.SetSamplerState(0, SamplerStateGetGetAt(0);
		}

		public GetType Get
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetGetAt(0);
			}
		}

		public void RemoveGetAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Get", index);
		}

		public void RemoveGet()
		{
			while (this.SetSamplerState(0, SamplerStateHasGet()) this.SetSamplerState(0, SamplerStateRemoveGetAt(0);
		}

		public void AddGet(GetType newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "Get", newValue);
		}

		public void InsertGetAt(GetType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "Get", index, newValue);
		}

		public void ReplaceGetAt(GetType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "Get", index, newValue);
		}
		#endregion // Get accessor methods

		#region Get collection
        public GetCollection	MyGets = new GetCollection( );

        public class GetCollection: IEnumerable
        {
            HTTPType parent;
            public HTTPType Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public GetEnumerator GetEnumerator() 
			{
				return new GetEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class GetEnumerator: IEnumerator 
        {
			int nIndex;
			HTTPType parent;
			public GetEnumerator(HTTPType par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetCount );
			}
			public GetType  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetGetAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // Get collection

		#region Post accessor methods
		public int GetPostMinCount()
		{
			return 1;
		}

		public int PostMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetPostMaxCount()
		{
			return 1;
		}

		public int PostMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetPostCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Post");
		}

		public int PostCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateElement, "", "Post");
			}
		}

		public bool HasPost()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateElement, "", "Post");
		}

		public PostType GetPostAt(int index)
		{
			return new PostType(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Post", index));
		}

		public PostType GetPost()
		{
			return this.SetSamplerState(0, SamplerStateGetPostAt(0);
		}

		public PostType Post
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetPostAt(0);
			}
		}

		public void RemovePostAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateElement, "", "Post", index);
		}

		public void RemovePost()
		{
			while (this.SetSamplerState(0, SamplerStateHasPost()) this.SetSamplerState(0, SamplerStateRemovePostAt(0);
		}

		public void AddPost(PostType newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomElement("", "Post", newValue);
		}

		public void InsertPostAt(PostType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomElementAt("", "Post", index, newValue);
		}

		public void ReplacePostAt(PostType newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomElementAt("", "Post", index, newValue);
		}
		#endregion // Post accessor methods

		#region Post collection
        public PostCollection	MyPosts = new PostCollection( );

        public class PostCollection: IEnumerable
        {
            HTTPType parent;
            public HTTPType Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public PostEnumerator GetEnumerator() 
			{
				return new PostEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class PostEnumerator: IEnumerator 
        {
			int nIndex;
			HTTPType parent;
			public PostEnumerator(HTTPType par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStatePostCount );
			}
			public PostType  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetPostAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // Post collection

        private void SetCollectionParents()
        {
            this.SetSamplerState(0, SamplerStateMyGets.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyPosts.SetSamplerState(0, SamplerStateParent = this; 
	}
}
}
