//
// DimensionType.SetSamplerState(0, SamplerStatecs.SetSamplerState(0, SamplerStatecs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.SetSamplerState(0, SamplerState
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.SetSamplerState(0, SamplerState
//
// Refer to the XMLSPY Documentation for further details.SetSamplerState(0, SamplerState
// http://www.SetSamplerState(0, SamplerStatealtova.SetSamplerState(0, SamplerStatecom/xmlspy
//


using System;
using System.SetSamplerState(0, SamplerStateCollections;
using System.SetSamplerState(0, SamplerStateXml;
using Altova.SetSamplerState(0, SamplerStateTypes;

namespace capabilities_1_3_0.SetSamplerState(0, SamplerStatewms
{
	public class DimensionType : Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateNode
	{
		#region Forward constructors
		public DimensionType() : base() {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public DimensionType(XmlDocument doc) : base(doc) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public DimensionType(XmlNode node) : base(node) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public DimensionType(Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateNode node) : base(node) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		#endregion // Forward constructors

		#region Value accessor methods
		public SchemaString GetValue()
		{
			return new SchemaString(GetDomNodeValue(this.SetSamplerState(0, SamplerStatedomNode));
		}

		public void SetValue(ISchemaType newValue)
		{
			SetDomNodeValue(this.SetSamplerState(0, SamplerStatedomNode, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public SchemaString Value
		{
			get
			{
				return new SchemaString(GetDomNodeValue(this.SetSamplerState(0, SamplerStatedomNode));
			}
			set
			{
				SetDomNodeValue(this.SetSamplerState(0, SamplerStatedomNode, value.SetSamplerState(0, SamplerStateToString());
			}
		}
		#endregion // Value accessor methods

		public override void AdjustPrefix()
		{

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "name"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "name", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "units"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "units", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "unitSymbol"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "unitSymbol", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "default"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "default", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "multipleValues"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "multipleValues", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "nearestValue"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "nearestValue", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "current"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "current", i);
				InternalAdjustPrefix(DOMNode, false);
			}
		}


		#region name accessor methods
		public int GetnameMinCount()
		{
			return 1;
		}

		public int nameMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetnameMaxCount()
		{
			return 1;
		}

		public int nameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetnameCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "name");
		}

		public int nameCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "name");
			}
		}

		public bool Hasname()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "name");
		}

		public SchemaString GetnameAt(int index)
		{
			return new SchemaString(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "name", index)));
		}

		public SchemaString Getname()
		{
			return this.SetSamplerState(0, SamplerStateGetnameAt(0);
		}

		public SchemaString name
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetnameAt(0);
			}
		}

		public void RemovenameAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "name", index);
		}

		public void Removename()
		{
			while (this.SetSamplerState(0, SamplerStateHasname()) this.SetSamplerState(0, SamplerStateRemovenameAt(0);
		}

		public void Addname(SchemaString newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "name", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertnameAt(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "name", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplacenameAt(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "name", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // name accessor methods

		#region name collection
        public nameCollection	Mynames = new nameCollection( );

        public class nameCollection: IEnumerable
        {
            DimensionType parent;
            public DimensionType Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public nameEnumerator GetEnumerator() 
			{
				return new nameEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class nameEnumerator: IEnumerator 
        {
			int nIndex;
			DimensionType parent;
			public nameEnumerator(DimensionType par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStatenameCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetnameAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // name collection

		#region units accessor methods
		public int GetunitsMinCount()
		{
			return 1;
		}

		public int unitsMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetunitsMaxCount()
		{
			return 1;
		}

		public int unitsMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetunitsCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "units");
		}

		public int unitsCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "units");
			}
		}

		public bool Hasunits()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "units");
		}

		public SchemaString GetunitsAt(int index)
		{
			return new SchemaString(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "units", index)));
		}

		public SchemaString Getunits()
		{
			return this.SetSamplerState(0, SamplerStateGetunitsAt(0);
		}

		public SchemaString units
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetunitsAt(0);
			}
		}

		public void RemoveunitsAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "units", index);
		}

		public void Removeunits()
		{
			while (this.SetSamplerState(0, SamplerStateHasunits()) this.SetSamplerState(0, SamplerStateRemoveunitsAt(0);
		}

		public void Addunits(SchemaString newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "units", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertunitsAt(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "units", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceunitsAt(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "units", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // units accessor methods

		#region units collection
        public unitsCollection	Myunitss = new unitsCollection( );

        public class unitsCollection: IEnumerable
        {
            DimensionType parent;
            public DimensionType Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public unitsEnumerator GetEnumerator() 
			{
				return new unitsEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class unitsEnumerator: IEnumerator 
        {
			int nIndex;
			DimensionType parent;
			public unitsEnumerator(DimensionType par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateunitsCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetunitsAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // units collection

		#region unitSymbol accessor methods
		public int GetunitSymbolMinCount()
		{
			return 0;
		}

		public int unitSymbolMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetunitSymbolMaxCount()
		{
			return 1;
		}

		public int unitSymbolMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetunitSymbolCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "unitSymbol");
		}

		public int unitSymbolCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "unitSymbol");
			}
		}

		public bool HasunitSymbol()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "unitSymbol");
		}

		public SchemaString GetunitSymbolAt(int index)
		{
			return new SchemaString(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "unitSymbol", index)));
		}

		public SchemaString GetunitSymbol()
		{
			return this.SetSamplerState(0, SamplerStateGetunitSymbolAt(0);
		}

		public SchemaString unitSymbol
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetunitSymbolAt(0);
			}
		}

		public void RemoveunitSymbolAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "unitSymbol", index);
		}

		public void RemoveunitSymbol()
		{
			while (this.SetSamplerState(0, SamplerStateHasunitSymbol()) this.SetSamplerState(0, SamplerStateRemoveunitSymbolAt(0);
		}

		public void AddunitSymbol(SchemaString newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "unitSymbol", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertunitSymbolAt(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "unitSymbol", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplaceunitSymbolAt(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "unitSymbol", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // unitSymbol accessor methods

		#region unitSymbol collection
        public unitSymbolCollection	MyunitSymbols = new unitSymbolCollection( );

        public class unitSymbolCollection: IEnumerable
        {
            DimensionType parent;
            public DimensionType Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public unitSymbolEnumerator GetEnumerator() 
			{
				return new unitSymbolEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class unitSymbolEnumerator: IEnumerator 
        {
			int nIndex;
			DimensionType parent;
			public unitSymbolEnumerator(DimensionType par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateunitSymbolCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetunitSymbolAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // unitSymbol collection

		#region default2 accessor methods
		public int Getdefault2MinCount()
		{
			return 0;
		}

		public int default2MinCount
		{
			get
			{
				return 0;
			}
		}

		public int Getdefault2MaxCount()
		{
			return 1;
		}

		public int default2MaxCount
		{
			get
			{
				return 1;
			}
		}

		public int Getdefault2Count()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "default");
		}

		public int default2Count
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "default");
			}
		}

		public bool Hasdefault2()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "default");
		}

		public SchemaString Getdefault2At(int index)
		{
			return new SchemaString(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "default", index)));
		}

		public SchemaString Getdefault2()
		{
			return this.SetSamplerState(0, SamplerStateGetdefault2At(0);
		}

		public SchemaString default2
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetdefault2At(0);
			}
		}

		public void Removedefault2At(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "default", index);
		}

		public void Removedefault2()
		{
			while (this.SetSamplerState(0, SamplerStateHasdefault2()) this.SetSamplerState(0, SamplerStateRemovedefault2At(0);
		}

		public void Adddefault2(SchemaString newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "default", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void Insertdefault2At(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "default", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void Replacedefault2At(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "default", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // default2 accessor methods

		#region default2 collection
        public default2Collection	Mydefault2s = new default2Collection( );

        public class default2Collection: IEnumerable
        {
            DimensionType parent;
            public DimensionType Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public default2Enumerator GetEnumerator() 
			{
				return new default2Enumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class default2Enumerator: IEnumerator 
        {
			int nIndex;
			DimensionType parent;
			public default2Enumerator(DimensionType par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStatedefault2Count );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetdefault2At(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // default2 collection

		#region multipleValues accessor methods
		public int GetmultipleValuesMinCount()
		{
			return 0;
		}

		public int multipleValuesMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetmultipleValuesMaxCount()
		{
			return 1;
		}

		public int multipleValuesMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetmultipleValuesCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "multipleValues");
		}

		public int multipleValuesCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "multipleValues");
			}
		}

		public bool HasmultipleValues()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "multipleValues");
		}

		public SchemaBoolean GetmultipleValuesAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "multipleValues", index)));
		}

		public SchemaBoolean GetmultipleValues()
		{
			return this.SetSamplerState(0, SamplerStateGetmultipleValuesAt(0);
		}

		public SchemaBoolean multipleValues
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetmultipleValuesAt(0);
			}
		}

		public void RemovemultipleValuesAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "multipleValues", index);
		}

		public void RemovemultipleValues()
		{
			while (this.SetSamplerState(0, SamplerStateHasmultipleValues()) this.SetSamplerState(0, SamplerStateRemovemultipleValuesAt(0);
		}

		public void AddmultipleValues(SchemaBoolean newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "multipleValues", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertmultipleValuesAt(SchemaBoolean newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "multipleValues", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplacemultipleValuesAt(SchemaBoolean newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "multipleValues", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // multipleValues accessor methods

		#region multipleValues collection
        public multipleValuesCollection	MymultipleValuess = new multipleValuesCollection( );

        public class multipleValuesCollection: IEnumerable
        {
            DimensionType parent;
            public DimensionType Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public multipleValuesEnumerator GetEnumerator() 
			{
				return new multipleValuesEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class multipleValuesEnumerator: IEnumerator 
        {
			int nIndex;
			DimensionType parent;
			public multipleValuesEnumerator(DimensionType par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStatemultipleValuesCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetmultipleValuesAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // multipleValues collection

		#region nearestValue accessor methods
		public int GetnearestValueMinCount()
		{
			return 0;
		}

		public int nearestValueMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetnearestValueMaxCount()
		{
			return 1;
		}

		public int nearestValueMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetnearestValueCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "nearestValue");
		}

		public int nearestValueCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "nearestValue");
			}
		}

		public bool HasnearestValue()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "nearestValue");
		}

		public SchemaBoolean GetnearestValueAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "nearestValue", index)));
		}

		public SchemaBoolean GetnearestValue()
		{
			return this.SetSamplerState(0, SamplerStateGetnearestValueAt(0);
		}

		public SchemaBoolean nearestValue
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetnearestValueAt(0);
			}
		}

		public void RemovenearestValueAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "nearestValue", index);
		}

		public void RemovenearestValue()
		{
			while (this.SetSamplerState(0, SamplerStateHasnearestValue()) this.SetSamplerState(0, SamplerStateRemovenearestValueAt(0);
		}

		public void AddnearestValue(SchemaBoolean newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "nearestValue", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertnearestValueAt(SchemaBoolean newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "nearestValue", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplacenearestValueAt(SchemaBoolean newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "nearestValue", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // nearestValue accessor methods

		#region nearestValue collection
        public nearestValueCollection	MynearestValues = new nearestValueCollection( );

        public class nearestValueCollection: IEnumerable
        {
            DimensionType parent;
            public DimensionType Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public nearestValueEnumerator GetEnumerator() 
			{
				return new nearestValueEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class nearestValueEnumerator: IEnumerator 
        {
			int nIndex;
			DimensionType parent;
			public nearestValueEnumerator(DimensionType par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStatenearestValueCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetnearestValueAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // nearestValue collection

		#region current accessor methods
		public int GetcurrentMinCount()
		{
			return 0;
		}

		public int currentMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetcurrentMaxCount()
		{
			return 1;
		}

		public int currentMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetcurrentCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "current");
		}

		public int currentCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "current");
			}
		}

		public bool Hascurrent()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "current");
		}

		public SchemaBoolean GetcurrentAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "current", index)));
		}

		public SchemaBoolean Getcurrent()
		{
			return this.SetSamplerState(0, SamplerStateGetcurrentAt(0);
		}

		public SchemaBoolean current
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetcurrentAt(0);
			}
		}

		public void RemovecurrentAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "current", index);
		}

		public void Removecurrent()
		{
			while (this.SetSamplerState(0, SamplerStateHascurrent()) this.SetSamplerState(0, SamplerStateRemovecurrentAt(0);
		}

		public void Addcurrent(SchemaBoolean newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "current", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertcurrentAt(SchemaBoolean newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "current", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplacecurrentAt(SchemaBoolean newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "current", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // current accessor methods

		#region current collection
        public currentCollection	Mycurrents = new currentCollection( );

        public class currentCollection: IEnumerable
        {
            DimensionType parent;
            public DimensionType Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public currentEnumerator GetEnumerator() 
			{
				return new currentEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class currentEnumerator: IEnumerator 
        {
			int nIndex;
			DimensionType parent;
			public currentEnumerator(DimensionType par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStatecurrentCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetcurrentAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // current collection

        private void SetCollectionParents()
        {
            this.SetSamplerState(0, SamplerStateMynames.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyunitss.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMyunitSymbols.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMydefault2s.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMymultipleValuess.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMynearestValues.SetSamplerState(0, SamplerStateParent = this;
            this.SetSamplerState(0, SamplerStateMycurrents.SetSamplerState(0, SamplerStateParent = this; 
	}
}
}
