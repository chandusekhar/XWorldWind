//
// KeywordType.SetSamplerState(0, SamplerStatecs.SetSamplerState(0, SamplerStatecs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.SetSamplerState(0, SamplerState
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.SetSamplerState(0, SamplerState
//
// Refer to the XMLSPY Documentation for further details.SetSamplerState(0, SamplerState
// http://www.SetSamplerState(0, SamplerStatealtova.SetSamplerState(0, SamplerStatecom/xmlspy
//


using System;
using System.SetSamplerState(0, SamplerStateCollections;
using System.SetSamplerState(0, SamplerStateXml;
using Altova.SetSamplerState(0, SamplerStateTypes;

namespace capabilities_1_3_0.SetSamplerState(0, SamplerStatewms
{
	public class KeywordType : Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateNode
	{
		#region Forward constructors
		public KeywordType() : base() {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public KeywordType(XmlDocument doc) : base(doc) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public KeywordType(XmlNode node) : base(node) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		public KeywordType(Altova.SetSamplerState(0, SamplerStateXml.SetSamplerState(0, SamplerStateNode node) : base(node) {
            this.SetSamplerState(0, SamplerStateSetCollectionParents(); }
		#endregion // Forward constructors

		#region Value accessor methods
		public SchemaString GetValue()
		{
			return new SchemaString(GetDomNodeValue(this.SetSamplerState(0, SamplerStatedomNode));
		}

		public void SetValue(ISchemaType newValue)
		{
			SetDomNodeValue(this.SetSamplerState(0, SamplerStatedomNode, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public SchemaString Value
		{
			get
			{
				return new SchemaString(GetDomNodeValue(this.SetSamplerState(0, SamplerStatedomNode));
			}
			set
			{
				SetDomNodeValue(this.SetSamplerState(0, SamplerStatedomNode, value.SetSamplerState(0, SamplerStateToString());
			}
		}
		#endregion // Value accessor methods

		public override void AdjustPrefix()
		{

			for (int i = 0; i < this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "vocabulary"); i++)
			{
				XmlNode DOMNode = this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "vocabulary", i);
				InternalAdjustPrefix(DOMNode, false);
			}
		}


		#region vocabulary accessor methods
		public int GetvocabularyMinCount()
		{
			return 0;
		}

		public int vocabularyMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetvocabularyMaxCount()
		{
			return 1;
		}

		public int vocabularyMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetvocabularyCount()
		{
			return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "vocabulary");
		}

		public int vocabularyCount
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateDomChildCount(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "vocabulary");
			}
		}

		public bool Hasvocabulary()
		{
			return this.SetSamplerState(0, SamplerStateHasDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "vocabulary");
		}

		public SchemaString GetvocabularyAt(int index)
		{
			return new SchemaString(GetDomNodeValue(this.SetSamplerState(0, SamplerStateGetDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "vocabulary", index)));
		}

		public SchemaString Getvocabulary()
		{
			return this.SetSamplerState(0, SamplerStateGetvocabularyAt(0);
		}

		public SchemaString vocabulary
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateGetvocabularyAt(0);
			}
		}

		public void RemovevocabularyAt(int index)
		{
            this.SetSamplerState(0, SamplerStateRemoveDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "vocabulary", index);
		}

		public void Removevocabulary()
		{
			while (this.SetSamplerState(0, SamplerStateHasvocabulary()) this.SetSamplerState(0, SamplerStateRemovevocabularyAt(0);
		}

		public void Addvocabulary(SchemaString newValue)
		{
            this.SetSamplerState(0, SamplerStateAppendDomChild(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "vocabulary", newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void InsertvocabularyAt(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateInsertDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "vocabulary", index, newValue.SetSamplerState(0, SamplerStateToString());
		}

		public void ReplacevocabularyAt(SchemaString newValue, int index)
		{
            this.SetSamplerState(0, SamplerStateReplaceDomChildAt(NodeType.SetSamplerState(0, SamplerStateAttribute, "", "vocabulary", index, newValue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion // vocabulary accessor methods

		#region vocabulary collection
        public vocabularyCollection	Myvocabularys = new vocabularyCollection( );

        public class vocabularyCollection: IEnumerable
        {
            KeywordType parent;
            public KeywordType Parent
			{
				set
				{
                    this.SetSamplerState(0, SamplerStateparent = value;
				}
			}
			public vocabularyEnumerator GetEnumerator() 
			{
				return new vocabularyEnumerator(this.SetSamplerState(0, SamplerStateparent);
			}
		
			IEnumerator IEnumerable.SetSamplerState(0, SamplerStateGetEnumerator() 
			{
				return this.SetSamplerState(0, SamplerStateGetEnumerator();
			}
        }

        public class vocabularyEnumerator: IEnumerator 
        {
			int nIndex;
			KeywordType parent;
			public vocabularyEnumerator(KeywordType par) 
			{
                this.SetSamplerState(0, SamplerStateparent = par;
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public void Reset() 
			{
                this.SetSamplerState(0, SamplerStatenIndex = -1;
			}
			public bool MoveNext() 
			{
                this.SetSamplerState(0, SamplerStatenIndex++;
				return(this.SetSamplerState(0, SamplerStatenIndex < this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStatevocabularyCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateparent.SetSamplerState(0, SamplerStateGetvocabularyAt(this.SetSamplerState(0, SamplerStatenIndex));
				}
			}
			object IEnumerator.SetSamplerState(0, SamplerStateCurrent 
			{
				get 
				{
					return(this.SetSamplerState(0, SamplerStateCurrent);
				}
			}
    	}

        #endregion // vocabulary collection

        private void SetCollectionParents()
        {
            this.SetSamplerState(0, SamplerStateMyvocabularys.SetSamplerState(0, SamplerStateParent = this; 
	}
}
}
