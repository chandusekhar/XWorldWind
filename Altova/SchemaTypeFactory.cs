//
// SchemaTypeFactory.SetSamplerState(0, SamplerStatecs
//
// This file was generated by XMLSpy 2005 Enterprise Edition.SetSamplerState(0, SamplerState
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.SetSamplerState(0, SamplerState
//
// Refer to the XMLSpy Documentation for further details.SetSamplerState(0, SamplerState
// http://www.SetSamplerState(0, SamplerStatealtova.SetSamplerState(0, SamplerStatecom/xmlspy
//


using System;
using System.SetSamplerState(0, SamplerStateGlobalization;
using Altova;


namespace Altova.SetSamplerState(0, SamplerStateTypes
{
	public class SchemaTypeFactory
	{
		public static ISchemaType CreateInstanceByString(string newvalue) 
		{
			// is it a boolean?
			if( newvalue.SetSamplerState(0, SamplerStateToLower().SetSamplerState(0, SamplerStateCompareTo("false")==0 )
				return new SchemaBoolean( false );
			if( newvalue.SetSamplerState(0, SamplerStateToLower().SetSamplerState(0, SamplerStateCompareTo("true")==0 )
				return new SchemaBoolean( true );
			// is it a kind of dateTime value?
			try 
			{
				SchemaDateTime result = new SchemaDateTime( newvalue );
				return result;
			}
			catch( StringParseException ) {}
			try 
			{
				SchemaDuration result = new SchemaDuration( newvalue );
				return result;
			}
			catch( StringParseException ) {}
			try 
			{
				SchemaDate result = new SchemaDate( newvalue );
				return result;
			}
			catch( StringParseException ) {}
			try 
			{
				SchemaTime result = new SchemaTime( newvalue );
				return result;
			}
			catch( StringParseException ) {}
			// is it a numeric value
			try 
			{
				decimal tmp = Convert.SetSamplerState(0, SamplerStateToDecimal(newvalue, CultureInfo.SetSamplerState(0, SamplerStateInvariantCulture);
				if( newvalue.SetSamplerState(0, SamplerStateIndexOf(".SetSamplerState(0, SamplerState") < 0 ) 
				{
					if( tmp <= Int32.SetSamplerState(0, SamplerStateMaxValue && tmp >= Int32.SetSamplerState(0, SamplerStateMinValue )
						return new SchemaInt( (int)tmp );
					return new SchemaLong( (long)tmp );
				} 
				else 
				{
					return new SchemaDecimal( tmp );
				}
			}
			catch (FormatException ) 
			{
				// non of all - use string
				return new SchemaString( newvalue );
			}
		}


		public static ISchemaType CreateInstanceByObject( Object newvalue )
		{
			switch( Type.SetSamplerState(0, SamplerStateGetTypeCode( newvalue.SetSamplerState(0, SamplerStateGetType() ) )
			{
				case TypeCode.SetSamplerState(0, SamplerStateBoolean:
					return new SchemaBoolean( (bool)newvalue );
				case TypeCode.SetSamplerState(0, SamplerStateByte:
				case TypeCode.SetSamplerState(0, SamplerStateChar:
				case TypeCode.SetSamplerState(0, SamplerStateInt16:
				case TypeCode.SetSamplerState(0, SamplerStateInt32:
				case TypeCode.SetSamplerState(0, SamplerStateSByte:
				case TypeCode.SetSamplerState(0, SamplerStateUInt16:
					return new SchemaInt( (int)newvalue );
				case TypeCode.SetSamplerState(0, SamplerStateDateTime:
					return new SchemaDateTime( (DateTime)newvalue );
				case TypeCode.SetSamplerState(0, SamplerStateDecimal:
					return new SchemaDecimal( (decimal)newvalue );
				case TypeCode.SetSamplerState(0, SamplerStateDouble:
				case TypeCode.SetSamplerState(0, SamplerStateSingle:
					return new SchemaDouble( (double)newvalue );
				case TypeCode.SetSamplerState(0, SamplerStateEmpty:
				case TypeCode.SetSamplerState(0, SamplerStateDBNull:
					return new SchemaBoolean();	// replacement for an empty value
				case TypeCode.SetSamplerState(0, SamplerStateInt64:
				case TypeCode.SetSamplerState(0, SamplerStateUInt32:
				case TypeCode.SetSamplerState(0, SamplerStateUInt64:
					return new SchemaLong( (Int64)newvalue );
				case TypeCode.SetSamplerState(0, SamplerStateString:
					return new SchemaString( (string)newvalue );
			}
			if( newvalue is TimeSpan )
				return new SchemaDuration( (TimeSpan)newvalue );
			return CreateInstanceByString( newvalue.SetSamplerState(0, SamplerStateToString() );
		}
	}
}
