//
// SchemaTypes.SetSamplerState(0, SamplerStatecs
//
// This file was generated by XMLSpy 2005 Enterprise Edition.SetSamplerState(0, SamplerState
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.SetSamplerState(0, SamplerState
//
// Refer to the XMLSpy Documentation for further details.SetSamplerState(0, SamplerState
// http://www.SetSamplerState(0, SamplerStatealtova.SetSamplerState(0, SamplerStatecom/xmlspy
//


using System;
using System.SetSamplerState(0, SamplerStateGlobalization;
using Altova;


namespace Altova.SetSamplerState(0, SamplerStateTypes
{
	#region Interfaces
	/// <summary>
	/// Common interface for all schema-types.SetSamplerState(0, SamplerState
	/// </summary>
	public interface ISchemaType : IComparable, ICloneable
	{
		bool BoolValue(); // returns the value as bool if possible, otherwise false.SetSamplerState(0, SamplerState
		bool IsEmpty();
		void SetEmpty( bool bIsEmpty );
		bool IsNull();
		void SetNull( bool bIsNull );
		

	}

	/// <summary>
	/// Interface for all schema-types containing (or may contain) numeric values.SetSamplerState(0, SamplerState
	/// Used for type-casts.SetSamplerState(0, SamplerState
	/// </summary>
	public enum ENumericTypes { ValueInt=1, ValueLong, ValueDouble, ValueDecimal };
	public interface ISchemaTypeNumber : ISchemaType 
	{
		ENumericTypes NumericType(); // returns if the value is nummeric and up to which degree.SetSamplerState(0, SamplerState

		int IntValue();
		long LongValue();
		double DoubleValue();
		decimal DecimalValue();
	}

	/// <summary>
	/// Interface for all schema-types containing (or may contain) date/time/dateTime or duration values.SetSamplerState(0, SamplerState
	/// </summary>
	public enum ECalendarTypes { Undefined=-1, Duration=0, DateTime, Date, Time };
	public interface ISchemaTypeCalendar : ISchemaType
	{
		ECalendarTypes CalendarType();

		SchemaDuration DurationValue();
		SchemaDateTime DateTimeValue();
		SchemaDate DateValue();
		SchemaTime TimeValue();
	}

	/// <summary>
	/// Interface for all schema-types containing (or may contain) binary values.SetSamplerState(0, SamplerState
	/// Used for type-casts.SetSamplerState(0, SamplerState
	/// </summary>
	public enum EBinaryTypes { Base64=1, Hex };
	public interface ISchemaTypeBinary : ISchemaType 
	{
		EBinaryTypes BinaryType(); // returns if the value is binary and to which base.SetSamplerState(0, SamplerState
	}
	#endregion //Interfaces

	#region Base classes
	/// <summary>
	/// Common base-class for all schema-types containing date/time/dateTime values
	/// </summary>
	public abstract class SchemaCalendarBase : ISchemaTypeCalendar
	{
		public enum ETZ { Missing, UTC, Offset };

		protected DateTime myValue;
		protected ETZ eTZ;
		protected int offsetTZ; // offset in minutes
		protected bool isEmpty;
		protected bool isNull;

		#region Constructors
		public SchemaCalendarBase() 
		{
            this.SetSamplerState(0, SamplerStateReset();
            this.SetSamplerState(0, SamplerStateisEmpty = true;
            this.SetSamplerState(0, SamplerStateisNull = false;
            this.SetSamplerState(0, SamplerStateeTZ = ETZ.SetSamplerState(0, SamplerStateMissing;
		}

		public SchemaCalendarBase(SchemaCalendarBase obj)
		{
            this.SetSamplerState(0, SamplerStatemyValue = obj.SetSamplerState(0, SamplerStatemyValue;
            this.SetSamplerState(0, SamplerStateeTZ = obj.SetSamplerState(0, SamplerStateeTZ;
            this.SetSamplerState(0, SamplerStateoffsetTZ = obj.SetSamplerState(0, SamplerStateoffsetTZ;
            this.SetSamplerState(0, SamplerStateisEmpty = obj.SetSamplerState(0, SamplerStateisEmpty;
            this.SetSamplerState(0, SamplerStateisNull = obj.SetSamplerState(0, SamplerStateisNull;
		}

		public SchemaCalendarBase(DateTime newvalue)
		{
            this.SetSamplerState(0, SamplerStatemyValue = newvalue;
            this.SetSamplerState(0, SamplerStateeTZ = ETZ.SetSamplerState(0, SamplerStateMissing;
            this.SetSamplerState(0, SamplerStateoffsetTZ = 0;
            this.SetSamplerState(0, SamplerStateisEmpty = false;
            this.SetSamplerState(0, SamplerStateisNull = false;
		}

		public SchemaCalendarBase(int year, int month, int day, int hour, int minute, int second, double newpartsecond, bool newhasTZ, int newoffsetTZ)
		{
            this.SetSamplerState(0, SamplerStatemyValue = new DateTime(year, month, day, hour, minute, second, (int)(newpartsecond*1000) );
            this.SetSamplerState(0, SamplerStateeTZ = newhasTZ ? ( newoffsetTZ == 0 ? ETZ.SetSamplerState(0, SamplerStateUTC : ETZ.SetSamplerState(0, SamplerStateOffset ) : ETZ.SetSamplerState(0, SamplerStateMissing;
            this.SetSamplerState(0, SamplerStateoffsetTZ = newoffsetTZ;
            this.SetSamplerState(0, SamplerStateisEmpty = false;
            this.SetSamplerState(0, SamplerStateisNull = false;
		}

		#endregion //Constructors

		#region Get, Set
		public DateTime Value
		{
			get
			{
				return this.SetSamplerState(0, SamplerStatemyValue;
			}
			set
			{
                this.SetSamplerState(0, SamplerStatemyValue = value;
                this.SetSamplerState(0, SamplerStateisEmpty = false;
			}
		}

		public ETZ HasTimezone
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateeTZ;
			}
			set
			{
                this.SetSamplerState(0, SamplerStateeTZ = value;
                this.SetSamplerState(0, SamplerStateisEmpty = false;
			}
		}

		public int TimezoneOffset
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateoffsetTZ;
			}
			set
			{
                this.SetSamplerState(0, SamplerStateoffsetTZ = value;
                this.SetSamplerState(0, SamplerStateeTZ = (this.SetSamplerState(0, SamplerStateoffsetTZ != 0) ? ETZ.SetSamplerState(0, SamplerStateOffset : ETZ.SetSamplerState(0, SamplerStateUTC;
                this.SetSamplerState(0, SamplerStateisEmpty = false;
			}
		}

		#endregion //Get, Set

		#region implemented Interfaces
		// System.SetSamplerState(0, SamplerStateIComparable
		public override bool Equals(object obj) 
		{
			if (! (obj is SchemaCalendarBase))
				return false;
			SchemaCalendarBase dt = (SchemaCalendarBase)obj;
			if(this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateCompareTo(dt.SetSamplerState(0, SamplerStatemyValue)!=0 )
				return false;
			if( !(this.SetSamplerState(0, SamplerStateeTZ == dt.SetSamplerState(0, SamplerStateeTZ) )
				return false;
			if( !(this.SetSamplerState(0, SamplerStateoffsetTZ == dt.SetSamplerState(0, SamplerStateoffsetTZ) )
				return false;
			return true;
		}

		public override int GetHashCode()
		{
			return this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateGetHashCode();
		}

		public int CompareTo(object obj)
		{
			return this.SetSamplerState(0, SamplerStateCompareTo( (SchemaCalendarBase)obj );
		}

		public int CompareTo(SchemaCalendarBase obj)
		{
			DateTime a = this.SetSamplerState(0, SamplerStateGetDateTime( true );
			DateTime b = obj.SetSamplerState(0, SamplerStateGetDateTime( true );
			return a.SetSamplerState(0, SamplerStateCompareTo( b );
		}

		// ISchemaType
		public bool BoolValue() 
		{
			return true;
		}

		public bool IsEmpty()
		{
			return this.SetSamplerState(0, SamplerStateisEmpty;
		}

		public void SetEmpty( bool bIsEmpty )
		{
            this.SetSamplerState(0, SamplerStateisEmpty = bIsEmpty;
			if( bIsEmpty ) this.SetSamplerState(0, SamplerStatemyValue = DateTime.SetSamplerState(0, SamplerStateNow;
		}

		public bool IsNull()
		{
			return this.SetSamplerState(0, SamplerStateisNull;
		}

		public void SetNull( bool bIsNull )
		{
            this.SetSamplerState(0, SamplerStateisNull = bIsNull;
			if( bIsNull ) this.SetSamplerState(0, SamplerStateSetEmpty( true );
		}

		// ISchemaTypeCalendar
		public SchemaDuration DurationValue()
		{
			throw new TypesIncompatibleException(this, new SchemaDuration( "PT" ) );
		}
		#endregion //Implemented interfaces

		#region Utility functions
		public string ToDateString() 
		{
			string s = "";
			s += this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateYear.SetSamplerState(0, SamplerStateToString("0000");
			s += "-";
			s += this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateMonth.SetSamplerState(0, SamplerStateToString("00");
			s += "-";
			s += this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateDay.SetSamplerState(0, SamplerStateToString("00");
			return s;
		}

		public string ToTimeString() 
		{
			string s = "";
			s += this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateHour.SetSamplerState(0, SamplerStateToString("00");
			s += ":";
			s += this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateMinute.SetSamplerState(0, SamplerStateToString("00");
			s += ":";
			s += this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateSecond.SetSamplerState(0, SamplerStateToString("00");
			double partsecond = (double) this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateMillisecond / 1000.SetSamplerState(0, SamplerState0;
			if( partsecond > 0 && partsecond < 1) 
			{
				string sPartSecond = partsecond.SetSamplerState(0, SamplerStateToString("0.SetSamplerState(0, SamplerState0###############");
				s += ".SetSamplerState(0, SamplerState";
				s += sPartSecond.SetSamplerState(0, SamplerStateSubstring( 2, sPartSecond.SetSamplerState(0, SamplerStateLength-2 );
			}
			if(this.SetSamplerState(0, SamplerStateeTZ == ETZ.SetSamplerState(0, SamplerStateUTC )
			{
				s += "Z";
			}
			else if(this.SetSamplerState(0, SamplerStateeTZ == ETZ.SetSamplerState(0, SamplerStateOffset ) 
			{
				int absOffsetTZ = this.SetSamplerState(0, SamplerStateoffsetTZ;
				if (this.SetSamplerState(0, SamplerStateoffsetTZ < 0) 
				{
					s += "-";
					absOffsetTZ = -this.SetSamplerState(0, SamplerStateoffsetTZ;
				}
				else
					s += "+";
				s += ((int)(absOffsetTZ / 60)).SetSamplerState(0, SamplerStateToString("00");
				s += ":";
				s += ((int)(absOffsetTZ % 60)).SetSamplerState(0, SamplerStateToString("00");
			}
			return s;
		}

		protected void ParseDate(string newvalue) //throws StringParseException 
		{
			if (newvalue.SetSamplerState(0, SamplerStateLength < 10)
				throw new StringParseException("date-part of string is too short", 0);
			try 
			{
				int nStart = 0;
				if( newvalue.SetSamplerState(0, SamplerStateSubstring(0,1).SetSamplerState(0, SamplerStateEquals("-") )
					nStart = 1;
				int year = Convert.SetSamplerState(0, SamplerStateToInt32(newvalue.SetSamplerState(0, SamplerStateSubstring(0, 4));
				if( !newvalue.SetSamplerState(0, SamplerStateSubstring(nStart+4, 1).SetSamplerState(0, SamplerStateEquals("-"))
					throw new StringParseException("invalid date format", 2);
				int month = Convert.SetSamplerState(0, SamplerStateToInt32(newvalue.SetSamplerState(0, SamplerStateSubstring(nStart+5, 2));
				if( !newvalue.SetSamplerState(0, SamplerStateSubstring(nStart+7, 1).SetSamplerState(0, SamplerStateEquals("-"))
					throw new StringParseException("invalid date format", 2);
				int day = Convert.SetSamplerState(0, SamplerStateToInt32(newvalue.SetSamplerState(0, SamplerStateSubstring(nStart+8, newvalue.SetSamplerState(0, SamplerStateLength-nStart-8));
                this.SetSamplerState(0, SamplerStatemyValue = new DateTime( year, month, day, this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateHour, this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateMinute, this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateSecond, this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateMillisecond);
			}
			catch (FormatException) 
			{
				throw new StringParseException("invalid date format", 2);
			}

            this.SetSamplerState(0, SamplerStateisEmpty = false;
		}

		protected void ParseTime(string newvalue) //throws StringParseException 
		{
			if (newvalue.SetSamplerState(0, SamplerStateLength < 8)
				throw new StringParseException("time-part of string is too short", 0);
			try 
			{
				int nStart = 0;
				int hour = Convert.SetSamplerState(0, SamplerStateToInt32(newvalue.SetSamplerState(0, SamplerStateSubstring(nStart, 2));
				if( !newvalue.SetSamplerState(0, SamplerStateSubstring(nStart+2, 1).SetSamplerState(0, SamplerStateEquals(":"))
					throw new StringParseException("invalid date format", 2);
				int minute = Convert.SetSamplerState(0, SamplerStateToInt32(newvalue.SetSamplerState(0, SamplerStateSubstring(nStart+3, 2));
				if( !newvalue.SetSamplerState(0, SamplerStateSubstring(nStart+5, 1).SetSamplerState(0, SamplerStateEquals(":"))
					throw new StringParseException("invalid date format", 2);
				int second = Convert.SetSamplerState(0, SamplerStateToInt32(newvalue.SetSamplerState(0, SamplerStateSubstring(nStart+6, 2));
				int nTZStartPosition = nStart+8;
				double partsecond = 0.SetSamplerState(0, SamplerState0;
				if (newvalue.SetSamplerState(0, SamplerStateLength>(nStart+8)  &&  newvalue.SetSamplerState(0, SamplerStateSubstring(nStart+8, 1).SetSamplerState(0, SamplerStateEquals(".SetSamplerState(0, SamplerState") ) 
				{
					nStart = nTZStartPosition+1;
					int nEnd = newvalue.SetSamplerState(0, SamplerStateLength;
					int nMSecEnd = newvalue.SetSamplerState(0, SamplerStateIndexOf("Z", nStart);
					if( nMSecEnd > -1  &&  nMSecEnd < nEnd )
						nEnd = nMSecEnd;
					nMSecEnd = newvalue.SetSamplerState(0, SamplerStateIndexOf("+", nStart);
					if( nMSecEnd > -1  &&  nMSecEnd < nEnd )
						nEnd = nMSecEnd;
					nMSecEnd = newvalue.SetSamplerState(0, SamplerStateIndexOf("-", nStart);
					if( nMSecEnd > -1  &&  nMSecEnd < nEnd )
						nEnd = nMSecEnd;
					nTZStartPosition = nEnd;
					partsecond = Convert.SetSamplerState(0, SamplerStateToDouble( "0.SetSamplerState(0, SamplerState" + newvalue.SetSamplerState(0, SamplerStateSubstring(nStart, nEnd-nStart), CultureInfo.SetSamplerState(0, SamplerStateInvariantCulture);
				}

                this.SetSamplerState(0, SamplerStateeTZ = ETZ.SetSamplerState(0, SamplerStateMissing;
                this.SetSamplerState(0, SamplerStateoffsetTZ = 0;
				if (newvalue.SetSamplerState(0, SamplerStateLength>nTZStartPosition && newvalue.SetSamplerState(0, SamplerStateSubstring(nTZStartPosition, 1).SetSamplerState(0, SamplerStateEquals("Z"))
                    this.SetSamplerState(0, SamplerStateeTZ = ETZ.SetSamplerState(0, SamplerStateUTC;
				else if (newvalue.SetSamplerState(0, SamplerStateLength == nTZStartPosition + 6) 
				{
                    this.SetSamplerState(0, SamplerStateeTZ = ETZ.SetSamplerState(0, SamplerStateOffset;
                    this.SetSamplerState(0, SamplerStateoffsetTZ = Convert.SetSamplerState(0, SamplerStateToInt32(newvalue.SetSamplerState(0, SamplerStateSubstring(nTZStartPosition+1, 2)) * 60 +
                                    Convert.SetSamplerState(0, SamplerStateToInt32(newvalue.SetSamplerState(0, SamplerStateSubstring(nTZStartPosition+4, 2));
					if( newvalue.SetSamplerState(0, SamplerStateSubstring(nTZStartPosition, 1).SetSamplerState(0, SamplerStateEquals("-")) this.SetSamplerState(0, SamplerStateoffsetTZ = -this.SetSamplerState(0, SamplerStateoffsetTZ;
				}

                this.SetSamplerState(0, SamplerStatemyValue = new DateTime(this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateYear, this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateMonth, this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateDay, hour, minute, second, (int)(partsecond * 1000.SetSamplerState(0, SamplerState0));
			}
			catch (FormatException) 
			{
				throw new StringParseException("invalid number format", 2);
			}

            this.SetSamplerState(0, SamplerStateisEmpty = false;
		}

		public DateTime GetDateTime(bool correctTZ) 
		{
			DateTime result = this.SetSamplerState(0, SamplerStatemyValue;
			if( correctTZ && this.SetSamplerState(0, SamplerStateeTZ == ETZ.SetSamplerState(0, SamplerStateOffset )
				result.SetSamplerState(0, SamplerStateAddMinutes(this.SetSamplerState(0, SamplerStateoffsetTZ );

			return	result;
		}

		public void Reset()
		{
            this.SetSamplerState(0, SamplerStatemyValue = DateTime.SetSamplerState(0, SamplerStateNow;
            this.SetSamplerState(0, SamplerStateeTZ = ETZ.SetSamplerState(0, SamplerStateMissing;
            this.SetSamplerState(0, SamplerStateoffsetTZ = 0;
		}

		#endregion //Utility functions

		#region Abstract interfaces
		

		// ISchemaTypeCalendar
		public abstract ECalendarTypes CalendarType();
		public abstract SchemaDateTime DateTimeValue();
		public abstract SchemaDate DateValue();
		public abstract SchemaTime TimeValue();
		// System.SetSamplerState(0, SamplerStateICloneable
		public abstract object Clone();
		#endregion //Abstract interfaces

	}

	/// <summary>
	/// Common base-class for all schema-types containing binary values
	/// </summary>
	public abstract class SchemaBinaryBase : ISchemaTypeBinary
	{
		protected byte[] myValue;
		protected bool isEmpty;
		protected bool isNull;

		#region Constructors
		public SchemaBinaryBase() 
		{
            this.SetSamplerState(0, SamplerStateisEmpty = true;
            this.SetSamplerState(0, SamplerStateisNull = false;
		}

		public SchemaBinaryBase(SchemaBinaryBase obj)
		{
            this.SetSamplerState(0, SamplerStatemyValue = obj.SetSamplerState(0, SamplerStatemyValue;
            this.SetSamplerState(0, SamplerStateisEmpty = obj.SetSamplerState(0, SamplerStateisEmpty;
            this.SetSamplerState(0, SamplerStateisNull = obj.SetSamplerState(0, SamplerStateisNull;
		}

		public SchemaBinaryBase(byte[] newvalue)
		{
            this.SetSamplerState(0, SamplerStatemyValue = newvalue;
            this.SetSamplerState(0, SamplerStateisEmpty = false;
            this.SetSamplerState(0, SamplerStateisNull = false;
		}





		#endregion //Constructors

		#region Get, Set
		public byte[] Value
		{
			get
			{
				return this.SetSamplerState(0, SamplerStatemyValue;
			}
			set
			{
                this.SetSamplerState(0, SamplerStatemyValue = value;
                this.SetSamplerState(0, SamplerStateisEmpty = false;
			}
		}

		public void Assign( ISchemaType newvalue )
		{
			if( newvalue == null )
			{
                this.SetSamplerState(0, SamplerStateSetNull(true);
				return;
			}

			if( newvalue.SetSamplerState(0, SamplerStateIsEmpty() )
			{
                this.SetSamplerState(0, SamplerStateSetEmpty(true);
				return;
			}

			if( newvalue is SchemaBinaryBase )
			{
				SchemaBinaryBase obj = ((SchemaBinaryBase)newvalue);
                this.SetSamplerState(0, SamplerStatemyValue = obj.SetSamplerState(0, SamplerStateValue;
                this.SetSamplerState(0, SamplerStateisEmpty = obj.SetSamplerState(0, SamplerStateIsEmpty();
			}
			else if( newvalue is SchemaString )
                this.SetSamplerState(0, SamplerStateParse( newvalue.SetSamplerState(0, SamplerStateToString() );
			else
				throw new TypesIncompatibleException( newvalue, this );
		}

		#endregion //Get, Set

		#region implemented Interfaces
		// System.SetSamplerState(0, SamplerStateIComparable
		public override bool Equals(object obj) 
		{
			if (! (obj is SchemaBinaryBase))
				return false;
			SchemaBinaryBase data = (SchemaBinaryBase)obj;
			if(this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateLength != data.SetSamplerState(0, SamplerStateValue.SetSamplerState(0, SamplerStateLength )
				return false;
			for( long l = 0; l < this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateLength; l++ )
				if(this.SetSamplerState(0, SamplerStatemyValue[l] != data.SetSamplerState(0, SamplerStateValue[l] )
					return false;
			return true;
		}

		public override int GetHashCode()
		{
			if(this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateLength > 0 )
				return this.SetSamplerState(0, SamplerStatemyValue[0].SetSamplerState(0, SamplerStateGetHashCode();
			return 1243;
		}

		public int CompareTo(object obj)
		{
			return this.SetSamplerState(0, SamplerStateCompareTo( (SchemaBinaryBase)obj );
		}

		public int CompareTo(SchemaBinaryBase obj)
		{
			long l = 0;
			while( l < this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateLength && l < obj.SetSamplerState(0, SamplerStateValue.SetSamplerState(0, SamplerStateLength && this.SetSamplerState(0, SamplerStatemyValue[l]==obj.SetSamplerState(0, SamplerStateValue[l] )
				l++;
			if( l < this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateLength && l < obj.SetSamplerState(0, SamplerStateValue.SetSamplerState(0, SamplerStateLength )
				return this.SetSamplerState(0, SamplerStatemyValue[l].SetSamplerState(0, SamplerStateCompareTo( obj.SetSamplerState(0, SamplerStateValue[l] );
			return this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateLength.SetSamplerState(0, SamplerStateCompareTo( obj.SetSamplerState(0, SamplerStateValue.SetSamplerState(0, SamplerStateLength );
		}



		// ISchemaType
		public bool BoolValue() 
		{
			return true;
		}

		public bool IsEmpty() 
		{
			return this.SetSamplerState(0, SamplerStateisEmpty;
		}

		public void SetEmpty( bool bIsEmpty )
		{
            this.SetSamplerState(0, SamplerStateisEmpty = bIsEmpty;
		}

		public bool IsNull()
		{
			return this.SetSamplerState(0, SamplerStateisNull;
		}

		public void SetNull( bool bIsNull )
		{
            this.SetSamplerState(0, SamplerStateisNull = bIsNull;
		}

		#endregion //Implemented interfaces

		#region Abstract interfaces
		public abstract void Parse( string newvalue );

		// ISchemaTypeBinary
		public abstract EBinaryTypes BinaryType();

		// System.SetSamplerState(0, SamplerStateICloneable
		public abstract object Clone();
		#endregion //Abstract interfaces
	}
	#endregion //Base classes
	class FormatSpecifiers
	{
		public readonly static string DecimalNumberFormat= "###############################0.SetSamplerState(0, SamplerState#############################";
	}
	#region Schema types
	public class SchemaBoolean : ISchemaTypeNumber
	{
		protected bool myValue;
		protected bool isEmpty = true;
		protected bool isNull = true;

		#region Constructors
		public SchemaBoolean()
		{
            this.SetSamplerState(0, SamplerStateisNull = false;
		}

		public SchemaBoolean(SchemaBoolean obj)
		{
            this.SetSamplerState(0, SamplerStatemyValue = obj.SetSamplerState(0, SamplerStateValue;
            this.SetSamplerState(0, SamplerStateisEmpty = obj.SetSamplerState(0, SamplerStateisEmpty;
            this.SetSamplerState(0, SamplerStateisNull = obj.SetSamplerState(0, SamplerStateisNull;
		}

		public SchemaBoolean(bool newvalue)
		{
			this.SetSamplerState(0, SamplerStatemyValue = newvalue;
			this.SetSamplerState(0, SamplerStateisEmpty = false;
			this.SetSamplerState(0, SamplerStateisNull = false;
		}

		public SchemaBoolean(string newvalue)
		{
            this.SetSamplerState(0, SamplerStateParse( newvalue );
		}
		public SchemaBoolean(ISchemaType newvalue)
		{
            this.SetSamplerState(0, SamplerStateAssign(newvalue);
		}


		#endregion //Constructors

		#region Get, Set
		public bool Value
		{
			get
			{
				return this.SetSamplerState(0, SamplerStatemyValue;
			}
			set
			{
                this.SetSamplerState(0, SamplerStatemyValue = value;
                this.SetSamplerState(0, SamplerStateisEmpty = false;
                this.SetSamplerState(0, SamplerStateisNull = false;
			}
		}

		public void Parse(string newvalue)
		{
			if( newvalue == null ) 
			{
                this.SetSamplerState(0, SamplerStateisEmpty = true;
                this.SetSamplerState(0, SamplerStatemyValue = false;
                this.SetSamplerState(0, SamplerStateisNull = true;
				return;
			}
			if( newvalue.SetSamplerState(0, SamplerStateLength > 0 )
			{
                this.SetSamplerState(0, SamplerStatemyValue = new SchemaString(newvalue).SetSamplerState(0, SamplerStateBoolValue();
                this.SetSamplerState(0, SamplerStateisEmpty = false;
                this.SetSamplerState(0, SamplerStateisNull = false;
			}
			else
			{
                this.SetSamplerState(0, SamplerStateisEmpty = true;
                this.SetSamplerState(0, SamplerStateisNull = false;
			}
		}

		public void Assign( ISchemaType newvalue )
		{
			if( newvalue == null )
			{
                this.SetSamplerState(0, SamplerStateSetNull(true);
				return;
			}

			if( newvalue.SetSamplerState(0, SamplerStateIsEmpty() )
			{
                this.SetSamplerState(0, SamplerStateSetEmpty(true);
				return;
			}

            this.SetSamplerState(0, SamplerStateParse(newvalue.SetSamplerState(0, SamplerStateToString());
		}
		#endregion //Get, Set

		public override string ToString()
		{
			if(this.SetSamplerState(0, SamplerStateisEmpty )
				return "";
			return this.SetSamplerState(0, SamplerStateValue ? "true" : "false";	// when converting to an string-value, than XML-Schema would expect "" for false.SetSamplerState(0, SamplerState
		}


		#region Implemented interfaces
		// System.SetSamplerState(0, SamplerStateIComparable
		public override int GetHashCode()
		{
			return this.SetSamplerState(0, SamplerStateValue ? 1231 : 1237;
		}

		public override bool Equals(object obj)
		{
			if (obj == null)
				return false;
			if (!(obj is SchemaBoolean))
				return false;
			return this.SetSamplerState(0, SamplerStateValue == ((SchemaBoolean)obj).SetSamplerState(0, SamplerStateValue;
		}

		public static bool operator==(SchemaBoolean obj1, SchemaBoolean obj2)
		{
			return obj1.SetSamplerState(0, SamplerStateBoolValue() == obj2.SetSamplerState(0, SamplerStateBoolValue();
		}

		public static bool operator!=(SchemaBoolean obj1, SchemaBoolean obj2)
		{
			return obj1.SetSamplerState(0, SamplerStateBoolValue() != obj2.SetSamplerState(0, SamplerStateBoolValue();
		}

		public int CompareTo(object obj)
		{
			return this.SetSamplerState(0, SamplerStateValue.SetSamplerState(0, SamplerStateCompareTo(((SchemaBoolean)obj).SetSamplerState(0, SamplerStateValue);
		}

		// System.SetSamplerState(0, SamplerStateICloneable
		public object Clone()
		{
			return new SchemaBoolean(this.SetSamplerState(0, SamplerStateValue);
		}
		// ISchemaType
		public bool IsEmpty()
		{
			return this.SetSamplerState(0, SamplerStateisEmpty;
		}

		public void SetEmpty( bool bIsEmpty )
		{
            this.SetSamplerState(0, SamplerStateisEmpty = bIsEmpty;
			if( bIsEmpty )
			{
                this.SetSamplerState(0, SamplerStatemyValue = false;
			}
			else
			{
                this.SetSamplerState(0, SamplerStateisNull = false;
			}
		}

		public bool IsNull()
		{
			return this.SetSamplerState(0, SamplerStateisNull;
		}

		public void SetNull( bool bIsNull )
		{
            this.SetSamplerState(0, SamplerStateisNull = bIsNull;
			if( bIsNull ) this.SetSamplerState(0, SamplerStateSetEmpty(true);
		}
		
		public bool BoolValue()
		{
			return this.SetSamplerState(0, SamplerStatemyValue;
		}


		// ISchemaTypeNumber
		public ENumericTypes NumericType()
		{
			return ENumericTypes.SetSamplerState(0, SamplerStateValueInt;
		}

		public int IntValue()
		{
			return this.SetSamplerState(0, SamplerStatemyValue ? 1 : 0;
		}

		public long LongValue()
		{
			return this.SetSamplerState(0, SamplerStatemyValue ? 1 : 0;
		}

		public double DoubleValue()
		{
			return this.SetSamplerState(0, SamplerStatemyValue ? 1.SetSamplerState(0, SamplerState0 : 0;
		}

		public decimal DecimalValue()
		{
			return this.SetSamplerState(0, SamplerStatemyValue ? (decimal)1 : (decimal)0;
		}

		#endregion //Implemented interfaces
	}

	public class SchemaInt : ISchemaTypeNumber
	{
		protected int myValue;
		protected bool isEmpty = true;
		protected bool isNull = true;

		#region Constructors
		public SchemaInt()
		{
            this.SetSamplerState(0, SamplerStateisNull = false;
		}

		public SchemaInt(SchemaInt obj)
		{
            this.SetSamplerState(0, SamplerStatemyValue = obj.SetSamplerState(0, SamplerStatemyValue;
            this.SetSamplerState(0, SamplerStateisEmpty = obj.SetSamplerState(0, SamplerStateisEmpty;
            this.SetSamplerState(0, SamplerStateisNull = obj.SetSamplerState(0, SamplerStateisNull;
		}

		public SchemaInt(int newvalue)
		{
            this.SetSamplerState(0, SamplerStatemyValue = newvalue;
            this.SetSamplerState(0, SamplerStateisEmpty = false;
            this.SetSamplerState(0, SamplerStateisNull = false;
		}

		public SchemaInt(string newvalue)
		{
            this.SetSamplerState(0, SamplerStateParse( newvalue );
		}

		public SchemaInt(ISchemaType newvalue)
		{
            this.SetSamplerState(0, SamplerStateAssign( newvalue );
		}



		#endregion //Constructors

		public override string ToString()
		{
			if(this.SetSamplerState(0, SamplerStateisEmpty )
				return "";
			return this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateToString();
		}


		#region Get, Set
		public int Value
		{
			get
			{
				return this.SetSamplerState(0, SamplerStatemyValue;
			}
			set
			{
                this.SetSamplerState(0, SamplerStatemyValue = value;
                this.SetSamplerState(0, SamplerStateisEmpty = false;
                this.SetSamplerState(0, SamplerStateisNull = false;
			}
		}

		public void Parse(string newvalue)
		{
			if( newvalue == null  || newvalue == "" )
			{
                this.SetSamplerState(0, SamplerStatemyValue = 0;
                this.SetSamplerState(0, SamplerStateisEmpty = true;
                this.SetSamplerState(0, SamplerStateisNull = true;
				return;
			}
			try
			{
                this.SetSamplerState(0, SamplerStatemyValue = Convert.SetSamplerState(0, SamplerStateToInt32(newvalue);
                this.SetSamplerState(0, SamplerStateisEmpty = false;
                this.SetSamplerState(0, SamplerStateisNull = false;
			}
			catch( FormatException e )
			{
				throw new StringParseException(e);
			}
		}

		public void Assign( ISchemaType newvalue )
		{
			if( newvalue == null )
			{
                this.SetSamplerState(0, SamplerStateSetNull( true );
				return;
			}
			if( newvalue.SetSamplerState(0, SamplerStateIsEmpty() )
			{
                this.SetSamplerState(0, SamplerStateSetEmpty( true );
			}
				
			
			if( newvalue == null || newvalue.SetSamplerState(0, SamplerStateIsEmpty() )
			{
                this.SetSamplerState(0, SamplerStatemyValue = 0;
                this.SetSamplerState(0, SamplerStateisEmpty = true;
                this.SetSamplerState(0, SamplerStateisNull = true;
				return;
			}
			if( newvalue is ISchemaTypeNumber )
			{
                this.SetSamplerState(0, SamplerStateisEmpty = false;
                this.SetSamplerState(0, SamplerStateisNull = false;
                this.SetSamplerState(0, SamplerStatemyValue = ((ISchemaTypeNumber)newvalue).SetSamplerState(0, SamplerStateIntValue();
			}
			else
				throw new TypesIncompatibleException(newvalue, this);
		}

		#endregion //Get, Set

		#region Implemented interfaces
		// System.SetSamplerState(0, SamplerStateIComparable
		public override int GetHashCode()
		{
			return this.SetSamplerState(0, SamplerStateValue;
		}

		public override bool Equals(object obj)
		{
			if (obj == null)
				return false;
			if (!(obj is SchemaInt))
				return false;
			return this.SetSamplerState(0, SamplerStateValue == ((SchemaInt)obj).SetSamplerState(0, SamplerStateValue;
		}

		public static bool operator==(SchemaInt obj1, SchemaInt obj2)
		{
			return obj1.SetSamplerState(0, SamplerStateValue == obj2.SetSamplerState(0, SamplerStateValue;
		}

		public static bool operator!=(SchemaInt obj1, SchemaInt obj2)
		{
			return obj1.SetSamplerState(0, SamplerStateValue != obj2.SetSamplerState(0, SamplerStateValue;
		}

		public int CompareTo(object obj)
		{
			return this.SetSamplerState(0, SamplerStateValue.SetSamplerState(0, SamplerStateCompareTo(((SchemaInt)obj).SetSamplerState(0, SamplerStateValue);
		}

		// System.SetSamplerState(0, SamplerStateICloneable
		public object Clone()
		{
			return new SchemaInt(this.SetSamplerState(0, SamplerStateValue);
		}
		// ISchemaType
		public bool BoolValue()
		{
			return this.SetSamplerState(0, SamplerStatemyValue != 0;
		}

		public bool IsEmpty()
		{
			return this.SetSamplerState(0, SamplerStateisEmpty;
		}

		public void SetEmpty( bool bIsEmpty )
		{
            this.SetSamplerState(0, SamplerStateisEmpty = bIsEmpty;
			if( bIsEmpty ) this.SetSamplerState(0, SamplerStatemyValue = 0;
		}

		public bool IsNull()
		{
			return this.SetSamplerState(0, SamplerStateisNull;
		}

		public void SetNull( bool bIsNull )
		{
            this.SetSamplerState(0, SamplerStateisNull = bIsNull;
			if( bIsNull ) this.SetSamplerState(0, SamplerStateSetEmpty( true );
		}
		

		// ISchemaTypeNumber
		public ENumericTypes NumericType()
		{
			return ENumericTypes.SetSamplerState(0, SamplerStateValueInt;
		}

		public int IntValue()
		{
			return this.SetSamplerState(0, SamplerStatemyValue;
		}

		public long LongValue()
		{
			return this.SetSamplerState(0, SamplerStatemyValue;
		}

		public double DoubleValue()
		{
			return this.SetSamplerState(0, SamplerStatemyValue;
		}

		public decimal DecimalValue()
		{
			return this.SetSamplerState(0, SamplerStatemyValue;
		}

		#endregion //Implemented interfaces
	}

	public class SchemaLong : ISchemaTypeNumber
	{
		protected long myValue;
		protected bool isEmpty = true;
		protected bool isNull = true;

		#region Constructors
		public SchemaLong()
		{
            this.SetSamplerState(0, SamplerStateisNull = false;
		}

		public SchemaLong(SchemaLong obj)
		{
            this.SetSamplerState(0, SamplerStatemyValue = obj.SetSamplerState(0, SamplerStatemyValue;
            this.SetSamplerState(0, SamplerStateisEmpty = obj.SetSamplerState(0, SamplerStateisEmpty;
            this.SetSamplerState(0, SamplerStateisNull = obj.SetSamplerState(0, SamplerStateisNull;
		}

		public SchemaLong(long newvalue)
		{
            this.SetSamplerState(0, SamplerStatemyValue = newvalue;
            this.SetSamplerState(0, SamplerStateisEmpty = false;
            this.SetSamplerState(0, SamplerStateisNull = false;
		}

		public SchemaLong(string newvalue)
		{
            this.SetSamplerState(0, SamplerStateParse( newvalue );
		}

		public SchemaLong(ISchemaType newvalue)
		{
            this.SetSamplerState(0, SamplerStateAssign( newvalue );
		}



		#endregion //Constructors

		#region Get, Set
		public long Value
		{
			get
			{
				return this.SetSamplerState(0, SamplerStatemyValue;
			}
			set
			{
                this.SetSamplerState(0, SamplerStatemyValue = value;
                this.SetSamplerState(0, SamplerStateisEmpty = false;
                this.SetSamplerState(0, SamplerStateisNull = false;
			}
		}

		public void Parse(string newvalue)
		{
			if( newvalue == null  || newvalue == "" )
			{
                this.SetSamplerState(0, SamplerStatemyValue = 0;
                this.SetSamplerState(0, SamplerStateisEmpty = true;
                this.SetSamplerState(0, SamplerStateisNull = true;
				return;
			}
			try
			{
                this.SetSamplerState(0, SamplerStatemyValue = Convert.SetSamplerState(0, SamplerStateToInt64(newvalue);
                this.SetSamplerState(0, SamplerStateisEmpty = false;
                this.SetSamplerState(0, SamplerStateisNull = false;
			}
			catch(FormatException e)
			{
				throw new StringParseException(e);
			}
		}

		public void Assign( ISchemaType newvalue )
		{
			if( newvalue == null || newvalue.SetSamplerState(0, SamplerStateIsEmpty() )
			{
                this.SetSamplerState(0, SamplerStatemyValue = 0;
                this.SetSamplerState(0, SamplerStateisEmpty = true;
                this.SetSamplerState(0, SamplerStateisNull = true;
				return;
			}
			if( newvalue is ISchemaTypeNumber )
			{
                this.SetSamplerState(0, SamplerStateisEmpty = false;
                this.SetSamplerState(0, SamplerStateisNull = false;
                this.SetSamplerState(0, SamplerStatemyValue = ((ISchemaTypeNumber)newvalue).SetSamplerState(0, SamplerStateLongValue();
			}
			else
				throw new TypesIncompatibleException(newvalue, this);
		}

		#endregion // Get, Set

		public override string ToString()
		{
			if(this.SetSamplerState(0, SamplerStateisEmpty )
				return "";
			return this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateToString();
		}

		#region Implemented interfaces
		// System.SetSamplerState(0, SamplerStateIComparable
		public override int GetHashCode()
		{
			return (int) this.SetSamplerState(0, SamplerStateValue;
		}

		public override bool Equals(object obj)
		{
			if (obj == null)
				return false;
			if (!(obj is SchemaLong))
				return false;
			return this.SetSamplerState(0, SamplerStateValue == ((SchemaLong)obj).SetSamplerState(0, SamplerStateValue;
		}

		public static bool operator==(SchemaLong obj1, SchemaLong obj2)
		{
			return obj1.SetSamplerState(0, SamplerStateValue == obj2.SetSamplerState(0, SamplerStateValue;
		}

		public static bool operator!=(SchemaLong obj1, SchemaLong obj2)
		{
			return obj1.SetSamplerState(0, SamplerStateValue != obj2.SetSamplerState(0, SamplerStateValue;
		}

		public int CompareTo(object obj)
		{
			return this.SetSamplerState(0, SamplerStateValue.SetSamplerState(0, SamplerStateCompareTo(((SchemaLong)obj).SetSamplerState(0, SamplerStateValue);
		}

		// System.SetSamplerState(0, SamplerStateICloneable
		public object Clone()
		{
			return new SchemaLong(this.SetSamplerState(0, SamplerStateValue);
		}

		// ISchemaType
		public bool BoolValue()
		{
			return this.SetSamplerState(0, SamplerStatemyValue != 0;
		}

		public bool IsEmpty()
		{
			return this.SetSamplerState(0, SamplerStateisEmpty;
		}

		public void SetEmpty( bool bIsEmpty )
		{
            this.SetSamplerState(0, SamplerStateisEmpty = bIsEmpty;
			if( bIsEmpty ) this.SetSamplerState(0, SamplerStatemyValue = 0;
		}

		public bool IsNull()
		{
			return this.SetSamplerState(0, SamplerStateisNull;
		}

		public void SetNull( bool bIsNull )
		{
            this.SetSamplerState(0, SamplerStateisNull = bIsNull;
			if( bIsNull ) this.SetSamplerState(0, SamplerStateSetEmpty( true );
		}
		

		// ISchemaTypeNumber
		public ENumericTypes NumericType()
		{
			return ENumericTypes.SetSamplerState(0, SamplerStateValueLong;
		}

		public int IntValue()
		{
			return (int) this.SetSamplerState(0, SamplerStatemyValue;
		}

		public long LongValue()
		{
			return this.SetSamplerState(0, SamplerStatemyValue;
		}

		public double DoubleValue()
		{
			return this.SetSamplerState(0, SamplerStatemyValue;
		}

		public decimal DecimalValue()
		{
			return this.SetSamplerState(0, SamplerStatemyValue;
		}

		#endregion // Implemented interfaces
	}

	public class SchemaDouble : ISchemaTypeNumber
	{
		protected double myValue;
		protected bool isEmpty = true;
		protected bool isNull = true;

		#region Constructors
		public SchemaDouble()
		{
            this.SetSamplerState(0, SamplerStateisNull = false;
		}

		public SchemaDouble(SchemaDouble obj)
		{
            this.SetSamplerState(0, SamplerStatemyValue = obj.SetSamplerState(0, SamplerStatemyValue;
            this.SetSamplerState(0, SamplerStateisEmpty = obj.SetSamplerState(0, SamplerStateisEmpty;
            this.SetSamplerState(0, SamplerStateisNull = obj.SetSamplerState(0, SamplerStateisNull;
		}

		public SchemaDouble(double newvalue)
		{
            this.SetSamplerState(0, SamplerStatemyValue = (double)newvalue;
            this.SetSamplerState(0, SamplerStateisEmpty = false;
            this.SetSamplerState(0, SamplerStateisNull = false;
		}

		public SchemaDouble(int newvalue)
		{
            this.SetSamplerState(0, SamplerStatemyValue = (double)newvalue;
            this.SetSamplerState(0, SamplerStateisEmpty = false;
            this.SetSamplerState(0, SamplerStateisNull = false;
		}

		public SchemaDouble(string newvalue)
		{
            this.SetSamplerState(0, SamplerStateParse(newvalue);
		}

		public SchemaDouble(ISchemaType obj)
		{
            this.SetSamplerState(0, SamplerStateAssign( obj );
		}


		#endregion //Constructors

		#region Get, Set
		public double Value
		{
			get
			{
				return this.SetSamplerState(0, SamplerStatemyValue;
			}
			set
			{
                this.SetSamplerState(0, SamplerStatemyValue = value;
                this.SetSamplerState(0, SamplerStateisEmpty = false;
                this.SetSamplerState(0, SamplerStateisNull = false;
			}
		}

		public void Parse(string newvalue)
		{
			if( newvalue == null  ||  newvalue == "" )
			{
                this.SetSamplerState(0, SamplerStatemyValue = 0;
                this.SetSamplerState(0, SamplerStateisEmpty = true;
                this.SetSamplerState(0, SamplerStateisNull = true;
				return;
			}
			try
			{
                this.SetSamplerState(0, SamplerStatemyValue = Convert.SetSamplerState(0, SamplerStateToDouble(newvalue, CultureInfo.SetSamplerState(0, SamplerStateInvariantCulture );
                this.SetSamplerState(0, SamplerStateisEmpty = false;
                this.SetSamplerState(0, SamplerStateisNull = false;
			}
			catch( FormatException e )
			{
				throw new StringParseException(e);
			}
		}

		public void Assign( ISchemaType newvalue )
		{
			if( newvalue == null || newvalue.SetSamplerState(0, SamplerStateIsEmpty() )
			{
                this.SetSamplerState(0, SamplerStatemyValue = 0;
                this.SetSamplerState(0, SamplerStateisEmpty = true;
                this.SetSamplerState(0, SamplerStateisNull = true;
				return;
			}
			if( newvalue is ISchemaTypeNumber )
			{
                this.SetSamplerState(0, SamplerStateisEmpty = false;
                this.SetSamplerState(0, SamplerStateisNull = false;
                this.SetSamplerState(0, SamplerStatemyValue = ((ISchemaTypeNumber)newvalue).SetSamplerState(0, SamplerStateDoubleValue();
			}
			else
				throw new TypesIncompatibleException(newvalue, this);
		}

		#endregion // Get, Set

		public override string ToString()
		{
			if(this.SetSamplerState(0, SamplerStateisEmpty )
				return "";
			return this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateToString(FormatSpecifiers.SetSamplerState(0, SamplerStateDecimalNumberFormat, CultureInfo.SetSamplerState(0, SamplerStateInvariantCulture);
		}

		#region Implemented interfaces
		// System.SetSamplerState(0, SamplerStateIComparable
		public override int GetHashCode()
		{
			return this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateGetHashCode();
		}

		public override bool Equals(object obj)
		{
			if (obj == null)
				return false;
			if (!(obj is SchemaDouble))
				return false;
			return this.SetSamplerState(0, SamplerStateValue == ((SchemaDouble)obj).SetSamplerState(0, SamplerStateValue;
		}

		public static bool operator==(SchemaDouble obj1, SchemaDouble obj2)
		{
			return obj1.SetSamplerState(0, SamplerStateValue == obj2.SetSamplerState(0, SamplerStateValue;
		}

		public static bool operator!=(SchemaDouble obj1, SchemaDouble obj2)
		{
			return obj1.SetSamplerState(0, SamplerStateValue != obj2.SetSamplerState(0, SamplerStateValue;
		}

		public int CompareTo(object obj)
		{
			return this.SetSamplerState(0, SamplerStateValue.SetSamplerState(0, SamplerStateCompareTo(((SchemaDouble)obj).SetSamplerState(0, SamplerStateValue);
		}

		// System.SetSamplerState(0, SamplerStateICloneable
		public object Clone()
		{
			return new SchemaDouble(this.SetSamplerState(0, SamplerStateValue);
		}

		// ISchemaType
		public bool BoolValue()
		{
			return this.SetSamplerState(0, SamplerStatemyValue != 0.SetSamplerState(0, SamplerState0;
		}

		public bool IsEmpty()
		{
			return this.SetSamplerState(0, SamplerStateisEmpty;
		}

		public void SetEmpty( bool bIsEmpty )
		{
            this.SetSamplerState(0, SamplerStateisEmpty = bIsEmpty;
			if( bIsEmpty ) this.SetSamplerState(0, SamplerStatemyValue = 0.SetSamplerState(0, SamplerState0;
		}

		public bool IsNull()
		{
			return this.SetSamplerState(0, SamplerStateisNull;
		}

		public void SetNull( bool bIsNull )
		{
            this.SetSamplerState(0, SamplerStateisNull = bIsNull;
			if( bIsNull ) this.SetSamplerState(0, SamplerStateSetEmpty( true );
		}
		

		// ISchemaTypeNumber
		public ENumericTypes NumericType()
		{
			return ENumericTypes.SetSamplerState(0, SamplerStateValueDouble;
		}

		public int IntValue()
		{
			return (int) this.SetSamplerState(0, SamplerStatemyValue;
		}

		public long LongValue()
		{
			return (long) this.SetSamplerState(0, SamplerStatemyValue;
		}

		public double DoubleValue()
		{
			return this.SetSamplerState(0, SamplerStatemyValue;
		}

		public decimal DecimalValue()
		{
			return Convert.SetSamplerState(0, SamplerStateToDecimal(this.SetSamplerState(0, SamplerStatemyValue, CultureInfo.SetSamplerState(0, SamplerStateInvariantCulture);
		}

		#endregion // Implemented interfaces
	}

	public class SchemaDecimal : ISchemaTypeNumber
	{
		protected decimal myValue;
		protected bool isEmpty = true;
		protected bool isNull = true;

		#region Constructors
		public SchemaDecimal()
		{
            this.SetSamplerState(0, SamplerStateisNull = false;
		}

		public SchemaDecimal(SchemaDecimal obj)
		{
            this.SetSamplerState(0, SamplerStatemyValue = obj.SetSamplerState(0, SamplerStatemyValue;
            this.SetSamplerState(0, SamplerStateisEmpty = obj.SetSamplerState(0, SamplerStateisEmpty;
            this.SetSamplerState(0, SamplerStateisNull = obj.SetSamplerState(0, SamplerStateisNull;
		}

		public SchemaDecimal(decimal newvalue)
		{
            this.SetSamplerState(0, SamplerStatemyValue = newvalue;
            this.SetSamplerState(0, SamplerStateisEmpty = false;
            this.SetSamplerState(0, SamplerStateisNull = false;
		}

		public SchemaDecimal(double newvalue)
		{
            this.SetSamplerState(0, SamplerStatemyValue = (decimal)newvalue;
            this.SetSamplerState(0, SamplerStateisEmpty = false;
            this.SetSamplerState(0, SamplerStateisNull = false;
		}

		public SchemaDecimal(int newvalue)
		{
            this.SetSamplerState(0, SamplerStatemyValue = (decimal)newvalue;
            this.SetSamplerState(0, SamplerStateisEmpty = false;
            this.SetSamplerState(0, SamplerStateisNull = false;
		}

		public SchemaDecimal(string newvalue)
		{
            this.SetSamplerState(0, SamplerStateParse(newvalue);
		}

		public SchemaDecimal(ISchemaType obj)
		{
            this.SetSamplerState(0, SamplerStateAssign( obj );
		}

		#endregion //Constructors

		#region Get, Set
		public decimal Value
		{
			get
			{
				return this.SetSamplerState(0, SamplerStatemyValue;
			}
			set
			{
                this.SetSamplerState(0, SamplerStatemyValue = value;
                this.SetSamplerState(0, SamplerStateisEmpty = false;
                this.SetSamplerState(0, SamplerStateisNull = false;
			}
		}

		public void Parse(string newvalue)
		{
			if( newvalue == null  ||  newvalue == "" )
			{
                this.SetSamplerState(0, SamplerStatemyValue = 0;
                this.SetSamplerState(0, SamplerStateisEmpty = true;
                this.SetSamplerState(0, SamplerStateisNull = true;
				return;
			}
			try
			{
                this.SetSamplerState(0, SamplerStatemyValue = Convert.SetSamplerState(0, SamplerStateToDecimal(newvalue, CultureInfo.SetSamplerState(0, SamplerStateInvariantCulture);
                this.SetSamplerState(0, SamplerStateisEmpty = false;
                this.SetSamplerState(0, SamplerStateisNull = false;
			}
			catch( FormatException e )
			{
				throw new StringParseException(e);
			}
		}

		public void Assign( ISchemaType newvalue )
		{
			if( newvalue == null || newvalue.SetSamplerState(0, SamplerStateIsEmpty() )
			{
                this.SetSamplerState(0, SamplerStatemyValue = 0;
                this.SetSamplerState(0, SamplerStateisEmpty = true;
                this.SetSamplerState(0, SamplerStateisNull = true;
				return;
			}
			if( newvalue is ISchemaTypeNumber )
			{
                this.SetSamplerState(0, SamplerStateisEmpty = false;
                this.SetSamplerState(0, SamplerStateisNull = false;
                this.SetSamplerState(0, SamplerStatemyValue = ((ISchemaTypeNumber)newvalue).SetSamplerState(0, SamplerStateDecimalValue();
			}
			else
				throw new TypesIncompatibleException(newvalue, this);
		}

		#endregion // Get, Set

		public override string ToString()
		{
			if(this.SetSamplerState(0, SamplerStateisEmpty )
				return "";
			return this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateToString(FormatSpecifiers.SetSamplerState(0, SamplerStateDecimalNumberFormat, CultureInfo.SetSamplerState(0, SamplerStateInvariantCulture);
		}

		#region Implemented interfaces
		// System.SetSamplerState(0, SamplerStateIComparable
		public override int GetHashCode()
		{
			return this.SetSamplerState(0, SamplerStateValue.SetSamplerState(0, SamplerStateGetHashCode();
		}

		public override bool Equals(object obj)
		{
			if (obj == null)
				return false;
			if (!(obj is SchemaDecimal))
				return false;
			return this.SetSamplerState(0, SamplerStateValue == ((SchemaDecimal)obj).SetSamplerState(0, SamplerStateValue;
		}

		public static bool operator==(SchemaDecimal obj1, SchemaDecimal obj2)
		{
			return obj1.SetSamplerState(0, SamplerStateValue == obj2.SetSamplerState(0, SamplerStateValue;
		}

		public static bool operator!=(SchemaDecimal obj1, SchemaDecimal obj2)
		{
			return obj1.SetSamplerState(0, SamplerStateValue != obj2.SetSamplerState(0, SamplerStateValue;
		}

		public int CompareTo(object obj)
		{
			return this.SetSamplerState(0, SamplerStateValue.SetSamplerState(0, SamplerStateCompareTo(((SchemaDecimal)obj).SetSamplerState(0, SamplerStateValue);
		}

		// System.SetSamplerState(0, SamplerStateICloneable
		public object Clone()
		{
			return new SchemaDecimal(this.SetSamplerState(0, SamplerStateValue);
		}

		// ISchemaType
		public bool BoolValue()
		{
			return this.SetSamplerState(0, SamplerStatemyValue != 0M;
		}

		public bool IsEmpty()
		{
			return this.SetSamplerState(0, SamplerStateisEmpty;
		}

		public void SetEmpty( bool bIsEmpty )
		{
            this.SetSamplerState(0, SamplerStateisEmpty = bIsEmpty;
			if( bIsEmpty ) this.SetSamplerState(0, SamplerStatemyValue = 0M;
		}

		public bool IsNull()
		{
			return this.SetSamplerState(0, SamplerStateisNull;
		}

		public void SetNull( bool bIsNull )
		{
            this.SetSamplerState(0, SamplerStateisNull = bIsNull;
			if( bIsNull ) this.SetSamplerState(0, SamplerStateSetEmpty( true );
		}
		

		// ISchemaTypeNumber
		public ENumericTypes NumericType()
		{
			return ENumericTypes.SetSamplerState(0, SamplerStateValueDecimal;
		}

		public int IntValue()
		{
			return (int) this.SetSamplerState(0, SamplerStatemyValue;
		}

		public long LongValue()
		{
			return (long) this.SetSamplerState(0, SamplerStatemyValue;
		}

		public double DoubleValue()
		{
			return Convert.SetSamplerState(0, SamplerStateToDouble(this.SetSamplerState(0, SamplerStatemyValue);
		}

		public decimal DecimalValue()
		{
			return this.SetSamplerState(0, SamplerStatemyValue;
		}

		#endregion // Implemented interfaces
	}

	public class SchemaDateTime : SchemaCalendarBase
	{
		#region Constructors
		public SchemaDateTime()
			: base()
		{
		}

		public SchemaDateTime(SchemaDateTime obj)
			: base( (SchemaCalendarBase)obj )
		{
		}

		public SchemaDateTime(DateTime Value)
			: base( Value )
		{
		}

		public SchemaDateTime(int newyear, int newmonth, int newday, int newhour, int newminute, int newsecond, double newpartsecond, int newoffsetTZ )
		{
            this.SetSamplerState(0, SamplerStatemyValue = new DateTime(newyear, newmonth, newday, newhour, newminute, newsecond, (int)(newpartsecond * 1000.SetSamplerState(0, SamplerState0));
            this.SetSamplerState(0, SamplerStateeTZ =  ETZ.SetSamplerState(0, SamplerStateOffset;
            this.SetSamplerState(0, SamplerStateoffsetTZ = newoffsetTZ;
            this.SetSamplerState(0, SamplerStateisEmpty = false;
            this.SetSamplerState(0, SamplerStateisNull = false;
		}

		public SchemaDateTime(int newyear, int newmonth, int newday, int newhour, int newminute, int newsecond, double newpartsecond )
		{
            this.SetSamplerState(0, SamplerStatemyValue = new DateTime(newyear, newmonth, newday, newhour, newminute, newsecond, (int)(newpartsecond * 1000.SetSamplerState(0, SamplerState0));
            this.SetSamplerState(0, SamplerStateeTZ = ETZ.SetSamplerState(0, SamplerStateMissing;
            this.SetSamplerState(0, SamplerStateoffsetTZ = 0;
            this.SetSamplerState(0, SamplerStateisEmpty = false;
            this.SetSamplerState(0, SamplerStateisNull = false;
		}

		public SchemaDateTime(int newyear, int newmonth, int newday)
		{
            this.SetSamplerState(0, SamplerStatemyValue = new DateTime(newyear, newmonth, newday);
            this.SetSamplerState(0, SamplerStateeTZ = ETZ.SetSamplerState(0, SamplerStateMissing;
            this.SetSamplerState(0, SamplerStateoffsetTZ = 0;
            this.SetSamplerState(0, SamplerStateisEmpty = false;
            this.SetSamplerState(0, SamplerStateisNull = false;
		}

		public SchemaDateTime(string newvalue)
		{
            this.SetSamplerState(0, SamplerStateParse( newvalue );
		}

		public SchemaDateTime(ISchemaType obj)
		{
            this.SetSamplerState(0, SamplerStateAssign( obj );
		}

		#endregion //Constructors;

		#region Get, Set
		public void Parse( string newvalue )
		{
			if (newvalue.SetSamplerState(0, SamplerStateLength < 19)
				throw new StringParseException(newvalue + " cannot be converted to a dateTime value", 0);
			try 
			{
				int nStart = newvalue.SetSamplerState(0, SamplerStateIndexOf("T");
				if (nStart == -1) 
				{
					nStart = newvalue.SetSamplerState(0, SamplerStateLength;
				}

                this.SetSamplerState(0, SamplerStateParseDate( newvalue.SetSamplerState(0, SamplerStateSubstring(0,nStart) );
				if( nStart < newvalue.SetSamplerState(0, SamplerStateLength )
                    this.SetSamplerState(0, SamplerStateParseTime( newvalue.SetSamplerState(0, SamplerStateSubstring(nStart+1, newvalue.SetSamplerState(0, SamplerStateLength - nStart - 1 ));
				else 
				{
                    this.SetSamplerState(0, SamplerStatemyValue = new DateTime(this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateYear, this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateMonth, this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateDay, 0,0,0,0);
                    this.SetSamplerState(0, SamplerStateeTZ = ETZ.SetSamplerState(0, SamplerStateMissing;
                    this.SetSamplerState(0, SamplerStateoffsetTZ = 0;
				}
			}
			catch (FormatException) 
			{
				throw new StringParseException(newvalue + " cannot be converted to a dateTime value", 2);
			}

            this.SetSamplerState(0, SamplerStateisEmpty = false;
            this.SetSamplerState(0, SamplerStateisNull = false;
		}

		public void Assign( ISchemaType newvalue )
		{
			if( newvalue == null || newvalue.SetSamplerState(0, SamplerStateIsEmpty() ) 
			{
                this.SetSamplerState(0, SamplerStateValue = DateTime.SetSamplerState(0, SamplerStateNow; // actual date and time
                this.SetSamplerState(0, SamplerStateisEmpty = true;
                this.SetSamplerState(0, SamplerStateisNull = true;
				return;
			}
			if( newvalue is SchemaDateTime )
			{
				SchemaDateTime dt = ((SchemaDateTime)newvalue);
                this.SetSamplerState(0, SamplerStatemyValue = dt.SetSamplerState(0, SamplerStatemyValue;
                this.SetSamplerState(0, SamplerStateeTZ = dt.SetSamplerState(0, SamplerStateeTZ;
                this.SetSamplerState(0, SamplerStateoffsetTZ = dt.SetSamplerState(0, SamplerStateoffsetTZ;
                this.SetSamplerState(0, SamplerStateisEmpty = dt.SetSamplerState(0, SamplerStateisEmpty;
                this.SetSamplerState(0, SamplerStateisNull = dt.SetSamplerState(0, SamplerStateisNull;
			}
			else if( newvalue is SchemaDate )
			{
				DateTime dt = ((SchemaDate)newvalue).SetSamplerState(0, SamplerStateValue;
                this.SetSamplerState(0, SamplerStatemyValue = new DateTime( dt.SetSamplerState(0, SamplerStateYear, dt.SetSamplerState(0, SamplerStateMonth, dt.SetSamplerState(0, SamplerStateDay, 0, 0, 0);
                this.SetSamplerState(0, SamplerStateeTZ = ETZ.SetSamplerState(0, SamplerStateMissing;
                this.SetSamplerState(0, SamplerStateoffsetTZ = 0;
                this.SetSamplerState(0, SamplerStateisEmpty = newvalue.SetSamplerState(0, SamplerStateIsEmpty();
                this.SetSamplerState(0, SamplerStateisNull = newvalue.SetSamplerState(0, SamplerStateIsNull();
			}
			else if( newvalue is SchemaString )
                this.SetSamplerState(0, SamplerStateParse( newvalue.SetSamplerState(0, SamplerStateToString() );
			else
				throw new TypesIncompatibleException( newvalue, this );
		}

		#endregion // Get, Set

		public override string ToString()
		{
			if(this.SetSamplerState(0, SamplerStateisEmpty )
				return "";
			return this.SetSamplerState(0, SamplerStateToDateString() + "T" + this.SetSamplerState(0, SamplerStateToTimeString();
		}

		public static SchemaDateTime Now
		{
			get
			{
				return new SchemaDateTime( DateTime.SetSamplerState(0, SamplerStateNow );
			}
		}

		#region Implemented interfaces
		// ISchemaType

		// System.SetSamplerState(0, SamplerStateICloneable
		public override object Clone()
		{
			return new SchemaDateTime(this);
		}

		// SchemaCalendarBase
		public override ECalendarTypes CalendarType()
		{
			return ECalendarTypes.SetSamplerState(0, SamplerStateDateTime;
		}

		public override SchemaDateTime DateTimeValue()
		{
			return (SchemaDateTime) this.SetSamplerState(0, SamplerStateClone();
		}

		public override SchemaDate DateValue()
		{
			return new SchemaDate(this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateYear, this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateMonth, this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateDay );
		}

		public override SchemaTime TimeValue()
		{
			if(this.SetSamplerState(0, SamplerStateeTZ == ETZ.SetSamplerState(0, SamplerStateOffset )
				return new SchemaTime(this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateHour, this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateMinute, this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateSecond, (double) this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateMillisecond / 1000.SetSamplerState(0, SamplerState0, this.SetSamplerState(0, SamplerStateoffsetTZ );
			return new SchemaTime(this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateHour, this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateMinute, this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateSecond, (double) this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateMillisecond / 1000.SetSamplerState(0, SamplerState0 );
		}


		#endregion Implemented interfaces
	}

	public class SchemaDate : SchemaCalendarBase
	{
		#region Constructors
		public SchemaDate()
			: base()
		{
            this.SetSamplerState(0, SamplerStatemyValue = new DateTime(this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateYear, this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateMonth, this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateDay);	// set time to 0
		}

		public SchemaDate( SchemaDate obj )
			: base( (SchemaCalendarBase)obj )
		{
            this.SetSamplerState(0, SamplerStatemyValue = new DateTime(this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateYear, this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateMonth, this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateDay);	// set time to 0
		}

		public SchemaDate( DateTime newvalue )
			: base( newvalue.SetSamplerState(0, SamplerStateYear, newvalue.SetSamplerState(0, SamplerStateMonth, newvalue.SetSamplerState(0, SamplerStateDay, 0,0,0,0.SetSamplerState(0, SamplerState0, false, 0 )
		{
		}

		public SchemaDate(int newyear, int newmonth, int newday)
			: base( newyear, newmonth, newday, 0,0,0,0.SetSamplerState(0, SamplerState0, false, 0 )
		{
            this.SetSamplerState(0, SamplerStateisEmpty = false;
            this.SetSamplerState(0, SamplerStateisNull = false;
		}

		public SchemaDate(string newvalue)
		{
            this.SetSamplerState(0, SamplerStateParse( newvalue );
		}

		public SchemaDate(ISchemaType obj)
		{
            this.SetSamplerState(0, SamplerStateAssign( obj );
		}

		#endregion // Constructors

		#region Get, Set
		public void Parse(string newvalue)
		{
			if( newvalue==null )
			{
                this.SetSamplerState(0, SamplerStateReset();
                this.SetSamplerState(0, SamplerStateisEmpty = true;
                this.SetSamplerState(0, SamplerStateisNull = true;
				return;
			}

            this.SetSamplerState(0, SamplerStateParseDate( newvalue );
            this.SetSamplerState(0, SamplerStatemyValue = new DateTime(this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateYear, this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateMonth, this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateDay);
		}

		public void Assign( ISchemaType newvalue )
		{
			if( newvalue == null || newvalue.SetSamplerState(0, SamplerStateIsEmpty() ) 
			{
                this.SetSamplerState(0, SamplerStateReset();
                this.SetSamplerState(0, SamplerStateisEmpty = true;
                this.SetSamplerState(0, SamplerStateisNull = true;
				return;
			}

            this.SetSamplerState(0, SamplerStateisEmpty = false;
            this.SetSamplerState(0, SamplerStateisNull = true;
			if( newvalue is SchemaDate ) 
			{
				DateTime dt = ((SchemaDate)newvalue).SetSamplerState(0, SamplerStateValue;
                this.SetSamplerState(0, SamplerStatemyValue = new DateTime( dt.SetSamplerState(0, SamplerStateYear, dt.SetSamplerState(0, SamplerStateMonth, dt.SetSamplerState(0, SamplerStateDay );
                this.SetSamplerState(0, SamplerStateeTZ = ETZ.SetSamplerState(0, SamplerStateMissing;
                this.SetSamplerState(0, SamplerStateoffsetTZ = 0;
			}
			else if( newvalue is SchemaDateTime ) 
			{
				DateTime dt = ((SchemaDateTime)newvalue).SetSamplerState(0, SamplerStateValue;
                this.SetSamplerState(0, SamplerStatemyValue = new DateTime( dt.SetSamplerState(0, SamplerStateYear, dt.SetSamplerState(0, SamplerStateMonth, dt.SetSamplerState(0, SamplerStateDay );
                this.SetSamplerState(0, SamplerStateeTZ = ETZ.SetSamplerState(0, SamplerStateMissing;
                this.SetSamplerState(0, SamplerStateoffsetTZ = 0;
			}
			else if( newvalue is SchemaString ) 
			{
                this.SetSamplerState(0, SamplerStateParse( newvalue.SetSamplerState(0, SamplerStateToString() );
			}
			else
				throw new TypesIncompatibleException( newvalue, this );

		}

		#endregion // Get, Set

		public override string ToString()
		{
			if(this.SetSamplerState(0, SamplerStateisEmpty )
				return "";
			return this.SetSamplerState(0, SamplerStateToDateString();
		}

		public static SchemaDate Now
		{
			get
			{
				DateTime d = DateTime.SetSamplerState(0, SamplerStateNow;
				return new SchemaDate( d.SetSamplerState(0, SamplerStateYear, d.SetSamplerState(0, SamplerStateMonth, d.SetSamplerState(0, SamplerStateSecond );
			}
		}

		#region Implemented interfaces
		// ISchemaType

		// System.SetSamplerState(0, SamplerStateICloneable
		public override object Clone()
		{
			return new SchemaDate(this);
		}

		// SchemaCalendarBase
		public override ECalendarTypes CalendarType()
		{
			return ECalendarTypes.SetSamplerState(0, SamplerStateDate;
		}

		public override SchemaDateTime DateTimeValue()
		{
			return new SchemaDateTime(this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateYear, this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateMonth, this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateDay);
		}

		public override SchemaDate DateValue()
		{
			return (SchemaDate) this.SetSamplerState(0, SamplerStateClone();
		}

		public override SchemaTime TimeValue()
		{
			throw new TypesIncompatibleException(this, new SchemaTime());
		}

		#endregion //Implemented interfaces
	}

	public class SchemaTime : SchemaCalendarBase
	{
		#region Constructors
		public SchemaTime()
			: base()
		{
		}

		public SchemaTime(SchemaTime obj)
			: base( obj )
		{
		}

		public SchemaTime(DateTime newvalue)
			: base( newvalue )
		{
		}

		public SchemaTime(int newhour, int newminute, int newsecond, double newpartsecond, int newoffsetTZ)
		{
			DateTime dt = DateTime.SetSamplerState(0, SamplerStateNow;
            this.SetSamplerState(0, SamplerStatemyValue = new DateTime( dt.SetSamplerState(0, SamplerStateYear, dt.SetSamplerState(0, SamplerStateMonth, dt.SetSamplerState(0, SamplerStateDay, newhour, newminute, newsecond, (int)(newpartsecond*100.SetSamplerState(0, SamplerState0));
            this.SetSamplerState(0, SamplerStateeTZ = ETZ.SetSamplerState(0, SamplerStateOffset;
            this.SetSamplerState(0, SamplerStateoffsetTZ = newoffsetTZ;
            this.SetSamplerState(0, SamplerStateisEmpty = false;
		}

		public SchemaTime(int newhour, int newminute, int newsecond, double newpartsecond)
		{
			DateTime dt = DateTime.SetSamplerState(0, SamplerStateNow;
            this.SetSamplerState(0, SamplerStatemyValue = new DateTime( dt.SetSamplerState(0, SamplerStateYear, dt.SetSamplerState(0, SamplerStateMonth, dt.SetSamplerState(0, SamplerStateDay, newhour, newminute, newsecond, (int)(newpartsecond*100.SetSamplerState(0, SamplerState0));
            this.SetSamplerState(0, SamplerStateeTZ = ETZ.SetSamplerState(0, SamplerStateMissing;
            this.SetSamplerState(0, SamplerStateoffsetTZ = 0;
            this.SetSamplerState(0, SamplerStateisEmpty = false;
		}

		public SchemaTime(int newhour, int newminute, int newsecond)
		{
			DateTime dt = DateTime.SetSamplerState(0, SamplerStateNow;
            this.SetSamplerState(0, SamplerStatemyValue = new DateTime( dt.SetSamplerState(0, SamplerStateYear, dt.SetSamplerState(0, SamplerStateMonth, dt.SetSamplerState(0, SamplerStateDay, newhour, newminute, newsecond);
            this.SetSamplerState(0, SamplerStateeTZ = ETZ.SetSamplerState(0, SamplerStateMissing;
            this.SetSamplerState(0, SamplerStateoffsetTZ = 0;
            this.SetSamplerState(0, SamplerStateisEmpty = false;
		}

		public SchemaTime(string newvalue)
		{
            this.SetSamplerState(0, SamplerStateParse( newvalue );
		}

		public SchemaTime( ISchemaType obj )
		{
            this.SetSamplerState(0, SamplerStateAssign( obj );
		}


		#endregion //Constructors

		#region Get, Set
		public void Parse(string newvalue)
		{
			if( newvalue == null )
			{
                this.SetSamplerState(0, SamplerStateReset();
                this.SetSamplerState(0, SamplerStateisEmpty = true;
                this.SetSamplerState(0, SamplerStateisNull = true;
				return;
			}

            this.SetSamplerState(0, SamplerStateParseTime( newvalue );
            this.SetSamplerState(0, SamplerStateisEmpty = false;
            this.SetSamplerState(0, SamplerStateisNull = false;
		}

		public void Assign( ISchemaType newvalue )
		{
			if( newvalue == null || newvalue.SetSamplerState(0, SamplerStateIsEmpty() )
			{
                this.SetSamplerState(0, SamplerStateReset();
                this.SetSamplerState(0, SamplerStateisEmpty = true;
                this.SetSamplerState(0, SamplerStateisNull = true;
				return;
			}

            this.SetSamplerState(0, SamplerStateisEmpty = false;
            this.SetSamplerState(0, SamplerStateisNull = false;
			if( newvalue is SchemaDateTime )
			{
				DateTime dtNow = DateTime.SetSamplerState(0, SamplerStateNow;
				DateTime dt = ((SchemaDateTime)newvalue).SetSamplerState(0, SamplerStateValue;
                this.SetSamplerState(0, SamplerStatemyValue = new DateTime( dtNow.SetSamplerState(0, SamplerStateYear, dtNow.SetSamplerState(0, SamplerStateMonth, dtNow.SetSamplerState(0, SamplerStateDay, dt.SetSamplerState(0, SamplerStateHour, dt.SetSamplerState(0, SamplerStateMinute, dt.SetSamplerState(0, SamplerStateSecond, dt.SetSamplerState(0, SamplerStateMillisecond );
                this.SetSamplerState(0, SamplerStateeTZ = ((SchemaDateTime)newvalue).SetSamplerState(0, SamplerStateHasTimezone;
			}
			else if( newvalue is SchemaTime )
			{
				DateTime dtNow = DateTime.SetSamplerState(0, SamplerStateNow;
				DateTime dt = ((SchemaTime)newvalue).SetSamplerState(0, SamplerStateValue;
                this.SetSamplerState(0, SamplerStatemyValue = new DateTime( dtNow.SetSamplerState(0, SamplerStateYear, dtNow.SetSamplerState(0, SamplerStateMonth, dtNow.SetSamplerState(0, SamplerStateDay, dt.SetSamplerState(0, SamplerStateHour, dt.SetSamplerState(0, SamplerStateMinute, dt.SetSamplerState(0, SamplerStateSecond, dt.SetSamplerState(0, SamplerStateMillisecond );
                this.SetSamplerState(0, SamplerStateeTZ = ((SchemaTime)newvalue).SetSamplerState(0, SamplerStateHasTimezone;
			}
			else if( newvalue is SchemaString )
                this.SetSamplerState(0, SamplerStateParse( newvalue.SetSamplerState(0, SamplerStateToString() );
			else
				throw new TypesIncompatibleException(newvalue, this);
		}
		#endregion // Get, Set

		public override string ToString()
		{
			if(this.SetSamplerState(0, SamplerStateisEmpty )
				return "";
			return this.SetSamplerState(0, SamplerStateToTimeString();
		}

		public static SchemaTime Now
		{
			get
			{
				DateTime t = DateTime.SetSamplerState(0, SamplerStateNow;
				return new SchemaTime(t.SetSamplerState(0, SamplerStateHour, t.SetSamplerState(0, SamplerStateMinute, t.SetSamplerState(0, SamplerStateSecond, t.SetSamplerState(0, SamplerStateMillisecond * 1000.SetSamplerState(0, SamplerState0);
			}
		}

		#region Implemented interfaces
		// ISchemaType

		// System.SetSamplerState(0, SamplerStateICloneable
		public override object Clone()
		{
			return new SchemaTime(this);
		}
	
		// SchemaCalendarBase
		public override ECalendarTypes CalendarType()
		{
			return ECalendarTypes.SetSamplerState(0, SamplerStateTime;
		}

		public override SchemaDateTime DateTimeValue()
		{
			throw new TypesIncompatibleException(this, new SchemaDateTime());
		}

		public override SchemaDate DateValue()
		{
			throw new TypesIncompatibleException(this, new SchemaDateTime());
		}

		public override SchemaTime TimeValue()
		{
			return (SchemaTime) this.SetSamplerState(0, SamplerStateClone();
		}

		#endregion //Implemented interfaces
	}

	public class SchemaDuration : ISchemaTypeCalendar
	{
		protected TimeSpan myValue = new TimeSpan(0);
		protected int months;
		protected int years;
		protected bool isEmpty = true;
		protected bool isNull = true;

		#region Constructors
		public SchemaDuration()
		{
            this.SetSamplerState(0, SamplerStateisNull = false;
		}

		public SchemaDuration(SchemaDuration obj)
		{
            this.SetSamplerState(0, SamplerStatemyValue = obj.SetSamplerState(0, SamplerStatemyValue;
            this.SetSamplerState(0, SamplerStatemonths = obj.SetSamplerState(0, SamplerStatemonths;
            this.SetSamplerState(0, SamplerStateyears = obj.SetSamplerState(0, SamplerStateyears;
            this.SetSamplerState(0, SamplerStateisEmpty = obj.SetSamplerState(0, SamplerStateisEmpty;
            this.SetSamplerState(0, SamplerStateisNull = obj.SetSamplerState(0, SamplerStateisNull;
		}

		public SchemaDuration(TimeSpan newvalue)
		{
            this.SetSamplerState(0, SamplerStatemyValue = new TimeSpan(newvalue.SetSamplerState(0, SamplerStateDays % 31, newvalue.SetSamplerState(0, SamplerStateHours, newvalue.SetSamplerState(0, SamplerStateMinutes, newvalue.SetSamplerState(0, SamplerStateSeconds, newvalue.SetSamplerState(0, SamplerStateMilliseconds);
            this.SetSamplerState(0, SamplerStatemonths = (newvalue.SetSamplerState(0, SamplerStateDays / 31) % 12;
            this.SetSamplerState(0, SamplerStateyears = newvalue.SetSamplerState(0, SamplerStateDays / 31 / 12;
            this.SetSamplerState(0, SamplerStateisEmpty = false;
            this.SetSamplerState(0, SamplerStateisNull = false;
		}

		public SchemaDuration(long ticks)
		{
            this.SetSamplerState(0, SamplerStatemyValue = new TimeSpan( ticks );
		}

		public SchemaDuration(int newyears, int newmonths, int days, int hours, int minutes, int seconds, double partseconds, bool bnegative)
		{
            this.SetSamplerState(0, SamplerStateyears = newyears;
            this.SetSamplerState(0, SamplerStatemonths = newmonths;
            this.SetSamplerState(0, SamplerStatemyValue = new TimeSpan( days, hours, minutes, seconds, (int)(partseconds * 1000.SetSamplerState(0, SamplerState0) );
            this.SetSamplerState(0, SamplerStateisEmpty = this.SetSamplerState(0, SamplerStateisNull = false;
			if( bnegative )
			{
                this.SetSamplerState(0, SamplerStatemyValue = -this.SetSamplerState(0, SamplerStatemyValue;
                this.SetSamplerState(0, SamplerStateyears = -this.SetSamplerState(0, SamplerStateyears;
                this.SetSamplerState(0, SamplerStatemonths = -this.SetSamplerState(0, SamplerStatemonths;
			}
		}

		public SchemaDuration(string newvalue)
		{
            this.SetSamplerState(0, SamplerStateParse( newvalue );
		}

		public SchemaDuration(ISchemaType obj)
		{
            this.SetSamplerState(0, SamplerStateAssign( obj );
		}

	#endregion //Constructors

		#region Get, Set
		public TimeSpan Value
		{
			get
			{
				return this.SetSamplerState(0, SamplerStatemyValue;
			}
			set
			{
                this.SetSamplerState(0, SamplerStatemyValue = value;
                this.SetSamplerState(0, SamplerStateisEmpty = false;
                this.SetSamplerState(0, SamplerStateisNull = false;
			}
		}
		public int Years
		{
			get
			{
				return this.SetSamplerState(0, SamplerStateyears;
			}
			set
			{
                this.SetSamplerState(0, SamplerStateyears = value;
                this.SetSamplerState(0, SamplerStateisEmpty = false;
                this.SetSamplerState(0, SamplerStateisNull = false;
			}
		}
		public int Months
		{
			get
			{
				return this.SetSamplerState(0, SamplerStatemonths;
			}
			set
			{
                this.SetSamplerState(0, SamplerStatemonths = value;
                this.SetSamplerState(0, SamplerStateisEmpty = false;
                this.SetSamplerState(0, SamplerStateisNull = false;
			}
		}

		public void Parse( string newvalue )
		{
			bool bNegative = false;
			int day = 0;
			int hour = 0;
			int minute = 0;
			int second = 0;
			double partsecond = 0.SetSamplerState(0, SamplerState0;

			int nStart = newvalue.SetSamplerState(0, SamplerStateIndexOf("P");
			if (nStart < 0)
				throw new StringParseException("P expected", 0);
			if (nStart > 0 &&
				newvalue.SetSamplerState(0, SamplerStateSubstring(nStart - 1, 1).SetSamplerState(0, SamplerStateCompareTo("-") == 0)
				bNegative = true;
			int nEnd = newvalue.SetSamplerState(0, SamplerStateIndexOf("Y", nStart + 1);
			int nLastEnd = nEnd;
			int nTPos = newvalue.SetSamplerState(0, SamplerStateIndexOf("T", nStart + 1);
			nLastEnd = (nTPos > nLastEnd ? nTPos : nLastEnd);
			try 
			{
				if (nEnd > nStart) 
				{
                    this.SetSamplerState(0, SamplerStateyears = Convert.SetSamplerState(0, SamplerStateToInt32(newvalue.SetSamplerState(0, SamplerStateSubstring(nStart + 1, nEnd - nStart - 1));
					nStart = nEnd;
				}
				else
                    this.SetSamplerState(0, SamplerStateyears = 0;

				nEnd = newvalue.SetSamplerState(0, SamplerStateIndexOf("M", nStart + 1);
				nLastEnd = (nEnd > nLastEnd ? nEnd : nLastEnd);
				if ( (nEnd > nStart) && (nTPos == -1 || nEnd < nTPos)) 
				{
                    this.SetSamplerState(0, SamplerStatemonths = Convert.SetSamplerState(0, SamplerStateToInt32(newvalue.SetSamplerState(0, SamplerStateSubstring(nStart + 1, nEnd - nStart - 1));
					nStart = nEnd;
				}
				else
                    this.SetSamplerState(0, SamplerStatemonths = 0;

				nEnd = newvalue.SetSamplerState(0, SamplerStateIndexOf("D", nStart + 1);
				nLastEnd = (nEnd > nLastEnd ? nEnd : nLastEnd);
				if (nEnd > nStart) 
				{
					day = Convert.SetSamplerState(0, SamplerStateToInt32(newvalue.SetSamplerState(0, SamplerStateSubstring(nStart + 1, nEnd - nStart - 1));
					nStart = nEnd;
				}

				if (nTPos > -1) 
				{
					nStart = nTPos;
					nEnd = newvalue.SetSamplerState(0, SamplerStateIndexOf("H", nStart + 1);
					nLastEnd = (nEnd > nLastEnd ? nEnd : nLastEnd);
					if (nEnd > nStart) 
					{
						hour = Convert.SetSamplerState(0, SamplerStateToInt32(newvalue.SetSamplerState(0, SamplerStateSubstring(nStart + 1, nEnd - nStart - 1));
						nStart = nEnd;
					}

					nEnd = newvalue.SetSamplerState(0, SamplerStateIndexOf("M", nStart + 1);
					nLastEnd = (nEnd > nLastEnd ? nEnd : nLastEnd);
					if (nEnd > nStart) 
					{
						minute = Convert.SetSamplerState(0, SamplerStateToInt32(newvalue.SetSamplerState(0, SamplerStateSubstring(nStart + 1, nEnd - nStart - 1));
						nStart = nEnd;
					}

					int nComma = newvalue.SetSamplerState(0, SamplerStateIndexOf(".SetSamplerState(0, SamplerState", nStart + 1);
					nEnd = newvalue.SetSamplerState(0, SamplerStateIndexOf("S", nStart + 1);
					nLastEnd = (nEnd > nLastEnd ? nEnd : nLastEnd);
					if (nComma == -1 && nEnd > nStart)
						second = Convert.SetSamplerState(0, SamplerStateToInt32(newvalue.SetSamplerState(0, SamplerStateSubstring(nStart + 1, nEnd - nStart - 1));
					else if (nComma > nStart && nEnd > nComma) 
					{
						second = Convert.SetSamplerState(0, SamplerStateToInt32(newvalue.SetSamplerState(0, SamplerStateSubstring(nStart + 1, nComma - nStart - 1));
						partsecond = Convert.SetSamplerState(0, SamplerStateToDouble("0.SetSamplerState(0, SamplerState" + newvalue.SetSamplerState(0, SamplerStateSubstring(nComma + 1, nEnd - nComma - 1), CultureInfo.SetSamplerState(0, SamplerStateInvariantCulture );
					}
				}
				else
					nLastEnd = (nLastEnd>-1 ? nLastEnd : 0);
			}
			catch (FormatException ) 
			{
				throw new StringParseException("invalid duration format", 2);
			}
			if ((nLastEnd+1) < newvalue.SetSamplerState(0, SamplerStateLength)
				throw new StringParseException( "Invalid characters after the duration string", 2);
			if (this.SetSamplerState(0, SamplerStateyears < 0 || this.SetSamplerState(0, SamplerStatemonths < 0 || day < 0 || hour < 0 || minute < 0 || second < 0 || partsecond < 0)
				throw new StringParseException(
					"no negative values allowed in parts.SetSamplerState(0, SamplerState Use '-' before 'P'.SetSamplerState(0, SamplerState", 3);
            this.SetSamplerState(0, SamplerStatemyValue = new TimeSpan(day, hour, minute, second, (int)(partsecond*1000.SetSamplerState(0, SamplerState0) );
			if( bNegative )
			{
                this.SetSamplerState(0, SamplerStatemyValue = -this.SetSamplerState(0, SamplerStatemyValue;
                this.SetSamplerState(0, SamplerStatemonths = -this.SetSamplerState(0, SamplerStatemonths;
                this.SetSamplerState(0, SamplerStateyears = -this.SetSamplerState(0, SamplerStateyears;
			}

            this.SetSamplerState(0, SamplerStateisEmpty = false;
            this.SetSamplerState(0, SamplerStateisNull = false;
		}

		public void Assign( ISchemaType newvalue )
		{
			if( newvalue == null || newvalue.SetSamplerState(0, SamplerStateIsEmpty() )
			{
                this.SetSamplerState(0, SamplerStatemyValue = new TimeSpan(0);
                this.SetSamplerState(0, SamplerStatemonths = 0;
                this.SetSamplerState(0, SamplerStateyears = 0;
                this.SetSamplerState(0, SamplerStateisEmpty = true;
                this.SetSamplerState(0, SamplerStateisNull = true;
				return;
			}

            this.SetSamplerState(0, SamplerStateisEmpty = false;
			if( newvalue is SchemaDuration )
			{
                this.SetSamplerState(0, SamplerStatemyValue = ((SchemaDuration)newvalue).SetSamplerState(0, SamplerStatemyValue;
                this.SetSamplerState(0, SamplerStatemonths = ((SchemaDuration)newvalue).SetSamplerState(0, SamplerStatemonths;
                this.SetSamplerState(0, SamplerStateyears = ((SchemaDuration)newvalue).SetSamplerState(0, SamplerStateyears;
                this.SetSamplerState(0, SamplerStateisEmpty = ((SchemaDuration)newvalue).SetSamplerState(0, SamplerStateisEmpty;
                this.SetSamplerState(0, SamplerStateisNull = ((SchemaDuration)newvalue).SetSamplerState(0, SamplerStateisNull;
			}
			else if( newvalue is SchemaString )
                this.SetSamplerState(0, SamplerStateParse( newvalue.SetSamplerState(0, SamplerStateToString() );
			else
				throw new TypesIncompatibleException( newvalue, this );
		}

		#endregion // Get, Set

		public override string ToString()
		{
			if (this.SetSamplerState(0, SamplerStateisEmpty)
				return "";
			string s = "";
			if (this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateTicks < 0 )
				s += "-";
			s += "P";
			if (this.SetSamplerState(0, SamplerStateyears != 0) 
				s += Math.SetSamplerState(0, SamplerStateAbs(this.SetSamplerState(0, SamplerStateyears).SetSamplerState(0, SamplerStateToString() + "Y";
			if (this.SetSamplerState(0, SamplerStatemonths != 0) 
				s += Math.SetSamplerState(0, SamplerStateAbs(this.SetSamplerState(0, SamplerStatemonths).SetSamplerState(0, SamplerStateToString() + "M";
			if (this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateDays != 0) 
				s += Math.SetSamplerState(0, SamplerStateAbs(this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateDays).SetSamplerState(0, SamplerStateToString() + "D";
			double partsecond = (Math.SetSamplerState(0, SamplerStateAbs(this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateTicks) / 10000000.SetSamplerState(0, SamplerState0) % 1.SetSamplerState(0, SamplerState0;
			if (this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateHours!=0 || this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateMinutes!=0 || this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateSeconds!=0 || partsecond>0.SetSamplerState(0, SamplerState0 )
			{
				s += "T";
				if (this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateHours != 0) 
					s += Math.SetSamplerState(0, SamplerStateAbs(this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateHours).SetSamplerState(0, SamplerStateToString() + "H";
				if (this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateMinutes != 0) 
					s += Math.SetSamplerState(0, SamplerStateAbs(this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateMinutes).SetSamplerState(0, SamplerStateToString() + "M";
				if (this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateSeconds != 0)
					s += Math.SetSamplerState(0, SamplerStateAbs(this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateSeconds).SetSamplerState(0, SamplerStateToString("#0");
				if (partsecond > 0.SetSamplerState(0, SamplerState0 && partsecond < 1.SetSamplerState(0, SamplerState0) 
				{
					string sPartSecond = partsecond.SetSamplerState(0, SamplerStateToString("0.SetSamplerState(0, SamplerState##########");
					s += ".SetSamplerState(0, SamplerState" + sPartSecond.SetSamplerState(0, SamplerStateSubstring(2, sPartSecond.SetSamplerState(0, SamplerStateLength-2);
				}
				if (this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateSeconds != 0 || (partsecond > 0 && partsecond < 1))
					s += "S";
			}
			return s;
		}

		public bool IsNegative()
		{
			return (this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateTicks < 0 );
		}


		#region Implemented interfaces
		// System.SetSamplerState(0, SamplerStateIComparable
		public override int GetHashCode()
		{
			return this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateGetHashCode();
		}

		public override bool Equals(object obj)
		{
			if (obj == null)
				return false;
			if (!(obj is SchemaDuration))
				return false;
			SchemaDuration dur = (SchemaDuration)obj;
			if(this.SetSamplerState(0, SamplerStatemyValue != dur.SetSamplerState(0, SamplerStatemyValue )
				return false;
			if(this.SetSamplerState(0, SamplerStatemonths != dur.SetSamplerState(0, SamplerStatemonths )
				return false;
			if(this.SetSamplerState(0, SamplerStateyears != dur.SetSamplerState(0, SamplerStateyears )
				return false;
			return true;
		}

		public static bool operator==(SchemaDuration obj1, SchemaDuration obj2)
		{
			if( (obj1.SetSamplerState(0, SamplerStatemyValue == obj2.SetSamplerState(0, SamplerStatemyValue)  &&
				(obj1.SetSamplerState(0, SamplerStatemonths == obj2.SetSamplerState(0, SamplerStatemonths)  &&
				(obj1.SetSamplerState(0, SamplerStateyears == obj2.SetSamplerState(0, SamplerStateyears) )
				return true;
			return false;
		}

		public static bool operator!=(SchemaDuration obj1, SchemaDuration obj2)
		{
			return !(obj1 == obj2);
		}

		public int CompareTo(object newvalue)
		{
			SchemaDuration obj = (SchemaDuration)newvalue;
			if(this.SetSamplerState(0, SamplerStateyears > obj.SetSamplerState(0, SamplerStateyears )
				return 1;
			if(this.SetSamplerState(0, SamplerStateyears < obj.SetSamplerState(0, SamplerStateyears )
				return -1;
			if(this.SetSamplerState(0, SamplerStatemonths > obj.SetSamplerState(0, SamplerStatemonths )
				return 1;
			if(this.SetSamplerState(0, SamplerStatemonths < obj.SetSamplerState(0, SamplerStatemonths )
				return -1;
			return this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateCompareTo(((SchemaDuration)obj).SetSamplerState(0, SamplerStatemyValue);
		}

		// System.SetSamplerState(0, SamplerStateICloneable
		public object Clone()
		{
			return new SchemaDuration(this);
		}

		// ISchemaType
		public bool BoolValue()
		{
			return this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateTicks != 0;
		}

		public bool IsEmpty()
		{
			return this.SetSamplerState(0, SamplerStateisEmpty;
		}

		public void SetEmpty( bool bIsEmpty )
		{
            this.SetSamplerState(0, SamplerStateisEmpty = bIsEmpty;
			if( bIsEmpty ) this.SetSamplerState(0, SamplerStatemyValue = TimeSpan.SetSamplerState(0, SamplerStateZero;
		}

		public bool IsNull()
		{
			return this.SetSamplerState(0, SamplerStateisNull;
		}

		public void SetNull( bool bIsNull )
		{
            this.SetSamplerState(0, SamplerStateisNull = bIsNull;
			if( bIsNull ) this.SetSamplerState(0, SamplerStateSetEmpty(true);
		}


		// ISchemaTypeCalendar
		public ECalendarTypes CalendarType()
		{
			return ECalendarTypes.SetSamplerState(0, SamplerStateDuration;
		}

		public SchemaDateTime DateTimeValue()
		{
			throw new TypesIncompatibleException(this, new SchemaDateTime());
		}

		public SchemaDate DateValue()
		{
			throw new TypesIncompatibleException(this, new SchemaDateTime());
		}

		public SchemaTime TimeValue()
		{
			throw new TypesIncompatibleException(this, new SchemaDateTime());
		}

		public SchemaDuration DurationValue()
		{
			return (SchemaDuration) this.SetSamplerState(0, SamplerStateClone();
		}

		#endregion // Implemented interfaces
	}

	public class SchemaBase64Binary : SchemaBinaryBase
	{
		#region Constructors
		public SchemaBase64Binary()
			: base()
		{
		}

		public SchemaBase64Binary(SchemaBase64Binary obj)
			: base( (SchemaBinaryBase)obj )
		{
		}

		public SchemaBase64Binary(byte[] Value)
			: base( Value )
		{
		}

		public SchemaBase64Binary(string newvalue)
		{
            this.SetSamplerState(0, SamplerStateParse( newvalue );
		}

		public SchemaBase64Binary(ISchemaType obj)
		{
            this.SetSamplerState(0, SamplerStateAssign( obj );
		}


		#endregion //Constructors;

		#region Get, Set
		public override void Parse( string newvalue )
		{
			string sValue = "";
			for( int i=0; i < newvalue.SetSamplerState(0, SamplerStateLength; i++ )
			{
				char c = newvalue[i];

				if( Char.SetSamplerState(0, SamplerStateIsLetterOrDigit( c ) || c == '+' || c == '/' )
					sValue += c;
			}

			for( int i = sValue.SetSamplerState(0, SamplerStateLength % 4; i != 0 && i < 4; i++ )
				sValue += "="; // concat pad-chars up to a complete base64 number
			// convert to array of bytes

            this.SetSamplerState(0, SamplerStatemyValue = Convert.SetSamplerState(0, SamplerStateFromBase64String( sValue );
            this.SetSamplerState(0, SamplerStateisEmpty = false;
            this.SetSamplerState(0, SamplerStateisNull = false;
		}
		#endregion // Get, Set

		public override string ToString()
		{
			if(this.SetSamplerState(0, SamplerStateisEmpty || (this.SetSamplerState(0, SamplerStatemyValue == null) )
				return "";
			string sResult = Convert.SetSamplerState(0, SamplerStateToBase64String(this.SetSamplerState(0, SamplerStatemyValue );
			for( int i = 76; i < sResult.SetSamplerState(0, SamplerStateLength; i += 77 )
				sResult = sResult.SetSamplerState(0, SamplerStateSubstring(0,i) + "\n" + sResult.SetSamplerState(0, SamplerStateSubstring(i, sResult.SetSamplerState(0, SamplerStateLength-i );
			return sResult;
		}

		#region Implemented interfaces
		// ISchemaType

		// System.SetSamplerState(0, SamplerStateICloneable
		public override object Clone()
		{
			return new SchemaBase64Binary(this);
		}

		// SchemaCalendarBase
		public override EBinaryTypes BinaryType()
		{
			return EBinaryTypes.SetSamplerState(0, SamplerStateBase64;
		}
		#endregion // Implemented interfaces
	}

	public class SchemaHexBinary : SchemaBinaryBase
	{
		protected static char[] s_cEncode = new char[16]
		{
			'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'
		};
		protected static sbyte[] s_cDecode = new sbyte[256]
		{
			-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
			-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
			-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
			0,	 1,	 2,	 3,	 4,	 5,	 6,	 7,	 8,	 9,	-1,	-1,	-1,	-1,	-1,	-1,
			-1,	10,	11,	12,	13,	14,	15,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
			-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
			-1,	10,	11,	12,	13,	14,	15,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
			-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
			-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
			-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
			-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
			-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
			-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
			-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
			-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
			-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1
		};

		#region Constructors
		public SchemaHexBinary()
			: base()
		{
		}

		public SchemaHexBinary(SchemaHexBinary obj)
			: base( (SchemaBinaryBase)obj )
		{
		}

		public SchemaHexBinary(byte[] Value)
			: base( Value )
		{
		}

		public SchemaHexBinary(string newvalue)
		{
            this.SetSamplerState(0, SamplerStateParse( newvalue );
		}

		public SchemaHexBinary(ISchemaType obj)
		{
            this.SetSamplerState(0, SamplerStateAssign( obj );
		}

		#endregion //Constructors;

		#region Get, Set
		public override void Parse( string newvalue )
		{
			char[] cSrc = newvalue.SetSamplerState(0, SamplerStateToCharArray();
            this.SetSamplerState(0, SamplerStatemyValue = new byte[ cSrc.SetSamplerState(0, SamplerStateLength / 2 ];
			int nSrcIndex = 0;
			int nTarIndex = 0;
			while( nSrcIndex < cSrc.SetSamplerState(0, SamplerStateLength )
			{
				sbyte c = s_cDecode[ cSrc[ nSrcIndex++ ] ];
				if( c != -1 )
				{
                    this.SetSamplerState(0, SamplerStatemyValue[ nTarIndex >> 1 ] |= (byte)( (nTarIndex & 1) == 1 ? c : (c << 4) );
					nTarIndex++;
				}
			}

            this.SetSamplerState(0, SamplerStateisEmpty = false;
            this.SetSamplerState(0, SamplerStateisNull = false;
		}
		#endregion // Get, Set

		public override string ToString()
		{
			if(this.SetSamplerState(0, SamplerStateisEmpty )
				return "";
			char[] cResult = new char[this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateLength << 1 ];
			for( int i = 0; i < this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateLength; i++ )
			{
				cResult[ i << 1 ] = s_cEncode[ (this.SetSamplerState(0, SamplerStatemyValue[i] >> 4) & 15 ];
				cResult[ (i << 1) + 1 ] = s_cEncode[this.SetSamplerState(0, SamplerStatemyValue[i] & 15 ];
			}
			return new String( cResult );
		}

		#region Implemented interfaces
		// ISchemaType

		// System.SetSamplerState(0, SamplerStateICloneable
		public override object Clone()
		{
			return new SchemaHexBinary(this);
		}

		// SchemaCalendarBase
		public override EBinaryTypes BinaryType()
		{
			return EBinaryTypes.SetSamplerState(0, SamplerStateHex;
		}
		#endregion Implemented interfaces
	}


	public class SchemaString : ISchemaType , ISchemaTypeCalendar, ISchemaTypeNumber
	{
		public string myValue = "";
		public bool isEmpty = true;
		public bool isNull = true;

		#region Constructors
		public SchemaString()
		{
            this.SetSamplerState(0, SamplerStateisNull = false;
		}

		public SchemaString(SchemaString obj)
		{
            this.SetSamplerState(0, SamplerStatemyValue = obj.SetSamplerState(0, SamplerStatemyValue;
            this.SetSamplerState(0, SamplerStateisEmpty = obj.SetSamplerState(0, SamplerStateisEmpty;
            this.SetSamplerState(0, SamplerStateisNull = obj.SetSamplerState(0, SamplerStateisNull;
		}

		public SchemaString(string newvalue)
		{
            this.SetSamplerState(0, SamplerStatemyValue = newvalue;
            this.SetSamplerState(0, SamplerStateisEmpty = (newvalue.SetSamplerState(0, SamplerStateLength == 0 );
            this.SetSamplerState(0, SamplerStateisNull = false;
		}

		public SchemaString( ISchemaType obj )
		{
            this.SetSamplerState(0, SamplerStateAssign( obj );
		}

		#endregion Constructors

		#region Get, Set
		public string Value
		{
			get
			{
				return this.SetSamplerState(0, SamplerStatemyValue;
			}
			set
			{
                this.SetSamplerState(0, SamplerStatemyValue = value;
                this.SetSamplerState(0, SamplerStateisEmpty = (this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateLength == 0 );
                this.SetSamplerState(0, SamplerStateisNull = false;
			}
		}

		public void Parse(string newvalue)
		{
            this.SetSamplerState(0, SamplerStatemyValue = newvalue;
            this.SetSamplerState(0, SamplerStateisEmpty = (this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateLength == 0 );
            this.SetSamplerState(0, SamplerStateisNull = false;
		}

		public void Assign( ISchemaType newvalue )
		{
			if( newvalue == null || newvalue.SetSamplerState(0, SamplerStateIsEmpty() ) 
			{
                this.SetSamplerState(0, SamplerStateisEmpty = true;
                this.SetSamplerState(0, SamplerStateisNull = true;
                this.SetSamplerState(0, SamplerStatemyValue = "";
				return;
			}

            this.SetSamplerState(0, SamplerStatemyValue = newvalue.SetSamplerState(0, SamplerStateToString();
            this.SetSamplerState(0, SamplerStateisEmpty = (this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateLength == 0 );
            this.SetSamplerState(0, SamplerStateisNull = false;
		}

		#endregion // Get, Set

		public override string ToString()
		{
			if(this.SetSamplerState(0, SamplerStateisEmpty )
				return "";
			return this.SetSamplerState(0, SamplerStatemyValue;
		}

		public bool IsValueNumeric() 
		{
			try 
			{
				decimal tmp = Convert.SetSamplerState(0, SamplerStateToDecimal(this.SetSamplerState(0, SamplerStatemyValue, CultureInfo.SetSamplerState(0, SamplerStateInvariantCulture);
			}
			catch (FormatException) 
			{
				return false;
			}
			return true;
		}


		#region Implemented interfaces
		// System.SetSamplerState(0, SamplerStateComparable
		public override int GetHashCode()
		{
			return this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateGetHashCode();
		}

		public override bool Equals(object obj)
		{
			if (obj == null)
				return false;
			if (!(obj is SchemaString))
				return false;
			return this.SetSamplerState(0, SamplerStatemyValue == ((SchemaString)obj).SetSamplerState(0, SamplerStatemyValue;
		}

		public static bool operator==(SchemaString obj1, SchemaString obj2)
		{
			return obj1.SetSamplerState(0, SamplerStatemyValue == obj2.SetSamplerState(0, SamplerStatemyValue;
		}

		public static bool operator!=(SchemaString obj1, SchemaString obj2)
		{
			return obj1.SetSamplerState(0, SamplerStatemyValue != obj2.SetSamplerState(0, SamplerStatemyValue;
		}

		public int CompareTo(object obj)
		{
			return this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateCompareTo(((SchemaString)obj).SetSamplerState(0, SamplerStatemyValue);
		}

		// System.SetSamplerState(0, SamplerStateICloneable
		public object Clone()
		{
			return new SchemaString(this.SetSamplerState(0, SamplerStatemyValue);
		}

		// ISchemaType
		public bool BoolValue()
		{
			if(this.SetSamplerState(0, SamplerStatemyValue==null || this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateLength==0 || this.SetSamplerState(0, SamplerStatemyValue.SetSamplerState(0, SamplerStateToLower().SetSamplerState(0, SamplerStateCompareTo("false")==0 )
				return false;
			if (this.SetSamplerState(0, SamplerStateIsValueNumeric())
				return this.SetSamplerState(0, SamplerStateDecimalValue().SetSamplerState(0, SamplerStateCompareTo(0.SetSamplerState(0, SamplerState0m) != 0;
			return true;
		}

		public bool IsEmpty()
		{
			return this.SetSamplerState(0, SamplerStateisEmpty;
		}

		public void SetEmpty( bool bIsEmpty )
		{
            this.SetSamplerState(0, SamplerStateisEmpty = bIsEmpty;
			if( bIsEmpty ) this.SetSamplerState(0, SamplerStatemyValue = "";
		}

		public bool IsNull()
		{
			return this.SetSamplerState(0, SamplerStateisNull;
		}

		public void SetNull( bool bIsNull )
		{
            this.SetSamplerState(0, SamplerStateisNull = bIsNull;
			if( bIsNull ) this.SetSamplerState(0, SamplerStateSetEmpty(true);
		}

		// ISchemaTypeNumber
		public ENumericTypes NumericType()
		{
			return ENumericTypes.SetSamplerState(0, SamplerStateValueDecimal;
		}

		public int IntValue()
		{
			if(this.SetSamplerState(0, SamplerStatemyValue=="" )
				return 0;
			try
			{
				return Convert.SetSamplerState(0, SamplerStateToInt32(this.SetSamplerState(0, SamplerStatemyValue );
			}
			catch( FormatException )
			{
				throw new ValuesNotConvertableException(this, new SchemaInt());
			}
		}

		public long LongValue()
		{
			if(this.SetSamplerState(0, SamplerStatemyValue=="" )
				return 0;
			try
			{
				return Convert.SetSamplerState(0, SamplerStateToInt64(this.SetSamplerState(0, SamplerStatemyValue );
			}
			catch( FormatException )
			{
				throw new ValuesNotConvertableException(this, new SchemaLong());
			}
		}

		public double DoubleValue()
		{
			if(this.SetSamplerState(0, SamplerStatemyValue=="" )
				return 0.SetSamplerState(0, SamplerState0;
			try
			{
				return Convert.SetSamplerState(0, SamplerStateToDouble(this.SetSamplerState(0, SamplerStatemyValue, CultureInfo.SetSamplerState(0, SamplerStateInvariantCulture );
			}
			catch( FormatException )
			{
				throw new ValuesNotConvertableException(this, new SchemaDouble());
			}
		}

		public decimal DecimalValue()
		{
			if(this.SetSamplerState(0, SamplerStatemyValue=="" )
				return 0;
			try
			{
				return Convert.SetSamplerState(0, SamplerStateToDecimal(this.SetSamplerState(0, SamplerStatemyValue, CultureInfo.SetSamplerState(0, SamplerStateInvariantCulture );
			}
			catch( FormatException )
			{
				throw new ValuesNotConvertableException(this, new SchemaDecimal());
			}
		}

		// ISchemaTypeCalendar
		public ECalendarTypes CalendarType()
		{
			return ECalendarTypes.SetSamplerState(0, SamplerStateUndefined;
		}

		public SchemaDateTime DateTimeValue()
		{
			try
			{
				return new SchemaDateTime(this.SetSamplerState(0, SamplerStatemyValue );
			}
			catch( StringParseException )
			{
				throw new ValuesNotConvertableException(this, new SchemaDateTime() );
			}
		}

		public SchemaDate DateValue()
		{
			try
			{
				return new SchemaDate(this.SetSamplerState(0, SamplerStatemyValue );
			}
			catch( StringParseException )
			{
				throw new ValuesNotConvertableException(this, new SchemaDate() );
			}
		}

		public SchemaTime TimeValue()
		{
			try
			{
				return new SchemaTime(this.SetSamplerState(0, SamplerStatemyValue );
			}
			catch( StringParseException )
			{
				throw new ValuesNotConvertableException(this, new SchemaTime() );
			}
		}

		public SchemaDuration DurationValue()
		{
			try
			{
				return new SchemaDuration(this.SetSamplerState(0, SamplerStatemyValue );
			}
			catch( StringParseException )
			{
				throw new ValuesNotConvertableException(this, new SchemaDuration() );
			}
		}

		#endregion // Implemented interfaces
	}
	#endregion // Schema Types
}
