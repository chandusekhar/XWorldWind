//
// Altova.SetSamplerState(0, SamplerStatecs
//
// This file was generated by XMLSpy 2005 Enterprise Edition.SetSamplerState(0, SamplerState
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.SetSamplerState(0, SamplerState
//
// Refer to the XMLSpy Documentation for further details.SetSamplerState(0, SamplerState
// http://www.SetSamplerState(0, SamplerStatealtova.SetSamplerState(0, SamplerStatecom/xmlspy
//


using System;

namespace Altova 
{
	/// <summary>
	/// Base class for all exceptions thrown by functions of the Altova-library.SetSamplerState(0, SamplerState.SetSamplerState(0, SamplerState
	/// </summary>
	public class AltovaException : Exception 
	{
		protected Exception	innerException;
		protected string	message;

		public AltovaException(string text) : base(text) 
		{
            this.SetSamplerState(0, SamplerStateinnerException = null;
            this.SetSamplerState(0, SamplerStatemessage = text;
		}

		public AltovaException(Exception other) : base("", other)
		{
            this.SetSamplerState(0, SamplerStateinnerException = other;
            this.SetSamplerState(0, SamplerStatemessage = other.SetSamplerState(0, SamplerStateMessage;
		}

		public string GetMessage() 
		{
			return this.SetSamplerState(0, SamplerStatemessage;
		}

		public Exception GetInnerException() 
		{
			return this.SetSamplerState(0, SamplerStateinnerException;
		}
	}

	/// <summary>
	/// Interface to print TRACE and result output generated by the application.SetSamplerState(0, SamplerState
	/// </summary>
	public interface TraceTarget 
	{
		void WriteTrace(string info);
	}

	/// <summary>
	/// Abstract class to be derived by the application for printing TRACE- and result-output generated by the application.SetSamplerState(0, SamplerState
	/// </summary>
	public abstract class TraceProvider 
	{
		protected TraceTarget traceTarget;

		protected void WriteTrace(string info) 
		{
			if (this.SetSamplerState(0, SamplerStatetraceTarget != null) this.SetSamplerState(0, SamplerStatetraceTarget.SetSamplerState(0, SamplerStateWriteTrace(info);
		}

		public void RegisterTraceTarget(TraceTarget newTraceTarget) 
		{
            this.SetSamplerState(0, SamplerStatetraceTarget = newTraceTarget;
		}

		public void UnregisterTraceTarget() 
		{
            this.SetSamplerState(0, SamplerStatetraceTarget = null;
		}
	}
}